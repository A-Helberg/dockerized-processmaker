var PMDesigner = {};


PMDesigner.moddle = new BpmnModdle();
PMDesigner.bpmnFactory =  new BpmnFactory(PMDesigner.moddle);
/**
 * function to get the enviroment variables (WORKSPACE, LANG, SKIN)
 */
enviromentVariables = function (variable) {
    if (window.parent) {
        var url1 = window.parent.location.pathname;
        var variables = url1.split('/');
        var WORKSPACE = variables[1];
        WORKSPACE = WORKSPACE.substring(3);
        var LANG = variables[2];
        var SKIN = variables[3];

        if (variable == 'WORKSPACE') {
            return WORKSPACE;
        } else if (variable == 'LANG'){
            return LANG;
        }  else if (variable == 'SKIN'){
            return SKIN;
        } else {
            return null;
        }
    }
}

var LANG = enviromentVariables('LANG');
var WORKSPACE = enviromentVariables('WORKSPACE');
var SKIN = enviromentVariables('SKIN');
var DEFAULT_WINDOW_WIDTH  = 943;
var DEFAULT_WINDOW_HEIGHT = 520;

if (LANG != 'en') {
    if (typeof __TRANSLATIONMAFE != "undefined" && typeof __TRANSLATIONMAFE[LANG] != 'undefined') {
        PMUI.loadLanguage(__TRANSLATIONMAFE.en, 'en');
        PMUI.loadLanguage(__TRANSLATIONMAFE[LANG], LANG);

        PMUI.setDefaultLanguage('en');
        PMUI.setCurrentLanguage(LANG);
    }
}

PMDesigner.resizeFrame = function () {
    if (parent.document.documentElement === document.documentElement) {
        jQuery(".content").css("height",parseInt(jQuery(window).height()));
    } else {
        jQuery(".content").css("height", document.body.clientHeight);
        
    }
};
var resizingFrame = PMDesigner.resizeFrame;

PMDesigner.applyCanvasOptions = function () {
    list = new PMUI.control.DropDownListControl({
        options: [],
        style: {
            cssClasses: [
                "mafe-dropdown-zoom"
            ]
        },
        width: 150,
        onChange : function(newValue, previous) {
            var canvas = PMDesigner.project.diagrams.find('id', newValue);
            PMUI.getActiveCanvas().getHTML().style.display = 'none';
            PMUI.setActiveCanvas(canvas);
            canvas.getHTML().style.display = 'inline';
        }
    });

    jQuery(jQuery(".navBar li")[6]).append(list.getHTML());
    list.defineEvents();
    PMDesigner.canvasList = list;
};

//Zoom
PMDesigner.ApplyOptionsZoom = function () {
      list = new PMUI.control.DropDownListControl({
            options: [                                
            {
                label: "50%",
                value: 1
            },
            {
                label: "75%",
                value: 2
            },
            {
                label: "100%",
                value: 3,
                selected: true
            },
            {
                label: "125%",
                value: 4
            },
            {
                label: "150%",
                value: 5
            }
          ],
          style: {
            cssClasses: [
                "mafe-dropdown-zoom"
            ]
          },
          onChange : function(newValue, previous) {
              var i;
            newValue = parseInt(newValue, 10);
            PMUI.getActiveCanvas().applyZoom(newValue);
          }
      });

    jQuery(jQuery(".navBar li")[3]).append(list.getHTML());
    list.defineEvents();
};

jQuery(document).ready(function($) {

    /***************************************************
     * Defines the Process
     ***************************************************/
    if (typeof prj_uid === "undefined") {
        prj_uid = '';
    }
    if (typeof prj_readonly === "undefined") {
        prj_readonly = '';
    }
    if (typeof credentials === "undefined") {
        credentials = '';
    } else {
        credentials = RCBase64.decode(credentials);
        credentials =  (credentials == '')? "" :JSON.parse(credentials);
    }

    
    
      myContent = $('body').layout({
        //applyDefaultStyles: true,
        center__paneSelector: "#p-center-layout",
        //defaults: {
        //    togglerClass: "toggler"
        //},
        north: {
            size: 50,
            spacing_open: 0,
            closable: false,
            resizable: false
        },
        south: {
            size: "auto",
            spacing_open: 0,
            closable: false,
            resizable: false
        },
        west: {
            size: 100,
            minSize: 100,
            maxSize: 180,
            //spacing_open: 0,
            //closable: true,
            resizable: false,
            //onresize: function (pane, $Pane, paneState) {
            //    var width  = paneState.innerWidth; 
            //    var height = paneState.innerHeight;
            //    absoluteX= jQuery("#div-layout-canvas").offset().left;
            //    absoluteY= jQuery("#div-layout-canvas").offset().top;
            //    PMDesigner.canvas.absoluteX += width-absoluteX+15 - PMDesigner.canvas.getLeftScroll();
            //    
            //    for (i = 0; i < PMDesigner.canvas.customShapes.getSize(); i += 1) {
            //        shape = PMDesigner.canvas.customShapes.get(i);
            //        shape.absoluteX += width-absoluteX+15;
            //        for (j = 0; j < shape.ports.getSize(); j += 1) {
            //            port = shape.ports.get(j);
            //            port.absoluteX += width-absoluteX+15;
            //        }
            //    }
            //    //for (i = 0; i <= PMDesigner.canvas.conections.getSize(); i += 1) {
            //    //    conn = PMDesigner.canvas.conn.get(i);
            //    //    conn.absoluteX += width-absoluteX+14;
            //    //}
            //},
            onclose: function (pane, $Pane, paneState) {
                PMDesigner.canvas.absoluteX = 6 ;
                var i,
                    shape,
                    port,
                    j,
                    conn;
                for (i = 0; i < PMDesigner.canvas.customShapes.getSize(); i += 1) {
                    shape = PMDesigner.canvas.customShapes.get(i);
                    shape.absoluteX += -firstAbsuluteX+6;
                    for (j = 0; j < shape.ports.getSize(); j += 1) {
                        port = shape.ports.get(j);
                        port.absoluteX +=  - firstAbsuluteX;
                        //canvas.getLeftScroll()
                    }
                }
                //for (i = 0; i <= PMDesigner.canvas.conections.getSize(); i += 1) {
                //    conn = PMDesigner.canvas.conn.get(i);
                //    conn.absoluteX =  firstAbsuluteX + 6;
                //}
            },
            onopen: function (pane, $Pane, paneState) {
                PMDesigner.canvas.absoluteX = firstAbsuluteX -  PMDesigner.canvas.getLeftScroll();
                 var i,
                    shape,
                    port,
                    j,
                    conn;
                for (i = 0; i < PMDesigner.canvas.customShapes.getSize(); i += 1) {
                    shape = PMDesigner.canvas.customShapes.get(i);
                    shape.absoluteX +=  firstAbsuluteX-6;
                    for (j = 0; j < shape.ports.getSize(); j += 1) {
                        port = shape.ports.get(j);
                        port.absoluteX +=  firstAbsuluteX;
                    }
                }
                for (i = 0; i <= PMDesigner.canvas.conections.getSize(); i += 1) {
                    conn = PMDesigner.canvas.conn.get(i);
                    conn.absoluteX +=  firstAbsuluteX ;
                }
            }
            
        }
    });
    //Allow overflow to Panel North
    myContent.allowOverflow('north');
    myContent.allowOverflow('west');
    //Allow overflow to Panel South
    //myContent.allowOverflow('south');
    
    
    //PMDesigner.process = new PMProcess({
    //    id: prj_uid,
    //    name: 'Untitled Process',
    //    keys: {
    //        access_token: credentials.access_token,
    //        expires_in: credentials.expires_in,
    //        token_type: credentials.token_type,
    //        scope: credentials.scope,
    //        refresh_token: credentials.refresh_token,
    //        client_id: credentials.client_id,
    //        client_secret: credentials.client_secret
    //    },
    //    listeners: {
    //        create: function (self, element) {
    //            var sh, i,
    //                contDivergent = 0,
    //                contConvergent = 0;
    //            //Updating the background color for connections
    //            jQuery(".pmui-intersection > div > div").css("background-color","black");
    //
    //            if (element.type == "Connection") {
    //                 ///////////****************Changing the gatDirection*******************//////////////////
    //                if (element.relatedObject.srcPort.parent.gat_type === "PARALLEL" ||
    //                    element.relatedObject.srcPort.parent.gat_type === "INCLUSIVE" ||
    //                    element.relatedObject.destPort.parent.gat_type === "PARALLEL" ||
    //                    element.relatedObject.destPort.parent.gat_type === "INCLUSIVE") {
    //                    if (element.relatedObject.srcPort.parent.gat_type !== undefined){
    //                        sh = element.relatedObject.srcPort.parent;
    //                    } else {
    //                        sh = element.relatedObject.destPort.parent;
    //                    }
    //
    //                    if(sh.gat_direction === "DIVERGING"){
    //                        for (i = 0; i < sh.ports.asArray().length; i+=1){
    //                            if (sh.ports.asArray()[i].connection.flo_element_origin_type === "bpmnActivity"){
    //                                contDivergent ++;
    //                            }
    //                            if (contDivergent >1){
    //                                sh.gat_direction = "CONVERGING";
    //                                i = sh.ports.asArray().length;
    //                            }
    //                        }
    //                    }
    //                    if(sh.gat_direction === "CONVERGING"){
    //                        for (i = 0; i < sh.ports.asArray().length; i+=1){
    //                            if (sh.ports.asArray()[i].connection.flo_element_origin_type === "bpmnGateway"){
    //                                contConvergent ++;
    //                            }
    //                            if (contConvergent >1){
    //                                sh.gat_direction = "DIVERGING";
    //                                i = sh.ports.asArray().length;
    //                            }
    //                        }
    //                    }
    //
    //                }
    //                ///////
    //            }
    //
    //
    //            setSaveButtonDisabled(self);
    //        },
    //        update: function (self) {
    //            //Updating the background color for connections
    //            jQuery(".pmui-intersection > div > div").css("background-color","black");
    //            setSaveButtonDisabled(self);
    //        },
    //        remove: function (self) {
    //            setSaveButtonDisabled(self);
    //        },
    //        success:  function(self, xhr, response){
    //            var message;
    //            self.dirty = false;
    //            setSaveButtonDisabled(self);
    //            self.dirtyElements[0] = {
    //                laneset: {},
    //                lanes: {},
    //                activities: {},
    //                events: {},
    //                gateways: {},
    //                flows: {},
    //                artifacts: {},
    //                lines: {},
    //                data: {},
    //                participants: {},
    //                startMessageEvent: {},
    //                startTimerEvent: {}
    //            };
    //            self.updateIdentifiers(response);
    //            if (PMDesigner.currentMsgFlash) {
    //                PMDesigner.msgFlash('The process was saved successfully.'.translate(), document.body, 'success',3000, 5);
    //            }
    //
    //        },
    //        failure: function(self, xhr, response){
    //            var message;
    //            if (response.error.code === 401) {
    //                /*message = new PMUI.ui.FlashMessage({
    //                    message: "It was not possible to establish a connection with the server".translate(),
    //                    duration: 5000,
    //                    appendTo: document.body,
    //                    severity: 'info'
    //                });
    //                message.show();*/
    //                self.remoteProxy.setUrl("/"+WORKSPACE+"/oauth2/token");
    //                self.setRefreshToken();
    //                self.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
    //                self.save();
    //            } else {
    //                PMDesigner.msgFlash('Error saving the process.'.translate(), document.body, 'error',3000, 5);
    //                self.updateIdentifiers(response);
    //            }
    //        }
    //    }
    //});
    
    PMDesigner.createHTML();

    
    var setSaveButtonDisabled = function(that) {
        if (that.isDirty()) {  
             if (document.getElementsByClassName("mafe-button-save").length > 0) {
                    document.getElementsByClassName("mafe-button-save")[0].removeAttribute("style");

                }
        } else {
            if (document.getElementsByClassName("mafe-button-save").length > 0) {
                document.getElementsByClassName("mafe-button-save")[0].style.backgroundColor = "#e8e8e8";
                document.getElementsByClassName("mafe-button-save")[0].style.color = "000";
            }
        }
    };
    var s;
    var sidebarCanvas = [];
    for(s=0; s< PMDesigner.sidebar.length;s+=1) {
        sidebarCanvas = sidebarCanvas.concat(PMDesigner.sidebar[s].getSelectors());       
        jQuery(".bpmn_shapes").append(PMDesigner.sidebar[s].getHTML());
    }
    sidebarCanvas.splice(15, 1);  //to remove lane selector
   // sidebarCanvas = sidebarCanvas + ',.mafe-event-start';
   sidebarCanvas = sidebarCanvas.concat('.mafe-event-start');
   sidebarCanvas = sidebarCanvas.concat('.pmui-pmactivity');
   sidebarCanvas = sidebarCanvas.concat('.mafe-event-end');

    //Adding Sidebar to DOM
    firstAbsuluteX = jQuery("#div-layout-canvas").offset().left;


    //PMDesigner.canvas = new PMCanvas({
    //    id: PMUI.generateUniqueId(),
    //    process: PMDesigner.process,
    //    absoluteX: jQuery("#div-layout-canvas").offset().left,
    //    absoluteY: jQuery("#div-layout-canvas").offset().top,
    //    //left: jQuery("#div-layout-canvas").offset().left,
    //    //top: jQuery("#div-layout-canvas").offset().top,
    //    //left:jQuery("#pm_designer").offset().left,
    //    //top:jQuery("#pm_designer").offset().top,
    //    width: 4000,
    //    height: 4000,
    //    style: {
    //        cssProperties: {
    //            overflow: "hidden"
    //        }
    //    },
    //    drop: {
    //        type: 'container',
    //        selectors: sidebarCanvas
    //    },
    //    //container: "regularcontainer",
    //    container: "pmcanvas",
    //    //readOnly:  true,
    //    readOnly: prj_readonly === 'true' ? true : false,
    //    hasClickEvent : true,
    //    copyAndPasteReferences: {
    //        PMEvent: PMEvent,
    //        PMGateway: PMGateway,
    //        PMActivity: PMActivity,
    //        PMArtifact: PMArtifact,
    //        PMFlow: PMFlow
    //    }
    //});

    var project = new PMProject({
        id: prj_uid,
        name: 'Untitled Process',
        keys: {
                    access_token: credentials.access_token,
                    expires_in: credentials.expires_in,
                    token_type: credentials.token_type,
                    scope: credentials.scope,
                    refresh_token: credentials.refresh_token,
                    client_id: credentials.client_id,
                    client_secret: credentials.client_secret
                },
        listeners: {
                    create: function (self, element) {
                        var sh, i,
                            contDivergent = 0,
                            contConvergent = 0;
                        //Updating the background color for connections
                        jQuery(".pmui-intersection > div > div").css("background-color","black");

                        if (element.type == "Connection") {
                             ///////////****************Changing the gatDirection*******************//////////////////
                            if (element.relatedObject.srcPort.parent.gat_type === "PARALLEL" ||
                                element.relatedObject.srcPort.parent.gat_type === "INCLUSIVE" ||
                                element.relatedObject.destPort.parent.gat_type === "PARALLEL" ||
                                element.relatedObject.destPort.parent.gat_type === "INCLUSIVE") {
                                if (element.relatedObject.srcPort.parent.gat_type !== undefined){
                                    sh = element.relatedObject.srcPort.parent;
                                } else {
                                    sh = element.relatedObject.destPort.parent;
                                }

                                if(sh.gat_direction === "DIVERGING"){
                                    for (i = 0; i < sh.ports.asArray().length; i+=1){
                                        if (sh.ports.asArray()[i].connection.flo_element_origin_type === "bpmnActivity"){
                                            contDivergent ++;
                                        }
                                        if (contDivergent >1){
                                            sh.gat_direction = "CONVERGING";
                                            i = sh.ports.asArray().length;
                                        }
                                    }
                                }
                                if(sh.gat_direction === "CONVERGING"){
                                    for (i = 0; i < sh.ports.asArray().length; i+=1){
                                        if (sh.ports.asArray()[i].connection.flo_element_origin_type === "bpmnGateway"){
                                            contConvergent ++;
                                        }
                                        if (contConvergent >1){
                                            sh.gat_direction = "DIVERGING";
                                            i = sh.ports.asArray().length;
                                        }
                                    }
                                }

                            }
                            ///////
                        }


                        setSaveButtonDisabled(self);
                    },
                    update: function (self) {
                        //Updating the background color for connections
                        jQuery(".pmui-intersection > div > div").css("background-color","black");
                        setSaveButtonDisabled(self);
                    },
                    remove: function (self) {
                        setSaveButtonDisabled(self);
                    },
                    success:  function(self, xhr, response){
                        var message;
                        self.dirty = false;
                        setSaveButtonDisabled(self);
                        self.dirtyElements[0] = {
                            laneset: {},
                            lanes: {},
                            activities: {},
                            events: {},
                            gateways: {},
                            flows: {},
                            artifacts: {},
                            lines: {},
                            data: {},
                            participants: {},
                            startMessageEvent: {},
                            startTimerEvent: {}
                        };
                        self.updateIdentifiers(response);
                        if (PMDesigner.currentMsgFlash) {
                            PMDesigner.msgFlash('The process was saved successfully.'.translate(), document.body, 'success',3000, 5);
                        }

                    },
                    failure: function(self, xhr, response){
                        var message;
                        if (response.error.code === 401) {
                            /*message = new PMUI.ui.FlashMessage({
                                message: "It was not possible to establish a connection with the server".translate(),
                                duration: 5000,
                                appendTo: document.body,
                                severity: 'info'
                            });
                            message.show();*/
                            self.remoteProxy.setUrl("/"+WORKSPACE+"/oauth2/token");
                            self.setRefreshToken();
                            self.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
                            self.save();
                        } else {
                            PMDesigner.msgFlash('Error saving the process.'.translate(), document.body, 'error',3000, 5);
                            self.updateIdentifiers(response);
                        }
                    }
                }
    });
    PMDesigner.project = project;
    //var canvas = project.buildCanvas(sidebarCanvas);
    //PMDesigner.canvas.setPosition(jQuery(".ui-layout-pane-center").offset().left, jQuery(".ui-layout-pane-center").offset().top);
    //jQuery("#div-layout-canvas").append(PMDesigner.canvas.getHTML());
    //jQuery("#p-center-layout").scroll(PMDesigner.canvas.onScroll(PMDesigner.canvas, jQuery("#p-center-layout")));


    //PMDesigner.canvas.setShapeFactory(PMDesigner.shapeFactory);
    //PMDesigner.canvas.attachListeners();
    //PMDesigner.canvas.createConnectHandlers('','');
    //PMUI.setActiveCanvas(canvas);
    //create connect validator
    PMDesigner.connectValidator = new ConnectValidator();
    var d;
    for(d=0; d<PMDesigner.sidebar.length; d+=1) {
        PMDesigner.sidebar[d].activate();
    }

    /**
    * ContextMenu added to HTMLElement
    **/

    //if (!PMDesigner.canvas.readOnly) {
    //    menuCanvas = PMDesigner.getMenuFactory("CANVAS");
    //    PMDesigner.canvas.setContextMenu(menuCanvas);
        $('.bpmn_shapes_legend').hide();
    //} else {
    //    $('.bpmn_shapes').hide();
    //    $('.content_controls').hide();
    //    $('.navBar').hide();
    //    //update bpmn_shapes_legend
    //    var i;
    //    var dt = [
    //        ['red', 'Task in Progress'],
    //        ['green', 'Completed Task'],
    //        ['silver', 'Pending Task / Not Executed'],
    //        ['orange', 'Parallel Task']
    //    ];
    //    for (i = 0; i < dt.length; i++) {
    //        var legend = $("<div></div>");
    //        var legendIcon = $("<div></div>").addClass("mafe-activity-task-" + dt[i][0]).addClass("icon-legend");
    //        var legendText = $("<div>" + dt[i][1] + "</div>").addClass("text-legend");
    //        legend.append(legendIcon).append(legendText);
    //        jQuery(".bpmn_shapes_legend").append(legend);
    //    }
    //}
    

    //PMDesigner.process.setCanvas(PMDesigner.canvas);

    //
    //var xml2;
    //var moddle = new BpmnModdle();
    //PMDesigner.bpmnFactory =  new BpmnFactory(moddle);
    //PMDesigner.moddle = moddle;
    //var action = 'import';
    //
    //if (action === 'import') {
    //    jQuery.get('/resources/miwg-test-suite/A.2.0.bpmn', function(data) {
    //        //alert(data);
    //        ////process text file line by line
    //        //$('#div').html(data.replace('n','<br />'));
    //        moddle.fromXML(data, function(err, definitions) {
    //            var imp = new importBpmnDiagram(definitions);
    //
    //            console.log('import');
    //
    //            console.log(definitions);
    //
    //            moddle.toXML(definitions, function(err, xmlStrUpdated) {
    //
    //                //console.log(xmlStrUpdated);
    //                xml2 = xmlStrUpdated;
    //                // xmlStrUpdated contains new id and the added process
    //            });
    //        });
    //    });
    //} else {
    //    var xmlStr =
    //        '<?xml version="1.0" encoding="UTF-8"?>' +
    //        '<bpmn2:definitions xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" id="empty-definitions" targetNamespace="http://bpmn.io/schema/bpmn">' +
    //        '</bpmn2:definitions>';
    //
    //    moddle.fromXML(xmlStr, function(err, definitions) {
    //        //    var imp = new importBpmnDiagram(definitions);
    //        //
    //        //    console.log('export');
    //        //
    //        //console.log(definitions);
    //        PMDesigner.businessObject = definitions;
    //        PMDesigner.canvas.setBussinesObject();
    //        //    moddle.toXML(definitions, function(err, xmlStrUpdated) {
    //        ////        //console.log(xmlStrUpdated);
    //        //        xml2 = xmlStrUpdated;
    //        ////        // xmlStrUpdated contains new id and the added process
    //        //    });
    //        PMDesigner.process.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
    //        PMDesigner.process.load();
    //
    //    });
    //}
    project.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
    project.load();

    var downloadLink = $('.mafe-button-export-bpmn-process');
    downloadLink.click(function (e) {
        console.log('exporting');
        PMDesigner.moddle.toXML(PMDesigner.businessObject, function(err, xmlStrUpdated) {

            //console.log(xmlStrUpdated);
            //xml2 = xmlStrUpdated;
            setEncoded(downloadLink,PMDesigner.project.projectName + '.bpmn' , xmlStrUpdated);
            // xmlStrUpdated contains new id and the added process
        });

    });


    //
    //if (PMDesigner.canvas.readOnly) {
    //    PMDesigner.modeReadOnly();
    //}

    /*=================================================
    =            Full screen functionality            =
    =================================================*/
    var elem;
    if (parent.document.documentElement === document.documentElement) {
        elem = document.documentElement;
    } else {
        elem = parent.document.getElementById("frameMain");
    }
    PMDesigner.fullScreen = new FullScreen({
        element: elem,
        onReadyScreen: function() {
            setTimeout(function() {
                PMDesigner.resizeFrame();
            }, 500);
        },
        onCancelScreen: function() {
            setTimeout(function() {
                PMDesigner.resizeFrame();
            }, 500);
        }
    });
    /*-----  End of Full screen functionality  ------*/


    /*===========================================
    =            ProcessMaker module            =
    ===========================================*/
    new PMAction({
        selector: ".mafe-menu-variable",
        label: {
                text: "Variables".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.variables();
        }
    });
    new PMAction({
        selector: ".mafe-menu-eventmessages",
        label: {
            text: "Event messages".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.eventMessages();
        }
    });
    new PMAction({
        selector: ".mafe-menu-dynaform",
        label: {
            text: "Dynaform".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.dynaform();
        }
    });
    new PMAction({
        selector: ".mafe-menu-inputdocuments",
        label: {
            text: "Input Documents".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.input();
        }
    });
    new PMAction({
        selector: ".mafe-menu-outputdocuments",
        label: {
            text: "Output Documents".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.output();
        }
    });
    new PMAction({
        selector: ".mafe-menu-triggers",
        label: {
            text: "Triggers".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.trigger();
        }
    });
    new PMAction({
        selector: ".mafe-menu-reporttables",
        label: {
            text: "Report Tables".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.reporttable();
        }
    });
    new PMAction({
        selector: ".mafe-menu-databaseconnections",
        label: {
            text: "Database Connections".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.database();
        }
    });

    /*-----  End of ProcessMaker module  ------*/

    /*==========================================================
    =            Processmake module - create action            =
    ==========================================================*/
    new PMAction({
        selector: ".mafe-menu-variable-create",
        label: {
            selector: ".mafe-menu-variable-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.variables.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-eventmessages-create",
        label: {
            selector: ".mafe-menu-eventmessages-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.eventMessages.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-dynaform-create",
        label: {
            selector: ".mafe-menu-dynaform-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.dynaform.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-inputdocuments-create",
        label: {
            selector: ".mafe-menu-inputdocuments-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.input();
            PMDesigner.input.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-outputdocuments-create",
        label: {
            selector: ".mafe-menu-outputdocuments-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.output();
            PMDesigner.output.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-triggers-create",
        label: {
            selector: ".mafe-menu-triggers-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.trigger();
            PMDesigner.trigger.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-reporttables-create",
        label: {
            selector: ".mafe-menu-reporttables-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.reporttable();
            PMDesigner.reporttable.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-databaseconnections-create",
        label: {
            selector: ".mafe-menu-databaseconnections-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.database.create();
        }
    });

    /*-----  End of Processmake module - create action  ------*/



    /*========================================
    =            Designer buttons            =
    ========================================*/
    new PMAction({
        selector: ".mafe-button-save",
        tooltip: "Save process".translate(),
        label: {
            text: "Save".translate()
        },
        execute: true,
        handler: function(){
            PMDesigner.project.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
            PMDesigner.project.save(true);
        }
    });
    new PMAction({
        selector: ".mafe-button-export-process",
        tooltip: "Export process".translate(),
        label: {
            text: "Export".translate()
        },
        execute: true,
        handler: function(){
            var ws = enviromentVariables('WORKSPACE');
            if (!window.location.origin) {
                window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');
            }
            location.href = window.parent.location.origin+"/api/1.0/"+ws+"/project/"+PMDesigner.project.id+"/export?access_token="+PMDesigner.project.keys.access_token;
        }
    });
    new PMAction({
        selector: ".mafe-button-export-bpmn-process",
        tooltip: "Bpmn Diagram".translate(),
        label: {
            text: "Bpmn Diagram".translate()
        },
        execute: false,
        handler: function(){
            //var ws = enviromentVariables('WORKSPACE');
            //location.href = window.parent.location.origin+"/api/1.0/"+ws+"/project/"+PMDesigner.process.id+"/export?access_token="+PMDesigner.process.tokens.access_token;

            //var downloadLink = $('.mafe-button-export-bpmn-process');
            ////downloadLink.click(function (e) {
            //    PMDesigner.moddle.toXML(PMDesigner.businessObject, function(err, xmlStrUpdated) {
            //
            //        //console.log(xmlStrUpdated);
            //        //xml2 = xmlStrUpdated;
            //        setEncoded(downloadLink,PMDesigner.process.projectName + '.bpmn' , xmlStrUpdated);
            //        // xmlStrUpdated contains new id and the added process
            //    });

            //});
        }
    });
    new PMAction({
        selector: ".mafe-button-undo",
        tooltip:"Undo".translate(),
        label: {
            text: "Undo".translate()
        },
        execute: true,
        handler: function(){
            //PMDesigner.canvas.commandStack.undo();
            PMUI.getActiveCanvas().commandStack.undo();
        }
    });
    new PMAction({
        selector: ".mafe-button-redo",
        tooltip: "Redo".translate(),
        label: {
            text: "Redo".translate()
        },
        execute: true,
        handler: function(){
            //PMDesigner.canvas.commandStack.redo();
            PMUI.getActiveCanvas().commandStack.redo();
        }
    });
    PMDesigner.ApplyOptionsZoom();
    new PMAction({
        selector: ".mafe-button-fullscreen",
        tooltip: "Full Screen".translate(),
        execute: true,
        handler: function(){
            PMDesigner.fullScreen.toggle();
        }
    });


    /*-----  End of Designer buttons  ------*/



    /*=============================================
    =            Shapes and Controls Box            =
    =============================================*/
    PMDesigner.cookie = {
        name: "PMDesigner",
        object: {},
        get : function(cname){
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for(var i=0; i<ca.length; i++) {
                var c = ca[i].trim();
                if (c.indexOf(name)==0) return c.substring(name.length,c.length);
            }
            return "";
        },
        remove : function (cname) {
            jQuery.each(PMDesigner.cookie.object, function(index, val) {
                 if (index === cname) {
                    delete PMDesigner.cookie.object[cname];
                    PMDesigner.cookie.refresh();
                 }
            });
        },
        refresh : function () {
            document.cookie = PMDesigner.cookie.name+"="+JSON.stringify(PMDesigner.cookie.object);
        }
    };
    PMDesigner.localStorage = {
        prefix: "PM_"+WORKSPACE+"_"+prj_uid,
        object: {},
        remove : function (cname) {
            var obj;
            obj = localStorage.getItem(PMDesigner.localStorage.prefix);
            obj = (obj === null) ? {} : JSON.parse(obj);
            if (obj[cname]) {
                delete obj[cname];
                localStorage.setItem(PMDesigner.localStorage.prefix, JSON.stringify(obj));
            }
        }
    };
    if (Modernizr.localstorage) {
        var localDesigner = localStorage.getItem(PMDesigner.localStorage.prefix);
        localDesigner = (localDesigner === null) ? {} : JSON.parse(localDesigner); 
        PMDesigner.panelsPosition = localDesigner;
    } else {
        if (PMDesigner.cookie.get(PMDesigner.cookie.name) !== "") {
            var positions, pLeft, pTop, html;
            positions = JSON.parse(PMDesigner.cookie.get(PMDesigner.cookie.name));
            PMDesigner.cookie.object = positions;
            PMDesigner.panelsPosition = positions;
        }
    }
    if(typeof PMDesigner.panelsPosition === "object") {
        var pst = PMDesigner.panelsPosition;
        if (pst.navbar) {
            pLeft = pst.navbar.x;
            pTop = pst.navbar.y;
            html = document.getElementsByClassName("navBar")[0];
            //html.style.left = pLeft+"px";
            //html.style.top = pTop+"px";
            //html.style.left = '0px';
            //html.style.left = '0px';
        }
        if (pst.bpmn) {
            //pLeft = pst.bpmn.x;
            //pTop = pst.bpmn.y;
            pLeft = 0;
            pTop = 0;
            html = document.getElementsByClassName("bpmn_shapes")[0];
            html.style.left = pLeft+"px";
            html.style.top = pTop+"px";
        }
        if (pst.controls) {
            pLeft = pst.controls.x;
            pTop = pst.controls.y;
            html = document.getElementsByClassName("content_controls")[0];
            html.style.left = pLeft+"px";
            html.style.top = pTop+"px";
        }
    }
    
    //jQuery(".navBar").draggable({
    //    handle: "div",
    //    start: function(){
    //    },
    //    drag: function(){
    //    },
    //    stop: function(event){
    //        var pLeft, pTop, currentObj;
    //        pLeft = parseInt(event.target.style.left);
    //        pTop = parseInt(event.target.style.top)
    //        navbar = {
    //            navbar: {
    //                x: pLeft,
    //                y: pTop
    //            }
    //        };
    //        if (Modernizr.localstorage) {
    //            currentObj = localStorage.getItem(PMDesigner.localStorage.prefix);
    //            currentObj = (currentObj === null) ? {} : JSON.parse(currentObj);    
    //            jQuery.extend(true, currentObj,navbar);
    //            localStorage.setItem(PMDesigner.localStorage.prefix, JSON.stringify(currentObj));
    //        } else {
    //            jQuery.extend(true, PMDesigner.cookie.object,navbar);
    //            document.cookie = PMDesigner.cookie.name+"="+JSON.stringify(PMDesigner.cookie.object);    
    //        }
    //    }
    //});
    jQuery(".bpmn_shapes").draggable({
        handle: "div",
        start: function(){
        },
        drag: function(){
        },
        stop: function(event){
            var pLeft, pTop, currentObj;
            pLeft = parseInt(event.target.style.left);
            pTop = parseInt(event.target.style.top);
            bpmn = {
                bpmn: {
                    x: pLeft,
                    y: pTop
                }
            };
            if (Modernizr.localstorage) {
                currentObj = localStorage.getItem(PMDesigner.localStorage.prefix);
                currentObj = (currentObj === null) ? {} : JSON.parse(currentObj);    
                jQuery.extend(true, currentObj,bpmn);
                localStorage.setItem(PMDesigner.localStorage.prefix, JSON.stringify(currentObj));
            } else {
                jQuery.extend(true, PMDesigner.cookie.object,bpmn);
                document.cookie = PMDesigner.cookie.name+"="+JSON.stringify(PMDesigner.cookie.object);   
            }
        }
    });
    jQuery(".content_controls").draggable({
        handle: "div",
        start: function(){
        },
        drag: function(){
        },
        stop: function(event){
            var pLeft, pTop, currentObj;
            pLeft = parseInt(event.target.style.left);
            pTop = parseInt(event.target.style.top);
            controls = {
                controls: {
                    x: pLeft,
                    y: pTop
                }
            };
            if (Modernizr.localstorage) {
                currentObj = localStorage.getItem(PMDesigner.localStorage.prefix);
                currentObj = (currentObj === null) ? {} : JSON.parse(currentObj);    
                jQuery.extend(true, currentObj,controls);
                localStorage.setItem(PMDesigner.localStorage.prefix, JSON.stringify(currentObj));
            } else {
                jQuery.extend(true, PMDesigner.cookie.object,controls);
                document.cookie = PMDesigner.cookie.name+"="+JSON.stringify(PMDesigner.cookie.object);
            }
        }
    });
    /*-----  End of Shapes and Controls Box  ------*/

    //Resize window
    PMDesigner.resizeFrame();
    
    /*==============================================
    =            Autosave functionality            =
    ==============================================*/
    //PMDesigner.process.setSaveInterval(20000);
    //setInterval(function(){
    //    if (PMDesigner.process.isDirty()) {
    //        PMDesigner.process.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
    //        PMDesigner.process.save(false);
    //    }
    //}, PMDesigner.process.saveInterval);
    ///*-----  End of Autosave functionality  ------*/
    //
    ////Reviewing functionalities
    //if (!PMDesigner.supportBrowser("fullscreen")) {
    //    var li = document.getElementsByClassName("mafe-button-fullscreen");
    //
    //    if (li) {
    //        li[0].parentElement.style.display = "none";
    //    }
    //}


    /**
     *  DRAG IMPORT FUNCTIONALITY
     */
    var container = $('#div-layout-canvas');
    // check file api availability
    if (!window.FileList || !window.FileReader) {
        window.alert(
            'Looks like you use an older browser that does not support drag and drop. ' +
            'Try using Chrome, Firefox or the Internet Explorer > 10.');
    } else {
        //registerFileDrop(container, openDiagram);
        registerFileDrop(container, PMDesigner.project.importDiagram);
    }

    function registerFileDrop(container, callback) {

        function handleFileSelect(e) {
            e.stopPropagation();
            e.preventDefault();

            var files = e.dataTransfer.files;

            var file = files[0];

            var reader = new FileReader();

            reader.onload = function(e) {

                var xml = e.target.result;

                //console.log(xml);
                callback(xml);
            };

            reader.readAsText(file);
        }

        function handleDragOver(e) {
            e.stopPropagation();
            e.preventDefault();

            e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
        }

        container.get(0).addEventListener('dragover', handleDragOver, false);
        container.get(0).addEventListener('drop', handleFileSelect, false);
    }


});

window.onload = function () {
    //Reset the scroll positions
    window.scrollBy(-window.scrollX,-window.scrollY);
};
/*==================================================
=            Components from the Panels            =
==================================================*/

PMDesigner.createHTML = function () {
    var minShapes = document.createElement("span"),
    minShapesLegend = document.createElement("span"),
    refreshShapes = document.createElement("span"),
    minControls = document.createElement("span"),
    refreshControls = document.createElement("span"),
    refreshNavBar = document.createElement("span");
    minShapes.id = "minShapes";
    minShapesLegend.id = "minShapesLegend";
    refreshShapes.id = "resetShapes";
    minControls.id = "minControls";
    refreshControls.id = "resetControls";
    refreshNavBar.id = "resetNavBar";
    minShapes.className = "mafe-shapes-toggle";
    minShapesLegend.className = "mafe-shapes-toggle";
    refreshShapes.className = "mafe-shapes-refresh";
    minControls.className = "mafe-shapes-toggle";
    refreshControls.className = "mafe-shapes-refresh";
    refreshNavBar.className = "mafe-shapes-refresh";
    minShapes.title = "minimize".translate();
    minShapesLegend.title = "minimize".translate();
    refreshShapes.title = "reset".translate();
    minControls.title = "minimize".translate();
    refreshControls.title = "reset".translate();
    refreshNavBar.title = "reset".translate();

    jQuery(minShapes).tooltip({tooltipClass: "mafe-action-tooltip" });
    jQuery(minShapesLegend).tooltip({tooltipClass: "mafe-action-tooltip" });
    jQuery(refreshShapes).tooltip({tooltipClass: "mafe-action-tooltip" });
    jQuery(minControls).tooltip({tooltipClass: "mafe-action-tooltip" });
    jQuery(refreshControls).tooltip({tooltipClass: "mafe-action-tooltip" });
    jQuery(refreshNavBar).tooltip({tooltipClass: "mafe-action-tooltip" });


    minShapes.onclick = function () {
        var i,
        items = jQuery(".bpmn_shapes > ul");
        if (items.length > 0) {
            for (i=0; i<items.length; i+=1) {
                if(jQuery(items[i]).css("display").toLowerCase() !== "none"){
                    jQuery(items[i]).css({
                        display: 'none'
                    });
                } else {
                    jQuery(items[i]).css({
                        display: 'block'
                    });
                }

            }
        }
    };
    minShapesLegend.onclick = function () {
        var i;
        var items = jQuery(".bpmn_shapes_legend").children();
        for (i = 1; i < items.length; i++) {
            if (jQuery(items[i]).css("display").toLowerCase() !== "none") {
                jQuery(items[i]).css({
                    display: 'none'
                });
            } else {
                jQuery(items[i]).css({
                    display: 'block'
                });
            }
        }
    };
    refreshShapes.onclick = function() {
        jQuery(".bpmn_shapes").removeAttr('style');
        if (Modernizr.localstorage) {
            PMDesigner.localStorage.remove("bpmn");
        } else {
            PMDesigner.cookie.remove("bpmn");    
        }
    };
    minControls.onclick = function() {
        var i,
        items = jQuery(".content_controls > ul");
        if (items.length > 0) {
            for (i=0; i<items.length; i+=1) {
                if(jQuery(items[i]).css("display").toLowerCase() !== "none"){
                    jQuery(items[i]).css({
                        display: 'none'
                    });
                } else {
                    jQuery(items[i]).css({
                        display: 'block'
                    });
                }
            }
        }
    };
    refreshControls.onclick = function () {
        jQuery(".content_controls").removeAttr('style');
        if (Modernizr.localstorage) {
            PMDesigner.localStorage.remove("controls");
        } else {
            PMDesigner.cookie.remove("controls");
        }
    };
    refreshNavBar.onclick = function () {
        jQuery(".navBar").removeAttr('style');
        if (Modernizr.localstorage) {
            PMDesigner.localStorage.remove("navbar");
        } else {
            PMDesigner.cookie.remove("navbar");
        }
    };
    

    jQuery(".bpmn_shapes>div").append(minShapes);
    jQuery(".bpmn_shapes>div").append(refreshShapes);
    jQuery(".content_controls>div").append(minControls);
    jQuery(".content_controls>div").append(refreshControls);
    jQuery(".navBar>div").append(refreshNavBar);
    jQuery(".bpmn_shapes_legend>div").append(minShapesLegend);
    jQuery(".bpmn_shapes, .content_controls").on("contextmenu", function(e) {
        e.preventDefault();
    });

    PMDesigner.applyCanvasOptions();

};

/*-----  End of Components from the Panels  ------*/

/*=====================================================
=            Get information about browser            =
=====================================================*/
PMDesigner.getBrowser = function () {
    var match,
        ua = navigator.userAgent.toLowerCase();
    if (ua) {
        match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
                    /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
                    /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
                    /(msie) ([\w.]+)/.exec( ua ) ||
                    ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
                    [];

        return {
            browser: match[ 1 ] || "",
            version: match[ 2 ] || "0"
        };
    }
};
/*-----  End of Get information about browser  ------*/

PMDesigner.supportBrowser = function (functionality) {
    var browser, el, module;
    functionality = functionality.toLowerCase();
    switch(functionality) {
        case "fullscreen":
            browser = PMDesigner.getBrowser();
            if ((browser.browser === "msie") && (parseInt(browser.version, 10) <= 10)) {
                try {
                    module = new ActiveXObject("WScript.Shell");
                } catch(e){
                    module = false;
                }
            } else {
                el = document.documentElement;
                module = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullScreen;
                if (!module) {
                    module = false;
                }
            }
            break;
        case "":
            break;
    }
    return module;
};

/*============================================================
=            Leave the current page Functionality            =
============================================================*/
window.onbeforeunload = function (e) {
    var message;
    if(PMDesigner.project.isDirty()) {
        PMDesigner.project.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
        PMDesigner.project.save(false);
        message = "Do you want to leave the designer...".translate(),
        e = e || window.event;
        if (e) {
            e.returnValue = message;
        }
        return message;
    }
};
/*-----  End of Leave the current page Functionality  ------*/

/*=====================================================================
=            Validating coordinates for create a new shape            =
=====================================================================*/
PMUI.validCoordinatedToCreate = function(canvas, event, shape) {
    var position, p, width, height, createElem = true, panels = [], message;
    //navBar panel
    position = jQuery(".navBar").offset();
    width = jQuery(".navBar").width();
    height = jQuery(".navBar").height();
    element = {
        x1: position.left,
        y1: position.top,
        x2: position.left + width,
        y2: position.top + height
    };
    panels.push(element);
    //BPMN panel
    position = jQuery(".bpmn_shapes").offset();
    width = jQuery(".bpmn_shapes").width();
    height = jQuery(".bpmn_shapes").height();
    element = {
        x1: position.left,
        y1: position.top,
        x2: position.left + width,
        y2: position.top + height
    };
    //panels.push(element);
    ////Controls panel
    //position = jQuery(".content_controls").offset();
    //width = jQuery(".content_controls").width();
    //height = jQuery(".content_controls").height();
    //element = {
    //    x1: position.left,
    //    y1: position.top,
    //    x2: position.left + width,
    //    y2: position.top + height
    //};
    //panels.push(element);

    //Review the positions
    if (panels.length > 0) {
        for (p=0; p<panels.length; p+=1) {
            if (((event.pageX >= panels[p].x1) && (event.pageX <= panels[p].x2)) 
            && ((event.pageY >= panels[p].y1) && (event.pageY <= panels[p].y2))) {
                PMDesigner.msgFlash('Is not possible create the element in that area'.translate(), document.body, 'info', 3000, 5);
                return false;
            }
        }
    }
    
    return true;
};
/*-----  End of Validating coordinates for create a new shape  ------*/

PMUI.pageCoordinatesToShapeCoordinates = function (shape, e, xCoord, yCoord, customShape) {
    var coordinates,
        x = (!xCoord) ? e.pageX : xCoord,
        y = (!yCoord) ? e.pageY : yCoord,
        orgX = (!xCoord) ? e.pageX : xCoord,
        orgY = (!yCoord) ? e.pageY : yCoord,
        canvas = shape.getCanvas();
    x += canvas.getLeftScroll() - shape.getAbsoluteX() - canvas.getX();
    y += canvas.getTopScroll() - shape.getAbsoluteY() - canvas.getY();
    if (customShape instanceof PMLine) {
        if (customShape.art_orientation === "vertical") {
            
            y = -parseInt(customShape.height / 3, 10);
        } else if (customShape.art_orientation === "horizontal") {
            x = -parseInt(customShape.width / 3, 10);
        }
    } else {
        if (orgX === x) {
            x -= parseInt(customShape.width*customShape.canvas.zoomFactor / 2, 10);
        } 
        if (orgY === y) {
            y -= parseInt(customShape.height*customShape.canvas.zoomFactor / 2, 10);
        }
    }
    coordinates = new PMUI.util.Point(x, y);
    return coordinates;
};

PMDesigner.msgFlash = function (text, container, severity, duration, zorder) {

        var msg;
        if (!PMDesigner.currentMsgFlash) {
            msg = new PMUI.ui.FlashMessage({
                id: '__msgFlashMessage',
                severity: 'success'
            });
        } else {
            msg = PMDesigner.currentMsgFlash;
        }
        msg.setMessage(text||"");
        msg.setAppendTo(container||document.body);
        msg.setSeverity(severity||"success");
        msg.setDuration(duration||3000);
        msg.setZOrder(zorder||100);
        msg.show();
        PMDesigner.currentMsgFlash = msg;
};

PMDesigner.msgWinError = function (text) {

        var msgError;
        if (!PMDesigner.currentWinError) {
            msgError = new PMUI.ui.MessageWindow({
                id:'showMessageWindowFailure',
                width: 490,
                windowMessageType: 'error',
                title: 'Error'.translate(),
                footerItems : [
                    { 
                        text: 'Ok'.translate(), 
                        height: 40,
                        handler: function() { 
                            msgError.close(); 
                        } 
                    }
                ]
            });
        } else {
            msgError = PMDesigner.currentWinError;
        }
        msgError.setMessage(text||'Error'.translate());
        msgError.showFooter();
        msgError.open();
        PMDesigner.currentWinError = msgError;
};

PMDesigner.msgWinWarning = function (text) {

        var msgWarning;
        if (!PMDesigner.currentWinWarning) {
            msgWarning = new PMUI.ui.MessageWindow({
                id:'showMessageWindowWarning',
                windowMessageType : 'warning',
                width: 490,
                title: 'Warning'.translate(),
                footerItems : [{ text: 'Ok'.translate(), handler: function() { msgWarning.close(); } }]
            });
        } else {
            msgWarning = PMDesigner.currentWinWarning;
        }
        msgWarning.setMessage(text||'Warning'.translate());
        msgWarning.showFooter();
        msgWarning.open();
        PMDesigner.currentWinWarning = msgWarning;
};


PMDesigner.modeReadOnly = function () {
    var restClient = new PMRestClient({
        typeRequest: 'post',
        multipart: true,
        data: {
            calls: [{
                    url: 'cases/' + app_uid + '/tasks',
                    method: 'GET'
                }
            ]
        },
        functionSuccess: function (xhr, response) {
            var viewTaskInformation = new ViewTaskInformation();
            viewTaskInformation.setData(response[0].response);
            viewTaskInformation.setShapes();
        }
    });
    restClient.setBaseEndPoint('');
    restClient.executeRestClient();
};

var DataDictionary = function () {
};
DataDictionary.prototype.getColor = function (value) {
    switch (value) {
        case 'TASK_IN_PROGRESS':
            return 'red';

        case 'TASK_COMPLETED':
            return 'green';

        case 'TASK_PENDING_NOT_EXECUTED':
            return 'silver';

        case 'TASK_PARALLEL':
            return 'orange';

        default:
            return 'white';
    }
};
DataDictionary.prototype.getStatus = function (value) {
    switch (value) {
        case 'TASK_IN_PROGRESS':
            return 'Task in Progress'.translate();

        case 'TASK_COMPLETED':
            return 'Completed Task'.translate();

        case 'TASK_PENDING_NOT_EXECUTED':
            return 'Pending Task / Not Executed'.translate();

        case 'TASK_PARALLEL':
            return 'Parallel Task'.translate();

        default:
            return value;
    }
};
DataDictionary.prototype.getTasAssignType = function (value) {
    switch (value) {
        case 'BALANCED':
            return 'Balanced'.translate();

        case 'MANUAL':
            return 'Manual'.translate();

        case 'REPORT_TO':
            return 'Report toO'.translate();

        case 'EVALUATE':
            return 'Evaluate'.translate();

        case 'SELF_SERVICE':
            return 'self Service'.translate();

        case 'SELF_SERVICE_EVALUATE':
            return 'Self Service Evaluate'.translate();

        default:
            return value;
    }
};
DataDictionary.prototype.getTasType = function (value) {
    switch (value) {
        case 'NORMAL':
            return 'Normal'.translate();
        case 'SUBPROCESS':
            return 'Sub Process'.translate();

        default:
            return value;
    }
};
DataDictionary.prototype.getTasDerivation = function (value) {
    switch (value) {
        case 'NORMAL':
            return 'Normal'.translate();

        default:
            return value;
    }
};

var ViewTaskInformation = function (settings) {
    ViewTaskInformation.prototype.init.call(this, settings);
};
ViewTaskInformation.prototype.init = function () {
    var that = this;
    var panelButton = new PMUI.core.Panel({
        layout: 'hbox',
        items: [
            that.getButton('Information', function () {
                that.showInformation();
            }),
            that.getButton('Delegations', function () {
                that.showDelegations();
            }),
            that.getButton('Route', function () {
                that.showRoute();
            })
        ]
    });
    that.windowAbstract.showFooter();
    that.windowAbstract.addItem(panelButton);
    that.windowAbstract.addItem(that.panelvertical);
};
ViewTaskInformation.prototype.dataDictionary = new DataDictionary();
ViewTaskInformation.prototype.data = null;
ViewTaskInformation.prototype.shapeData = null;
ViewTaskInformation.prototype.panelvertical = new PMUI.core.Panel({layout: 'vbox', width: 400});
ViewTaskInformation.prototype.windowAbstract = new PMUI.ui.Window({id: 'windowAbstract', width: 500, height: 350});
ViewTaskInformation.prototype.setData = function (data) {
    this.data = data;
};
ViewTaskInformation.prototype.setCursor = function (shape) {
    shape.getHTML().onmouseover = function () {
        this.style.cursor = 'pointer';
    };
    shape.getHTML().onmouseout = function () {
        this.style.cursor = '';
    };
};
ViewTaskInformation.prototype.setShapes = function () {
    var that = this;
    var shape;
    var dt = that.data;
    for (var i = 0; i < dt.length; i++) {
        shape = PMDesigner.canvas.getCustomShapes().find('id', dt[i].tas_uid);
        shape.changeColor(that.dataDictionary.getColor(dt[i].status));
        shape.data = dt[i];
        shape.hasClick = function (event) {
            that.setShapeData(this.data);
            that.showInformation();
        };
        that.setCursor(shape);
    }
};
ViewTaskInformation.prototype.setShapeData = function (data) {
    this.shapeData = data;
};
ViewTaskInformation.prototype.addRow = function (label, value) {
    var field1, field2, field3;
    if (label) {
        field1 = new PMUI.ui.TextLabel({text: label.translate(), proportion: 0.3});
        field2 = new PMUI.ui.TextLabel({text: ':', proportion: 0.1});
        field3 = new PMUI.ui.TextLabel({text: value ? value + '' : '', proportion: 0.6});
    } else {
        field1 = new PMUI.ui.TextLabel({text: '.', proportion: 0.3});
        field2 = new PMUI.ui.TextLabel({text: '', proportion: 0.1});
        field3 = new PMUI.ui.TextLabel({text: '', proportion: 0.6});
    }
    var panelhorizontal = new PMUI.core.Panel({
        layout: 'hbox'
    });
    panelhorizontal.addItem(field1);
    panelhorizontal.addItem(field2);
    panelhorizontal.addItem(field3);
    this.panelvertical.addItem(panelhorizontal);
    return panelhorizontal;
};
ViewTaskInformation.prototype.clearRows = function () {
    this.panelvertical.clearItems();
};
ViewTaskInformation.prototype.showInformation = function () {
    var that = this;
    that.clearRows();
    that.addRow('Title', that.shapeData.tas_title);
    that.addRow('Description', that.shapeData.tas_description);
    that.addRow('Status', that.dataDictionary.getStatus(that.shapeData.status));
    that.addRow('Type', that.dataDictionary.getTasType(that.shapeData.tas_type));
    that.addRow('Assign type', that.dataDictionary.getTasAssignType(that.shapeData.tas_assign_type));
    that.addRow('Derivation', that.dataDictionary.getTasDerivation(that.shapeData.tas_derivation));
    that.addRow('Start', that.shapeData.tas_start);
    that.addRow();
    that.addRow('User Name', that.shapeData.usr_username);
    that.addRow('User', that.shapeData.usr_firstname + ' ' + that.shapeData.usr_lastname);

    that.windowAbstract.setTitle('Information'.translate() + ' ' + that.shapeData.tas_title);
    that.windowAbstract.open();
    that.windowAbstract.body.style.padding = '20px';
};
ViewTaskInformation.prototype.showDelegations = function () {
    var that = this, i, dt;
    that.clearRows();
    dt = that.shapeData.delegations;
    for (i = 0; i < dt.length; i++) {
        that.addRow('User', dt[i].usr_username);
        that.addRow('User Name', dt[i].usr_firstname + ' ' + dt[i].usr_lastname);
        that.addRow('Duration', dt[i].del_duration);
        that.addRow('Finish Date', dt[i].del_finish_date);
        that.addRow('Index', dt[i].del_index);
        that.addRow('Init Date', dt[i].del_init_date);
        that.addRow('Task Due Date', dt[i].del_task_due_date);
        that.addRow();
    }

    that.windowAbstract.setTitle('Delegations'.translate() + ' ' + that.shapeData.tas_title);
    that.windowAbstract.open();
    that.windowAbstract.body.style.padding = '20px';
};
ViewTaskInformation.prototype.showRoute = function () {
    var that = this, i, dt;
    that.clearRows();
    that.addRow('Type', that.shapeData.route.type);
    that.addRow();
    dt = that.shapeData.route.to;
    for (i = 0; i < dt.length; i++) {
        that.addRow('Condition', dt[i].rou_condition);
        that.addRow('Number', dt[i].rou_number);
        that.addRow();
    }

    that.windowAbstract.setTitle('Route'.translate() + ' ' + that.shapeData.tas_title);
    that.windowAbstract.open();
    that.windowAbstract.body.style.padding = '20px';
};
ViewTaskInformation.prototype.getButton = function (text, fn) {
    return new PMUI.ui.Button({
        text: text.translate(),
        width: 180,
        height: 50,
        style: {
            cssProperties: {
                marginRight: 10,
                marginBottom: 10,
                backgroundColor: '#474747',
                borderRadius: 5,
                padding: 5
            },
            cssClasses: ['mafeButton']
        },
        handler: fn
    });
};

(function () {
    PMDesigner.getMenuFactory = function (type) {
        var menu = {},
                elementActivite,
                typeMenu = {
            text: "Type".translate(),
            icon: "mafe-menu-properties-action",
            id: "gatewaytype",
            items: [
                {
                    id: "gatewayexclusive",
                    text: "Exclusive (XOR) Gateway".translate(),
                    onClick: function (menuOption) {
                        //PMDesigner.assigmentSupervisors(menuOption.getMenuTargetElement());
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeTypeTo('EXCLUSIVE');
                    }
                },
                {
                    id: "gatewayparallel",
                    text: "Parallel (AND) Gateway".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeTypeTo('PARALLEL');

                    }
                },
                {
                    id: "gatewayinclusive",
                    text: "Inclusive (OR) Gateway".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeTypeTo('INCLUSIVE');
                    }
                },
                {
                    id: "gatewayeventbased",
                    text: "Event-based Gateway".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeTypeTo('EVENTBASED');
                    }
                },
                {
                    id: "gatewaycomplex",
                    text: "Complex Gateway".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeTypeTo('COMPLEX');
                    }
                }
                //{
                //    id: "gatewayexclusiveeventbased",
                //    text: "Exclusive Event-based Gateway".translate(),
                //    onClick: function (menuOption) {
                //        var targetElement = menuOption
                //                .getMenuTargetElement();
                //        targetElement.changeTypeTo('EXCLUSIVEEVENTBASED');
                //    }
                //},
                //{
                //    id: "gatewayparalleleventbased",
                //    text: "Parallel Event-based Gateway".translate(),
                //    onClick: function (menuOption) {
                //        var targetElement = menuOption
                //                .getMenuTargetElement();
                //        targetElement.changeTypeTo('PARALLELEVENTBASED');
                //    }
                //}
            ]
        },
        endMarker = {
            text: "Result".translate(),
            icon: "mafe-menu-properties-action",
            id: "result",
            items: [
                {
                    id: "endempty",
                    text: "Empty".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('EMPTY');
                    }
                },
                {
                    id: "endmessagethrow",
                    text: "Message Marker".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('MESSAGETHROW');
                    }
                },
                {
                    id: "enderrorthrow",
                    text: "Error Marker".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('ERRORTHROW');
                    }
                },
                {
                    id: "endcancelthrow",
                    text: "Cancel Marker".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('CANCELTHROW');

                    }
                },
                {
                    id: "endcompensationthrow",
                    text: "Compensation Marker".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('COMPENSATIONTHROW');
                    }
                },
                {
                    id: "endsignalthrow",
                    text: "Signal Marker".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('SIGNALTHROW');
                    }
                },
                //{
                //    id: "endmultiplethrow",
                //    text: "Multiple Marker".translate(),
                //    onClick: function (menuOption) {
                //        var targetElement = menuOption
                //                .getMenuTargetElement();
                //        targetElement.changeMarkerTo('MULTIPLETHROW');
                //    }
                //},
                {
                    id: "endterminatethrow",
                    text: "Terminate Marker".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('TERMINATETHROW');
                    }
                }
            ]
        },
        intermediateCatchMarker = {
            text: "Trigger".translate(),
            icon: "mafe-menu-properties-action",
            id: "trigger",
            items: [
                {
                    id: "intermediatemessagecatch",
                    text: "Receive Message".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('MESSAGECATCH');
                    }
                },
                {
                    id: "intermediatetimer",
                    text: "Timer".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('TIMER');
                    }
                },
                {
                    id: "intermediateconditional",
                    text: "Conditional".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('CONDITIONAL');
                    }
                },
                {
                    id: "intermediatelinkcatch",
                    text: "Link".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('LINKCATCH');
                    }
                },
                {
                    id: "intermediatesignalcatch",
                    text: "Signal".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('SIGNALCATCH');
                    }
                }
                //{
                //    id: "intermediatemultiplecatch",
                //    text: "Multiple".translate(),
                //    onClick: function (menuOption) {
                //        var targetElement = menuOption
                //                .getMenuTargetElement();
                //        targetElement.changeMarkerTo('MULTIPLECATCH');
                //    }
                //},
                //{
                //    id: "intermediateparallelcatch",
                //    text: "Parallel".translate(),
                //    onClick: function (menuOption) {
                //        var targetElement = menuOption
                //                .getMenuTargetElement();
                //        targetElement.changeMarkerTo('PARALLELCATCH');
                //    }
                //}
            ]
        },
        intermediateThrowMarker = {
            text: "Result".translate(),
            icon: "mafe-menu-properties-action",
            id: "result",
            items: [
                {
                    id: "intermediatemessagethrow",
                    text: "Send Message".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('MESSAGETHROW');
                    }
                },
                {
                    id: "intermediatelinkthrow",
                    text: "Link".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('LINKTHROW');
                    }
                },
                {
                    id: "intermediatecompensationthrow",
                    text: "Compensation".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('COMPENSATIONTHROW');
                    }
                },
                {
                    id: "intermediatesignalthrow",
                    text: "Signal".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('SIGNALTHROW');
                    }
                }
                //{
                //    id: "intermediatemultiplethrow",
                //    text: "Multiple".translate(),
                //    onClick: function (menuOption) {
                //        var targetElement = menuOption
                //                .getMenuTargetElement();
                //        targetElement.changeMarkerTo('MultipleTHROW');
                //    }
                //}
            ]
        },
        startCatchMarker = {
            text: "Trigger".translate(),
            icon: "mafe-menu-properties-action",
            id: "trigger",
            items: [
                {
                    id: "startempty",
                    text: "Empty".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('EMPTY');
                    }
                },
                {
                    id: "startmessagecatch",
                    text: "Receive Message".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('MESSAGECATCH');
                    }
                },
                {
                    id: "starttimer",
                    text: "Timer".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('TIMER');
                    }
                },
                {
                    id: "startconditional",
                    text: "Conditional".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('CONDITIONAL');
                    }
                },
                {
                    id: "startsignalcatch",
                    text: "Signal".translate(),
                    onClick: function (menuOption) {
                        var targetElement = menuOption
                                .getMenuTargetElement();
                        targetElement.changeMarkerTo('SIGNALCATCH');
                    }
                }
                //{
                //    id: "startmultiplecatch",
                //    text: "Multiple".translate(),
                //    onClick: function (menuOption) {
                //        var targetElement = menuOption
                //                .getMenuTargetElement();
                //        targetElement.changeMarkerTo('MULTIPLECATCH');
                //    }
                //},
                //{
                //    id: "startparallelcatch",
                //    text: "Parallel".translate(),
                //    onClick: function (menuOption) {
                //        var targetElement = menuOption
                //                .getMenuTargetElement();
                //        targetElement.changeMarkerTo('PARALLELCATCH');
                //    }
                //}
            ]
        };
        switch (type) {
            case 'CANVAS':
                menu = {
                    id: "menuCanvas",
                    width: 150,
                    items: [
                        {
                            id: "menuEditProcess",
                            text: "Edit Process".translate(),
                            onClick: function (menuOption) {
                                PMDesigner.propertiesProcess();
                            }
                        },
                        {
                            id: "menuProcessPermissions",
                            text: "Process Permissions".translate(),
                            onClick: PMDesigner.processPermissions
                        },
                        {
                            id: "menuProcessSupervisors",
                            text: "Process Supervisors".translate(),
                            items: [
                                {
                                    id: "menuSupervisors",
                                    text: "Supervisors".translate(),
                                    onClick: function (menuOption) {
                                        PMDesigner.assigmentSupervisors(menuOption
                                                .getMenuTargetElement());
                                    }
                                },
                                {
                                    id: "menuSteps",
                                    text: "Steps".translate(),
                                    onClick: function (menuOption) {
                                        PMDesigner.assigmentSupervisorsSteps();
                                    }
                                }
                            ]
                        },
                        {
                            id: "menuCaseTracker",
                            text: "Case Tracker".translate(),
                            items: [
                                {
                                    id: "subMenuProperties",
                                    text: "Properties".translate(),
                                    onClick: function (menuOption) {
                                        PMDesigner.caseTracker.showProperties();
                                    }
                                },
                                {
                                    id: "subMenuObjects",
                                    text: "Objects".translate(),
                                    onClick: function (menuOption) {
                                        PMDesigner.caseTracker.showObjects();
                                    }
                                }
                            ]
                        },
                        {
                            id: "menuFileManager",
                            text: "Process Files Manager".translate(),
                            onClick: function () {
                                PMDesigner.ProcessFilesManager();
                            }

                        },
                        {
                            text: "Events".translate(),
                            items: [
                                {
                                    text: "Intermediate Message".translate(),
                                    onClick: function (menuOption) {
                                        alert("Working on this feature...".translate());
                                    }
                                },
                                {
                                    text: "Intermediate Conditional".translate(),
                                    onClick: function (menuOption) {
                                        alert("Working on this feature...".translate());
                                    }
                                },
                                {
                                    text: "Intermediate Timer".translate(),
                                    onClick: function (menuOption) {
                                        alert("Working on this feature...".translate());
                                    }
                                }
                            ]
                        }
                    ],
                    onShow: function (menu) {
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                    }
                };
                break;
            case 'TASK':
                menu = {
                    id: "menuTask",
                    items: [
                        {
                            id: "menuTaskProperties",
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                PMDesigner.activityProperties(menuOption.getMenuTargetElement());
                            }
                        },
                        {
                            text: "Task Type".translate(),
                            items: [
                                {
                                    text: "Send Task".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchTaskType('SENDTASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    text: "Receive Task".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchTaskType('RECEIVETASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    text: "User Task".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchTaskType('USERTASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    text: "Service Task".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchTaskType('SERVICETASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    text: "Script Task".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchTaskType('SCRIPTTASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    text: "Manual Task".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchTaskType('MANUALTASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    text: "Business Rule".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchTaskType('BUSINESSRULE');
                                        PMDesigner.project.updateElement([]);
                                    }
                                }
                            ]
                        },
                        {
                            id: "menuTaskSteps",
                            text: "Steps".translate(),
                            icon: "mafe-menu-task-steps",
                            onClick: function (menuOption) {
                                PMDesigner.act_name = menuOption.getMenuTargetElement().act_name;
                                PMDesigner.act_uid = menuOption.getMenuTargetElement().act_uid;
                                new StepsTask();
                            }
                        },
                        {
                            id: "menuTaskAssignedRules",
                            text: "Assignment Rules".translate(),
                            icon: "mafe-menu-users-action",
                            onClick: function (menuOption) {
                                PMDesigner.assigmentRules(menuOption.getMenuTargetElement());
                            }
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete Routing Rule".translate(),
                            icon: "mafe-menu-delete-rules-action",
                            onClick: function (menuOption) {
                                PMDesigner.RoutingRuleDeleteAllFlow(menuOption.getMenuTargetElement());
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var targetElement = menu.getTargetElement();
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(targetElement);
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        PMDesigner.project.save();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection
                                    .hidePortsAndHandlers();
                        }

                    }
                };
                break;
            case 'SUB_PROCESS':
                menu = {
                    id: "menuSubProcess",
                    items: [
                        {
                            text: "Open Diagram".translate(),
                            icon: "mafe-menu-delete-rules-action",
                            onClick: function (menuOption) {
                                //PMDesigner.RoutingRuleDeleteAllFlow(menuOption.getMenuTargetElement());
                                PMDesigner.project.subProcessDiagram(menuOption.getMenuTargetElement());
                            }
                        },
                        {
                            id: "menuSubProperties",
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                PMDesigner.propertiesSubProcess(menuOption
                                        .getMenuTargetElement(menuOption.getMenuTargetElement()));
                            }
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas
                                        .hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete Routing Rule".translate(),
                            icon: "mafe-menu-delete-rules-action",
                            onClick: function (menuOption) {
                                PMDesigner.RoutingRuleDeleteAllFlow(menuOption.getMenuTargetElement());
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas()
                                .addToSelection(menu.getTargetElement());
                        PMDesigner.project.save();
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection
                                    .hidePortsAndHandlers();
                        }
                    }
                };
                break;
            case 'START':
                menu = {
                    id: 'menuStart',
                    items: [
                        startCatchMarker,
                        {
                            id: "menuStartMessageView",
                            text: "View Web Entry".translate(),
                            icon: "mafe-menu-start-message-view",
                            visible: false,
                            onClick: function (menuOption) {
                                PMDesigner.startMessage.viewForm();
                            }
                        },
                        {
                            id: "menuStartMessageProperties",
                            text: "Properties".translate(),
                            icon: "mafe-menu-start-message",
                            visible: false,
                            onClick: function (menuOption) {
                                PMDesigner.startMessage.openForm();
                            }
                        },
                        {
                            id: "menuStartTimerProperties",
                            text: "Properties".translate(),
                            icon: "mafe-menu-start-timer",
                            visible: false,
                            onClick: function (menuOption) {
                                PMDesigner.startTimer.openForm();
                            }
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }, {
                            id: 'idReceiveMessage',
                            text: 'Properties Receive Message'.translate(),
                            visible: false,
                            onClick: function (menuOption) {
                                var propertiesReceiveMessage = new PropertiesReceiveMessage(menuOption);
                                propertiesReceiveMessage.open();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var targetElement = menu.getTargetElement();
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(targetElement);
                        PMDesigner.project.save();
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        //if (targetElement.evn_marker == 'MESSAGE') {
                            //targetElement.menu.getItems()[0].setVisible(true);
                            //targetElement.menu.getItems()[1].setVisible(true);
                            //targetElement.menu.getItems()[0].disable();
                            //targetElement.menu.getItems()[1].disable();
                            //var validate = PMDesigner.startMessage.validate(targetElement);
                            //if (validate[0]) {
                            //    if (validate[1]) {
                            //        targetElement.menu.getItems()[0].enable();
                            //    }
                            //    targetElement.menu.getItems()[1].enable();
                            //}
                        //}
                        if (targetElement.evn_marker == 'TIMER') {
                            targetElement.menu.getItems()[3].setVisible(true);
                            targetElement.menu.getItems()[3].disable();
                            if (PMDesigner.startTimer.validate(targetElement)) {
                                targetElement.menu.getItems()[3].enable();
                            }
                        }
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        if (targetElement.evn_marker === 'MESSAGECATCH') {
                            var dt = menu.getItems();
                            for (var i = 0; i < dt.length; i++) {
                                if (dt[i].id === 'idReceiveMessage') {
                                    dt[i].setVisible(true);
                                }
                            }
                        }
                    },
                    onHide: function (menu) {
                        var dt = menu.getItems();
                        for (var i = 0; i < dt.length; i++) {
                            if (dt[i].id === 'idReceiveMessage') {
                                dt[i].setVisible(false);
                            }
                        }
                    }
                };
                break;
            case 'END':
                menu = {
                    id: 'menuEnd',
                    items: [
                        endMarker,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                PMDesigner.canvas.removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                    }
                };
                break;
            case 'SELECTION':
                menu = {
                    id: 'menuSelection',
                    items: [
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action"
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action"
                        }
                    ]
                };
                break;
            case 'EVALUATION':
                menu = {
                    id: 'menuEvaluation',
                    items: [
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                alert("Working on this feature...");
                            }
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                alert("Working on this feature...");
                            }
                        }
                    ]
                };
                break;
            case 'PARALLEL':
                menu = {
                    id: 'menuParallel',
                    items: [
                        //{
                        //    text: 'Turn into divergent'.translate(),
                        //    icon: 'mafe-menu-properties-action',
                        //    id: "divergent",
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        elementActivite.gat_direction = "DIVERGING"
                        //        PMDesigner.project.dirty = true;
                        //    }
                        //},
                        //{
                        //    text: 'Turn into convergent'.translate(),
                        //    icon: 'mafe-menu-properties-action',
                        //    id: "convergent",
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        elementActivite.gat_direction = "CONVERGING"
                        //        PMDesigner.project.dirty = true;
                        //    }
                        //},
                        typeMenu,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    listeners: {
//                    rightClick: function (element, event) {
//                        elementActivite = element;
//                        PMDesigner.canvas.emptyCurrentSelection();
//                        PMDesigner.canvas.addToSelection(element);
//
//                        ////////----///////
//
//                        var itemDivergent = elementActivite.menu.getItems()[0];
//                        var itemConvergent = elementActivite.menu.getItems()[1];
//
//                        if (elementActivite.gat_direction == "DIVERGING") {
//                            if (elementActivite.ports.asArray().length > 2) {
//                                var contDivergent = 0;
//                                for (i = 0; i < elementActivite.ports.asArray().length; i++) {
//                                    if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnActivity") {
//                                        contDivergent++;
//                                    }
//                                }
//                                if (contDivergent > 1) {
//                                    elementActivite.gat_direction = "CONVERGING";
//                                    PMDesigner.project.dirty = true;
//                                } else {
//                                    itemConvergent.disable();
//                                }
//                            }
//                            if (elementActivite.ports.asArray().length == 2) {
//                                var cont = 0;
//                                for (i = 0; i < 2; i++) {
//                                    if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnGateway") {
//                                        cont++;
//                                    }
//                                }
//                                if (cont == 2) {
//                                    itemConvergent.disable();
//                                } else if (cont == 1) {
//                                    itemConvergent.enable();
//                                } else if (cont == 0) {
//                                    elementActivite.gat_direction = "CONVERGING";
//                                    PMDesigner.project.dirty = true;
//                                }
//                            }
//
//                            itemDivergent.setVisible(false);
//                            itemConvergent.setVisible(true);
//                        }
//
//                        if (elementActivite.gat_direction == "CONVERGING") {
//                            if (elementActivite.ports.asArray().length > 2) {
//                                var contConvergent = 0;
//                                for (i = 0; i < elementActivite.ports.asArray().length; i++) {
//                                    if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnGateway") {
//                                        contConvergent++;
//                                    }
//                                }
//                                if (contConvergent > 1) {
//                                    elementActivite.gat_direction = "DIVERGING";
//                                    PMDesigner.project.dirty = true;
//                                } else {
//                                    itemDivergent.disable();
//                                }
//                            }
//                            if (elementActivite.ports.asArray().length == 2) {
//                                var cont = 0;
//                                for (i = 0; i < 2; i++) {
//                                    if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnActivity") {
//                                        cont++;
//                                    }
//                                }
//                                if (cont == 2) {
//                                    itemDivergent.disable();
//                                } else if (cont == 1) {
//                                    itemDivergent.enable();
//                                } else if (cont == 0) {
//                                    elementActivite.gat_direction = "DIVERGING";
//                                    PMDesigner.project.dirty = true;
//                                }
//                            }
//
//                            itemDivergent.setVisible(true);
//                            itemConvergent.setVisible(false);
//                        }
//                    }
                    },
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                    }
                };
                break;
//        case 'PARALLEL_EVALUATION':
//            menu = {
//                id: 'menuParallelEvaluation',
//                items: [
//                    {
//                        text: "Properties".translate(),
//                        icon: "mafe-menu-properties-action",
//                        onClick: function (menuOption) {
//                            alert("Working on this feature...");
//                        }
//                    },
//                    {
//                        text: "Edit Label".translate(),
//                        icon: "mafe-menu-edit-label-action",
//                        onClick: function (menuOption) {
//                            menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
//                            menuOption.getMenuTargetElement().label.getFocus();
//                        }
//                    },
//                    {
//                        text: "Delete".translate(),
//                        icon: "mafe-menu-delete-action",
//                        onClick: function (menuOption) {
//                            alert("Working on this feature...");
//                        }
//                    }
//                ]
//            };
//            break;
//        case 'PARALLEL_JOIN':
//            menu = {
//                id: 'menuParallelJoin',
//                items: [
//                    {
//                        text: "Properties".translate(),
//                        icon: "mafe-menu-properties-action"
//                    },
//                    {
//                        text: "Delete Event".translate(),
//                        icon: "mafe-menu-delete-action"
//                    }
//                ]
//            };
//            break;
            case 'EXCLUSIVE':
            case 'EVENTBASED':
            case 'EXCLUSIVEEVENTBASED':
            case 'PARALLELEVENTBASED':
                menu = {
                    id: 'menuExclusive',
                    items: [
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                PMDesigner.RoutingRule(menuOption.getMenuTargetElement());
                            }
                        },
                        typeMenu,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var targetElement, i;
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                    }
                };
                break;
            case 'INCLUSIVE':
                menu = {
                    id: 'menuInclusive',
                    items: [
                        {
                            text: 'Properties'.translate(),
                            icon: 'mafe-menu-properties-action',
                            onClick: function (menuOption) {
                                PMDesigner.RoutingRule(menuOption.getMenuTargetElement());
                            }
                        },
                        {
                            text: 'Turn Into Divergent'.translate(),
                            icon: 'mafe-menu-properties-action',
                            id: "divergent",
                            visible: false,
                            onClick: function (menuOption) {
                                elementActivite.gat_direction = "DIVERGING";
                                PMDesigner.project.dirty = true;
                            }
                        },
                        {
                            text: 'Turn Into Convergent'.translate(),
                            icon: 'mafe-menu-properties-action',
                            id: "convergent",
                            visible: false,
                            onClick: function (menuOption) {
                                elementActivite.gat_direction = "CONVERGING";
                                PMDesigner.project.dirty = true;
                            }
                        },
                        typeMenu,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
//                    var elementActivite = menu.getTargetElement();
//                    PMDesigner.canvas.emptyCurrentSelection();
//                    PMDesigner.canvas.addToSelection(elementActivite);
//
//                    ////////----///////
//
//                    var itemDivergent = elementActivite.menu.getItems()[1];
//                    var itemConvergent = elementActivite.menu.getItems()[2];
//
//                    if (elementActivite.gat_direction == "DIVERGING") {
//                        elementActivite.menu.getItems()[2].setVisible(true);
//                        if (elementActivite.ports.asArray().length > 2) {
//                            var contDivergent = 0;
//                            for (i = 0; i < elementActivite.ports.asArray().length; i++) {
//                                if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnActivity") {
//                                    contDivergent++;
//                                }
//                            }
//                            if (contDivergent > 1) {
//                                elementActivite.gat_direction = "CONVERGING";
//                                PMDesigner.project.dirty = true;
//                            } else {
//                                itemConvergent.disable();
//                            }
//                        }
//                        if (elementActivite.ports.asArray().length == 2) {
//                            var cont = 0;
//                            for (i = 0; i < 2; i++) {
//                                if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnGateway") {
//                                    cont++;
//                                }
//                            }
//                            if (cont == 2) {
//                                itemConvergent.disable();
//                            } else if (cont == 1) {
//                                itemConvergent.enable();
//                            } else if (cont == 0) {
//                                elementActivite.gat_direction = "CONVERGING";
//                                PMDesigner.project.dirty = true;
//                            }
//                        }
//                        if (elementActivite.ports.asArray().length == 1 && elementActivite.ports.asArray()[0].connection.flo_element_origin_type == "bpmnGateway") {
//                            itemConvergent.enable();
//                        }
//
//                        itemDivergent.setVisible(false);
//                        itemConvergent.setVisible(false);
//                    }
//
//                    if (elementActivite.gat_direction == "CONVERGING") {
//                        elementActivite.menu.getItems()[2].setVisible(false);
//                        if (elementActivite.ports.asArray().length > 2) {
//                            var contConvergent = 0;
//                            for (i = 0; i < elementActivite.ports.asArray().length; i++) {
//                                if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnGateway") {
//                                    contConvergent++;
//                                }
//                            }
//                            if (contConvergent > 1) {
//                                elementActivite.gat_direction = "DIVERGING";
//                                PMDesigner.project.dirty = true;
//                            } else {
//                                itemDivergent.disable();
//                            }
//                        }
//                        if (elementActivite.ports.asArray().length == 2) {
//                            var cont = 0;
//                            for (i = 0; i < 2; i++) {
//                                if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnActivity") {
//                                    cont++;
//                                }
//                            }
//                            if (cont == 2) {
//                                itemDivergent.disable();
//                            } else if (cont == 1) {
//                                itemDivergent.enable();
//                            } else if (cont == 0) {
//                                elementActivite.gat_direction = "DIVERGING";
//                                PMDesigner.project.dirty = true;
//                            }
//                        }
//                        if (elementActivite.ports.asArray().length == 1 && elementActivite.ports.asArray()[0].connection.flo_element_origin_type == "bpmnActivity") {
//                            itemDivergent.enable();
//                        }
//
//                        itemDivergent.setVisible(true);
//                        itemConvergent.setVisible(false);
//                    }
//                    PMDesigner.canvas.hideDragConnectHandlers();
//                    PMDesigner.canvas.hideAllFocusLabels();
//                    if (PMDesigner.canvas.currentConnection) {
//                        PMDesigner.canvas.currentConnection.hidePortsAndHandlers();
//                    }
                    }
                };
                break;
            case 'COMPLEX':
                menu = {
                    id: 'menuComplex',
                    items: [
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                PMDesigner.complexRoutingRule(menuOption.getMenuTargetElement());
                            }
                        },
                        typeMenu,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'VERTICAL_LINE':
            case 'HORIZONTAL_LINE':
                menu = {
                    id: 'menuLine',
                    items: [
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'DATAOBJECT':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        {
                            text: "Data Type".translate(),
                            items: [
                                {
                                    text: "Data Input".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchDataType('DATAINPUT');
                                    }
                                },
                                {
                                    text: "Data Output".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchDataType('DATAOUTPUT');
                                    }
                                }
                            ]
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'DATASTORE':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'TEXT_ANNOTATION':
            case 'V_LABEL':
            case 'H_LABEL':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'INTERMEDIATE':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        intermediateCatchMarker,
                        intermediateThrowMarker,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var targetElement = menu.getTargetElement();

                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();

                        if (targetElement.evn_behavior === 'CATCH') {
                            targetElement.menu.getItems()[0].setVisible(true);
                            targetElement.menu.getItems()[1].setVisible(false);
                        } else {
                            targetElement.menu.getItems()[0].setVisible(false);
                            targetElement.menu.getItems()[1].setVisible(true);
                        }
                    }
                };
                break;
            case 'PARTICIPANT':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
        }
        return menu;
    };
}());

(function () {
    PMDesigner.shapeFactory = function (type, options) {
        var customshape = null,
            menuShape,
            defaultOptions = null,
            canvasName,
            name,
            id,
            classEvent = "start",
            pmCanvas = this.canvas;

        canvasName = new IncrementNameCanvas(pmCanvas);
        name = canvasName.get(type);

        if (typeof options === 'undefined') {
            options = {};
            if (type === 'START_MESSAGE') {
                type = 'START';
                classEvent = "message";
                options.evn_marker = 'MESSAGECATCH';
            }
            if (type === 'START_TIMER') {
                type = 'START';
                classEvent = "timer";
                options.evn_marker = 'TIMER';
            }
            if (type === 'INTERMEDIATE_SENDMESSAGE') {
                type = 'INTERMEDIATE';
                classEvent = "sendmessage";
                options.evn_marker = 'MESSAGETHROW';
                options.evn_behavior = 'THROW';
            }
            if (type === 'INTERMEDIATE_RECEIVEMESSAGE') {
                type = 'INTERMEDIATE';
                classEvent = "receivemessage";
                options.evn_marker = 'MESSAGECATCH';
                options.evn_behavior = 'CATCH';
            }
            switch (type) {
            case 'COMPLEX':
            case 'PARALLEL':
            case 'EXCLUSIVE':
            case 'EVENTBASED':
            case 'EXCLUSIVEEVENTBASED':
            case 'PARALLELEVENTBASED':
            case 'INCLUSIVE':
                options.gat_type = type;
                break;
            }
        }

        switch (type) {
        case 'TASK':
            defaultOptions = {
                canvas: pmCanvas,
                width: 150,
                height: 75,
                act_type: 'TASK',
                act_name: name,
                act_task_type: 'EMPTY',
                minHeight: 30,
                minWidth: 150,
                maxHeight: 50,
                maxWidth: 170,
                labels: [
                    {
                        message: name,
                        width: 0,
                        height: 0,
                        position: {
                            location: 'center',
                            diffX: 0,
                            diffY: 0
                        },
                        attachEvents: false,
                        updateParent: true
                    }
                ],
                //style: {
                //    cssClasses: ['mafe-activity-task']
                //},
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-activity-task'
                            ]
                        }
                    }

                ],
                connectAtMiddlePoints: true,
                //drag: 'customshapedrag',
                //drag: 'nodrag',
                resizeBehavior: 'activityResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection',
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                markers: [
                    {
                        markerType: 'USERTASK',
                        x: 10,
                        y: 10,
                        position: 0,
                        markerZoomClasses: [
                            //"mafe-user-marker-10 ",
                            //"mafe-user-marker-15 ",
                            //"mafe-user-marker-21 ",
                            //"mafe-user-marker-26 ",
                            //"mafe-user-marker-31 "
                        ]
                    }
                ]
            };
            jQuery.extend(true, defaultOptions, options);
            defaultOptions.markers[0]
                .markerZoomClasses = PMDesigner.updateMarkerLayerClasses(defaultOptions);
            customshape = new PMActivity(defaultOptions);
            break;
        case 'SUB_PROCESS':
            defaultOptions = {
                canvas: pmCanvas,
                width: 150,
                height: 75,
                act_type: 'SUB_PROCESS',
                act_name: name,
                minHeight: 30,
                minWidth: 150,
                maxHeight: 50,
                maxWidth: 170,
                labels: [
                    {
                        message: name,
                        position: {
                            location: 'center',
                            diffX: 0,
                            diffY: 0
                        },
                        attachEvents: false
                    }
                ],
                /*style: {
                 cssClasses: ['mafe-activity-subprocess']
                 },*/
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-activity-subprocess'
                            ]
                        }
                    }

                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'activityResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection',
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                markers: [
                    {
                        markerType: 'COLLAPSED',
                        x: 10,
                        y: 10,
                        position: 4,
                        markerZoomClasses: [
                            "mafe-collapsed-marker-10",
                            "mafe-collapsed-marker-15",
                            "mafe-collapsed-marker-21",
                            "mafe-collapsed-marker-26",
                            "mafe-collapsed-marker-31"
                        ]
                    }
                ]
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMActivity(defaultOptions);
            break;
        case 'START':
            defaultOptions = {
                canvas: pmCanvas,
                width: 33,
                height: 33,
                evn_type: 'start',
                evn_name: name,
                evn_marker: 'EMPTY',
                evn_behavior: 'catch',
                evn_message: 'LEAD',
                labels: [
                    {
                        message: name,
                        visible: true,
                        width: 100,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 0
                        }
                    }
                ],
                style: {
                    cssClasses: ['mafe-event-' + classEvent]
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-event-start-empty-16',
                            'mafe-event-start-empty-24',
                            'mafe-event-start-empty-33',
                            'mafe-event-start-empty-41',
                            'mafe-event-start-empty-49'
                        ]
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                }
            };

            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                .zoomSprites = PMDesigner.updateLayerClasses(defaultOptions);
            customshape = new PMEvent(defaultOptions);
            break;
        case 'INTERMEDIATE':
            defaultOptions = {
                canvas: pmCanvas,
                width: 33,
                height: 33,
                evn_type: 'INTERMEDIATE',
                evn_name: name,
                evn_marker: 'EMPTY',
                evn_behavior: 'CATCH',
                labels: [
                    {
                        message: name,
                        visible: true,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 0
                        }
                    }
                ],
                style: {
                    cssClasses: ['mafe-event-intermediate']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-event-intermediate-16',
                            'mafe-event-intermediate-24',
                            'mafe-event-intermediate-33',
                            'mafe-event-intermediate-41',
                            'mafe-event-intermediate-49'
                        ]
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                }
            };

            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                .zoomSprites = PMDesigner.updateLayerClasses(defaultOptions);
            customshape = new PMEvent(defaultOptions);
            break;
        case 'END':
            defaultOptions = {
                canvas: pmCanvas,
                width: 33,
                height: 33,
                evn_type: 'end',
                evn_name: name,
                evn_marker: 'EMPTY',
                evn_behavior: 'throw',
                labels: [
                    {
                        message: name,
                        visible: true,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 0
                        }
                    }
                ],
                style: {
                    cssClasses: ['mafe-event-end']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-event-end-empty-16',
                            'mafe-event-end-empty-24',
                            'mafe-event-end-empty-33',
                            'mafe-event-end-empty-41',
                            'mafe-event-end-empty-49'
                        ]
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                }
            };
            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                .zoomSprites = PMDesigner.updateLayerClasses(defaultOptions);
            customshape = new PMEvent(defaultOptions);
            break;

        case 'COMPLEX':
        case 'PARALLEL':
        case 'EXCLUSIVE':
        case 'EVENTBASED':
        case 'EXCLUSIVEEVENTBASED':
        case 'PARALLELEVENTBASED':
        case 'INCLUSIVE':
            defaultOptions = {
                labels: [
                    {
                        message: name,
                        visible: true,
                        width: 100,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 13
                        }
                    }
                ],
                canvas: pmCanvas,
                width: 41,
                height: 41,
                gat_type: 'EXCLUSIVE',
                gat_name: name,
                //style: {
                //    cssClasses: ['mafe-gateway-exclusive']
                //},
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-gateway-exclusive-20',
                            'mafe-gateway-exclusive-30',
                            'mafe-gateway-exclusive-41',
                            'mafe-gateway-exclusive-51',
                            'mafe-gateway-exclusive-61'
                        ]
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                }
            };
            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                .zoomSprites = PMDesigner.updateGatewayLayerClasses(defaultOptions);
            customshape = new PMGateway(defaultOptions);
            break;
        case 'GROUP':
            defaultOptions = {
                art_name: name,
                art_type: 'GROUP',
                canvas: pmCanvas,
                width: 200,
                height: 100,
                style: {
                    cssClasses: []
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "background-layer",
                        priority: 1,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-artifact-group'
                            ]
                        }
                    }/*,
                     {
                     tooltip: "Remove".translate(),
                     x: 5*pmCanvas.zoomFactor,
                     y: -5*pmCanvas.zoomFactor,
                     zOrder : 2,
                     width: 10,
                     height: 10,
                     layerName : "layer-close",
                     priority: 2,
                     visible: true,
                     resizable:false,
                     style: {
                     cssProperties: {
                     position: "relative"
                     },
                     cssClasses: [
                     'mafe-artifact-annotation-close'
                     ]
                     },
                     listeners: {
                     click: function (e, l, s) {
                     PMDesigner.canvas.emptyCurrentSelection();
                     PMDesigner.canvas.addToSelection(s);
                     PMUI.activeCanvas.removeElements();
                     }
                     }
                     }*/
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'annotationResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    }
                },
                labels: [
                    {
                        message: "",
                        width: 0,
                        height: 0,
                        //orientation: "vertical",
                        //minHeight:30,
                        position: {
                            location: 'top',
                            diffX: 2,
                            diffY: 0
                        },
                        attachEvents: false,
                        updateParent: true,
                        style: {
                            cssClasses: [
                                'mafe-label-annotation'
                            ]
                        }
                    }
                ]
                //drop : 'pmconnection'
//                "drop": {
//                    type: "pmconnection",
//                    selectors: ['.dragConnectHandler']
//                }
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMArtifact(defaultOptions);
            break;
        case 'TEXT_ANNOTATION':
            defaultOptions = {
                art_name: name,
                art_type: 'TEXT_ANNOTATION',
                canvas: pmCanvas,
                width: 100,
                height: 30,
                style: {
                    cssClasses: ['mafe-artifact-annotation']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "background-layer",
                        priority: 1,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-artifact-annotation'
                            ]
                        }
                    }/*,
                     {
                     tooltip: "Remove".translate(),
                     x: 5*pmCanvas.zoomFactor,
                     y: -5*pmCanvas.zoomFactor,
                     zOrder : 2,
                     width: 10,
                     height: 10,
                     layerName : "layer-close",
                     priority: 2,
                     visible: true,
                     resizable:false,
                     style: {
                     cssProperties: {
                     position: "relative"
                     },
                     cssClasses: [
                     'mafe-artifact-annotation-close'
                     ]
                     },
                     listeners: {
                     click: function (e, l, s) {
                     PMDesigner.canvas.emptyCurrentSelection();
                     PMDesigner.canvas.addToSelection(s);
                     PMUI.activeCanvas.removeElements();
                     }
                     }
                     }*/
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'annotationResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    }
                },
                labels: [
                    {
                        message: "",
                        width: 0,
                        height: 0,
                        //orientation: "vertical",
                        //minHeight:30,
                        position: {
                            location: 'center',
                            diffX: 0,
                            diffY: 0
                        },
                        attachEvents: false,
                        updateParent: true,
                        style: {
                            cssClasses: [
                                'mafe-label-annotation'
                            ]
                        }
                    }
                ],
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                }
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMArtifact(defaultOptions);
            break;
        case 'H_LABEL':
            defaultOptions = {
                art_name: name,
                art_type: 'H_LABEL',
                canvas: pmCanvas,
                width: 100,
                height: 30,
                style: {
                    cssClasses: ['mafe-artifact-annotation']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "background-layer",
                        priority: 1,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-artifact-annotation'
                            ]
                        }
                    }/*,
                     {
                     tooltip: "Remove".translate(),
                     x: 5*pmCanvas.zoomFactor,
                     y: -5*pmCanvas.zoomFactor,
                     zOrder : 2,
                     width: 10,
                     height: 10,
                     layerName : "layer-close",
                     priority: 2,
                     visible: true,
                     resizable:false,
                     style: {
                     cssProperties: {
                     position: "relative"
                     },
                     cssClasses: [
                     'mafe-artifact-annotation-close'
                     ]
                     },
                     listeners: {
                     click: function (e, l, s) {
                     PMDesigner.canvas.emptyCurrentSelection();
                     PMDesigner.canvas.addToSelection(s);
                     PMUI.activeCanvas.removeElements();
                     }
                     }
                     }*/
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'annotationResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    }
                },
                labels: [
                    {
                        message: "",
                        width: 0,
                        height: 0,
                        //orientation: "vertical",
                        //minHeight:30,
                        position: {
                            location: 'center',
                            diffX: 0,
                            diffY: 0
                        },
                        attachEvents: false,
                        updateParent: true,
                        style: {
                            cssClasses: [
                                'mafe-label-annotation'
                            ]
                        }
                    }
                ],
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection"
                    //selectors: ['.dragConnectHandler']
                }
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMLabel(defaultOptions);
            break;
        case 'V_LABEL':
            defaultOptions = {
                art_name: name,
                art_type: 'V_LABEL',
                canvas: pmCanvas,
                width: 30,
                height: 150,
                style: {
                    cssClasses: ['mafe-artifact-annotation']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "background-layer",
                        priority: 1,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-artifact-annotation'
                            ]
                        }
                    }/*,
                     {
                     tooltip: "Remove".translate(),
                     x: 5*pmCanvas.zoomFactor,
                     y: -5*pmCanvas.zoomFactor,
                     zOrder : 2,
                     width: 10,
                     height: 10,
                     layerName : "layer-close",
                     priority: 2,
                     visible: true,
                     resizable:false,
                     style: {
                     cssProperties: {
                     position: "relative"
                     },
                     cssClasses: [
                     'mafe-artifact-annotation-close'
                     ]
                     },
                     listeners: {
                     click: function (e, l, s) {
                     PMDesigner.canvas.emptyCurrentSelection();
                     PMDesigner.canvas.addToSelection(s);
                     PMUI.activeCanvas.removeElements();
                     }
                     }
                     }*/
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'annotationResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    }
                },
                labels: [
                    {
                        message: "",
                        width: 0,
                        height: 0,
                        orientation: "vertical",
                        //minHeight:30,
                        position: {
                            location: 'center',
                            diffX: 0,
                            diffY: 40
                        },
                        attachEvents: false,
                        //updateParent : true,
                        style: {
                            cssClasses: [
                                'mafe-label-annotation'
                            ]
                        }
                    }
                ],
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection"
                    //selectors: ['.dragConnectHandler']
                }
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMLabel(defaultOptions);
            break;
        case 'VERTICAL_LINE':
            defaultOptions = {
                art_name: name,
                art_orientation: "vertical",
                art_type: 'VERTICAL_LINE',
                canvas: pmCanvas,
                style: {
                    cssClasses: [
                        'mafe-artifact-vertical',
                        'mafe-layer-line-vertical'
                    ]
                },
                drag: "regulardrag"
                //drop: "nodrop"
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMLine(defaultOptions);
            break;
        case 'HORIZONTAL_LINE':
            defaultOptions = {
                art_name: name,
                art_orientation: "horizontal",
                art_type: 'HORIZONTAL_LINE',
                canvas: pmCanvas,
                style: {
                    cssClasses: [
                        'mafe-artifact-horizontal',
                        'mafe-layer-line-horizontal'
                    ]
                },
                drag: "regulardrag"
                //drop: "nodrop"
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMLine(defaultOptions);
            break;
        case 'DATAOBJECT':
            defaultOptions = {
                labels: [
                    {
                        message: name,
                        visible: true,
                        width: 100,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 0
                        }
                    }
                ],
                canvas: pmCanvas,
                width: 33,
                height: 41,
                dat_type: 'DATAOBJECT',
                dat_name: name,
                //style: {
                //    cssClasses: ['mafe-gateway-exclusive']
                //},
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-dataobject-50',
                            'mafe-dataobject-75',
                            'mafe-dataobject-100',
                            'mafe-dataobject-125',
                            'mafe-dataobject-150'
                        ]
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection',
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                markers: [
                    {
                        markerType: 'USERTASK',
                        x: 10,
                        y: 10,
                        position: 0
                        //markerZoomClasses: [
                        //    "mafe-data-input-marker-10 ",
                        //    "mafe-data-input-marker-15 ",
                        //    "mafe-data-input-marker-21 ",
                        //    "mafe-data-input-marker-26 ",
                        //    "mafe-data-input-marker-31 "
                        //]
                    }
                ]
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMData(defaultOptions);
            break;

        case 'DATASTORE':
            defaultOptions = {
                labels: [
                    {
                        message: name,
                        visible: true,
                        width: 100,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 0
                        }
                    }
                ],
                canvas: pmCanvas,
                width: 41,
                height: 41,
                dat_type: 'DATASTORE',
                dat_name: name,
                //style: {
                //    cssClasses: ['mafe-gateway-exclusive']
                //},
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-datastore-20',
                            'mafe-datastore-30',
                            'mafe-datastore-41',
                            'mafe-datastore-51',
                            'mafe-datastore-61'
                        ]
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                }
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMData(defaultOptions);
            break;
        case 'PARTICIPANT':
            defaultOptions = {
                width: 500,
                height: 130,
                "canvas": this,
                "connectAtMiddlePoints": false,
                //drag: 'bpmndrag',
                topLeft: true,
                connectionType: 'dotted',
                resizeBehavior: "participantResize",
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                "style": {
                    cssClasses: ["mafe-participant"]
                    //                            cssProperties: {
                    ////                                border: "1px solid black",
                    ////                                "-webkit-box-shadow": "0px 0px 4px 0px black",
                    ////                                "box-shadow": "0px 0px 4px 0px black"
                    //                            }

                },
                layers: [
                    {
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssProperties: {
                                //backgroundColor: 'red'
                                //                                width:'1px',
                                //                                height:'auto'
                            }
                        }
                    }
                    //                {
                    //                    layerName: "second-layer",
                    //                    priority: 3,
                    //                    visible: true
                    //                }
                ],
                labels: [
                    {
                        message: name,
                        //x : 10,
                        //y: 10,
                        width: 0,
                        height: 0,
                        orientation: 'vertical',
                        position: {
                            location: 'center-left',
                            diffX: 15,
                            diffY: 0

                        }
                    }
                ],
                name: name

            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMParticipant(defaultOptions);
            break;
        case 'POOL':
            defaultOptions = {
                width: 700,
                height: 200,
                "canvas": pmCanvas,
                "connectAtMiddlePoints": false,
                //drag: 'bpmndrag',
                topLeft: true,
                connectionType: 'dotted',
                resizeBehavior: "poolResize",
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop: {
                //    pmType: 'container',
                //    selectors: ['#START,#END']
                //},

                "drop": {
                    type: "pmcontainer",
                    selectors: [
                        "#TASK",
                        "#SUB_PROCESS",
                        "#START",
                        "#START_MESSAGE",
                        "#START_TIMER",
                        "#END",
                        "#INTERMEDIATE_SENDMESSAGE",
                        "#INTERMEDIATE_RECEIVEMESSAGE",
                        "#EXCLUSIVE",
                        "#PARALLEL",
                        "#INCLUSIVE",
                        "#DATAOBJECT",
                        "#DATASTORE",
                        "#LANE",
                        ".custom_shape",
                        ".port"
                    ]
                },
                container: "pool",
                "style": {
                    cssClasses: ["mafe-pool"]
                    //                            cssProperties: {
                    ////                                border: "1px solid black",
                    ////                                "-webkit-box-shadow": "0px 0px 4px 0px black",
                    ////                                "box-shadow": "0px 0px 4px 0px black"
                    //                            }

                },
                layers: [
                    {
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssProperties: {
                                //backgroundColor: 'red'
                                //                                width:'1px',
                                //                                height:'auto'
                            }
                        }
                    }
                    //                {
                    //                    layerName: "second-layer",
                    //                    priority: 3,
                    //                    visible: true
                    //                }
                ],
                labels: [
                    {
                        message: name,
                        //x : 10,
                        //y: 10,
                        width: 20,
                        height: 10,
                        orientation: 'vertical',
                        position: {
                            location: 'center-left',
                            diffX: 15,
                            diffY: 0

                        }
                        //updateParent: false
                    }
                ],
                name: name

            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMPool(defaultOptions);
            break;
        case 'LANE':
            defaultOptions = {
                width: 500,
                height: 200,
                "canvas": pmCanvas,
                "connectAtMiddlePoints": false,
                //drag: 'bpmndrag',
                topLeft: true,
                connectionType: 'dotted',
                resizeBehavior: "laneResize",
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop: {
                //    pmType: 'container',
                //    selectors: ['#START,#END']
                //},

                "drop": {
                    type: "connectioncontainer",
                    selectors: [
                        "#TASK",
                        "#SUB_PROCESS",
                        "#START",
                        "#START_MESSAGE",
                        "#START_TIMER",
                        "#END",
                        "#INTERMEDIATE_SENDMESSAGE",
                        "#INTERMEDIATE_RECEIVEMESSAGE",
                        "#EXCLUSIVE",
                        "#PARALLEL",
                        "#INCLUSIVE",
                        "#DATAOBJECT",
                        "#DATASTORE"
                    ]
                },
                container: "regular",
                //"style": {
                //    cssClasses: ["mafe-lane"]
                //    //                            cssProperties: {
                //    ////                                border: "1px solid black",
                //    ////                                "-webkit-box-shadow": "0px 0px 4px 0px black",
                //    ////                                "box-shadow": "0px 0px 4px 0px black"
                //    //                            }
                //
                //},
                layers: [
                    {
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssProperties: {
                                //backgroundColor: 'red'
                                //                                width:'1px',
                                //                                height:'auto'
                            }
                        }
                    }
                    //                {
                    //                    layerName: "second-layer",
                    //                    priority: 3,
                    //                    visible: true
                    //                }
                ],
                labels: [
                    {
                        message: name,
                        //x : 10,
                        //y: 10,
                        width: 20,
                        height: 10,
                        orientation: 'vertical',
                        position: {
                            location: 'center-left',
                            diffX: 15,
                            diffY: 0
                        }
                        //updateParent: false
                    }
                ],
                name: name

            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMLane(defaultOptions);
            break;

        }
        if (customshape && !pmCanvas.readOnly) {
            customshape.attachListeners();
            customshape.extendedType = type;
            menuShape = PMDesigner.getMenuFactory(type);
            customshape.getHTML();
            customshape.setContextMenu(menuShape);

        }
        return customshape;
    };
    PMDesigner.updateLayerClasses = function (options) {
        return [
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-16',
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-24',
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-33',
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-41',
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-49'
        ];
    };
    PMDesigner.updateGatewayLayerClasses = function (options) {
        return [
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-20',
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-30',
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-41',
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-51',
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-61'
        ];
    };
    PMDesigner.updateMarkerLayerClasses = function (options) {
        if (options.act_task_type !== 'EMPTY') {
            return [
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-10",
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-15",
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-21",
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-26",
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-31"
            ];
        }

    };
}());
PMDesigner.sidebar = [];

PMDesigner.sidebar.push(
    new ToolbarPanel({
        buttons:[
            {
                selector: 'TASK',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-task'
                ],
                tooltip: "Task".translate()
            },
            {
                selector: 'SUB_PROCESS',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-subprocess'
                ],
                tooltip: "Sub Process".translate()
            }
        ]
    }),
    new ToolbarPanel({
        buttons:[
            {
                selector: 'START',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-start'
                ],
                tooltip: "Start Event".translate()
            },
            {
                selector: 'START_MESSAGE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-start-message'
                ],
                tooltip: "Start message event".translate()
            },
            {
                selector: 'START_TIMER',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-start-timer'
                ],
                tooltip: "Start timer event".translate()
            },
            {
                selector: 'END',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-end'
                ],
                tooltip: "End Event".translate()
            }
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'INTERMEDIATE_SENDMESSAGE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-intermediate-send-mesage'
                ],
                tooltip: "Intermediate Send Message Event".translate()
            },
            {
                selector: 'INTERMEDIATE_RECEIVEMESSAGE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-intermediate-receive-mesage'
                ],
                tooltip: "Intermediate Receive Message Event".translate()
            }
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'EXCLUSIVE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-gateway-exclusive'
                ],
                tooltip: "Exclusive Gateway".translate()
            },
            {
                selector: 'PARALLEL',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-gateway-parallel'
                ],
                tooltip: "Parallel gateway".translate()
            },
            {
                selector: 'INCLUSIVE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-gateway-inclusive'
                ],
                tooltip: "Inclusive Gateway".translate()
            }
            //{
            //    selector: 'COMPLEX',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-complex'
            //    ],
            //    tooltip: "Complex".translate()
            //}
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'DATAOBJECT',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-data-object'
                ],
                tooltip: "Data Object".translate()
            },
            {
                selector: 'DATASTORE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-data-store'
                ],
                tooltip: "Data Store".translate()
            }
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'PARTICIPANT',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-participant'
                ],
                tooltip: " Black Box Pool".translate()
            },
            {
                selector: 'POOL',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-pool'
                ],
                tooltip: "Pool".translate()
            },
            {
                selector: 'LANE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-lane'
                ],
                tooltip: "Lane".translate()
            },
            {
                selector: 'VERTICAL_LINE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-vertical-line'
                ],
                tooltip: "Vertical Line".translate()
            },
            {
                selector: 'HORIZONTAL_LINE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-horizontal-line'
                ],
                tooltip: "Horizontal Line".translate()
            }
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'GROUP',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-group'
                ],
                tooltip: "Group".translate()
            },
            {
                selector: 'TEXT_ANNOTATION',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-annotation'
                ],
                tooltip: "Text Annotation".translate()
            },
            {
                selector: 'H_LABEL',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-horizontal-text'
                ],
                tooltip: "Horizontal Text".translate()
            },
            {
                selector: 'V_LABEL',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-vertical-text'
                ],
                tooltip: "Vertical Text".translate()
            }
            
        ]
    })
);
ListDynaform = function () {
    this.superTitle = 'Dynaforms'.translate();
    this.buttonCreate = null;
    this.onCreate = new Function();
    this.onShowId = new Function();
    this.onEdit = new Function();
    this.onDel = new Function();
    Mafe.Grid.call(this);
    ListDynaform.prototype.init.call(this);
};
ListDynaform.prototype = new Mafe.Grid();
ListDynaform.prototype.init = function () {
    var that = this;
    that.buttonCreate = new PMUI.ui.Button({
        id: 'dynaformButtonNew',
        text: 'Create'.translate(),
        height: '36px',
        width: 100,
        style: {cssClasses: ['mafe-button-create']},
        handler: function (event) {
            that.onCreate(event);
        }
    });
    that.buttonCreate.defineEvents();
    that.setID('idListDynaform');
    that.setColumns([{
            id: 'copyuid',
            title: 'Show ID'.translate(),
            dataType: 'button',
            buttonLabel: 'Show ID'.translate(),
            buttonStyle: {cssClasses: ['mafe-button-show']},
            onButtonClick: function (row, grid) {
                that.onShowId(row, grid);
            }
        }, {
            id: 'dynaformGridPanelTitle',
            title: 'Title'.translate(),
            dataType: 'string',
            width: '460px',
            alignmentCell: 'left',
            sortable: true,
            columnData: 'dyn_title'
        }, {
            id: 'dynaformGridPanelType',
            title: 'Type'.translate(),
            dataType: 'string',
            width: '130px',
            alignmentCell: 'left',
            sortable: true,
            columnData: function (data) {
                switch (data.dyn_type) {
                    case 'xmlform':
                        return 'Normal'.translate();
                    case 'grid':
                        return 'Grid'.translate();
                    case 'responsiveform':
                        return 'HTML5/Responsive';
                }
            }
        }, {
            id: 'dynaformGridPanelEdit',
            title: '',
            dataType: 'button',
            buttonStyle: {cssClasses: ['mafe-button-edit']},
            buttonLabel: function (row, data) {
                return 'Edit'.translate();
            },
            onButtonClick: function (row, grid) {
                that.onEdit(row, grid);
            }
        }, {
            id: 'dynaformGridPanelDelete',
            title: '',
            dataType: 'button',
            buttonStyle: {cssClasses: ['mafe-button-delete']},
            buttonLabel: function (row, data) {
                return 'Delete'.translate();
            },
            onButtonClick: function (row, grid) {
                that.onDel(row, grid);
            }
        }
    ]);
    that.load();
};
ListDynaform.prototype.createHTML = function () {
    Mafe.Grid.prototype.createHTML.call(this);
    this.dom.toolbar.appendChild(this.buttonCreate.getHTML());
    return this.html;
};
ListDynaform.prototype.load = function () {
    var that = this;
    that.clearItems();
    (new PMRestClient({
        endpoint: 'dynaforms',
        typeRequest: 'get',
        functionSuccess: function (xhr, response) {
            that.setDataItems(response);
            that.sort('dyn_title', 'asc');
        },
        messageError: 'There are problems getting the list of dynaforms, please try again.'.translate()
    })).executeRestClient();
};
ListDynaform.prototype.getSuperTitle = function () {
    return this.superTitle;
};

SelectDynaform = function () {
    this.superTitle = 'Create Dynaform'.translate();
    this.onBlank = new Function();
    this.onPmTable = new Function();
    this.onCopyImport = new Function();
    this.blank = null;
    this.pmTable = null;
    this.copyImport = null;
    var defaults = {
        border: false,
        layout: 'hbox'
    };
    PMUI.core.Panel.call(this, defaults);
    SelectDynaform.prototype.init.call(this);
};
SelectDynaform.prototype = new PMUI.core.Panel();
SelectDynaform.prototype.init = function () {
    var that = this;
    this.style.addProperties({'margin-left': '11%', 'margin-top': 140, width: 740, height: 'auto'});
    this.blank = new PMUI.ui.Button({
        text: 'Blank Dynaform'.translate(),
        iconClass: 'pmMafeButtonsIconBlack',
        width: 235,
        height: 115,
        style: {
            cssProperties: {
                'margin': 5,
                'background-color': '#474747',
                'border-radius': '10px',
                'padding': '10px',
                'font-size': '20px',
                'font-weight': 'bold'
            },
            cssClasses: ['mafeButton']
        },
        handler: function () {
            that.onBlank();
        }
    });
    this.pmTable = new PMUI.ui.Button({
        text: 'PM Table Dynaform'.translate(),
        iconClass: 'pmMafeButtonsIconPMTable',
        width: 235,
        height: 115,
        style: {
            cssProperties: {
                'margin': 5,
                'border-radius': '10px',
                'background-color': '#474747',
                'padding': '10px',
                'font-size': '20px',
                'font-weight': 'bold'
            },
            cssClasses: ['mafeButton']
        },
        handler: function () {
            that.onPmTable();
        }
    });
    this.copyImport = new PMUI.ui.Button({
        text: 'Copy/Import Dynaform'.translate(),
        iconClass: 'pmMafeButtonsIconCopy',
        width: 235,
        height: 115,
        style: {
            cssProperties: {
                'margin': 5,
                'border-radius': '10px',
                'background-color': '#474747',
                'padding': '10px',
                'font-size': '20px',
                'font-weight': 'bold'
            },
            cssClasses: ['mafeButton']
        },
        handler: function () {
            that.onCopyImport();
        }
    });
};
SelectDynaform.prototype.createHTML = function () {
    PMUI.core.Panel.prototype.createHTML.call(this);
    this.addItem(this.blank);
    this.addItem(this.pmTable);
    this.addItem(this.copyImport);
    return this.html;
};
SelectDynaform.prototype.getSuperTitle = function () {
    return this.superTitle;
};

BlankDynaform = function () {
    this.superTitle = 'Create Blank Dynaform'.translate();
    this.onSave = new Function();
    this.onSaveOpen = new Function();
    this.onCancel = new Function();
    this.buttons = null;
    Mafe.Form.call(this);
    BlankDynaform.prototype.init.call(this);
};
BlankDynaform.prototype = new Mafe.Form();
BlankDynaform.prototype.init = function () {
    var that = this;
    that.setID('formDynaformInformation');
    that.setTitle('Dynaform Information'.translate());
    that.setItems([{
            id: 'formDynaformInformationTitle',
            pmType: 'text',
            label: 'Title'.translate(),
            value: '',
            maxLength: 255,
            placeholder: 'The Dynaform title'.translate(),
            name: 'dyn_title',
            required: true,
            controlsWidth: 303
        }, {
            id: 'formDynaformInformationType',
            pmType: 'dropdown',
            label: 'Type'.translate(),
            name: 'dyn_type',
            required: true,
            value: 'responsiveform',
            options: [
                {
                    label: 'HTML5/Responsive'.translate(),
                    value: 'responsiveform'
                }
            ],
            controlsWidth: 200
        }, {
            id: 'formDynaformInformationDescription',
            pmType: 'textarea',
            rows: 200,
            name: 'dyn_description',
            width: 200,
            label: 'Description'.translate(),
            style: {cssClasses: ['mafe-textarea-resize']}
        }
    ]);
    that.buttons = [
        new PMUI.ui.Button({
            id: 'windowDynaformInformationSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                that.onSave();
            }
        }),
        new PMUI.ui.Button({
            id: 'windowDynaformInformationSaveOpen',
            text: 'Save & Open'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                that.onSaveOpen();
            }
        }),
        {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {'fontSize': '14px'}}
        },
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.onCancel();
            }
        })
    ];
};
BlankDynaform.prototype.getButtons = function () {
    return this.buttons;
};
BlankDynaform.prototype.getSuperTitle = function () {
    return this.superTitle;
};

PMTableDynaform = function () {
    this.superTitle = 'Create PM Table Dynaform'.translate();
    this.onSave = new Function();
    this.onCancel = new Function();
    this.buttons = null;
    this.pmTables = [];
    Mafe.Form.call(this);
    PMTableDynaform.prototype.init.call(this);
};
PMTableDynaform.prototype = new Mafe.Form();
PMTableDynaform.prototype.init = function () {
    var that = this;
    that.setID('formDynaformPmtable');
    that.setTitle('Dynaform Information'.translate());
    that.setItems([{
            id: 'formDynaformPmtableCreate',
            pmType: 'dropdown',
            label: 'Create from PM Table'.translate(),
            name: 'tab_uid',
            required: true,
            value: '',
            options: [],
            onChange: function (newValue, prevValue) {
                that.loadPMTableKeyFields(newValue);
            },
            controlsWidth: 300
        }, {
            id: 'formDynaformPmtableTitle',
            pmType: 'text',
            label: 'Title'.translate(),
            value: '',
            maxLength: 255,
            placeholder: 'The Dynaform title'.translate(),
            name: 'dyn_title',
            required: true,
            controlsWidth: 300
        }, {
            id: 'formDynaformPmtableDescription',
            pmType: 'textarea',
            rows: 100,
            name: 'dyn_description',
            width: 200,
            label: 'Description'.translate(),
            style: {cssClasses: ['mafe-textarea-resize']}
        }, {
            id: 'panelPMtablesPrimaryKey',
            pmType: 'panel',
            layout: 'vbox',
            fieldset: true,
            height: 'auto',
            legend: 'Define Process variables to use as Primary Keys'.translate(),
            items: []
        }
    ]);
    that.buttons = [
        new PMUI.ui.Button({
            id: 'windowDynaformPmtableSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                that.onSave();
            }
        }),
        {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {'fontSize': '14px'}}
        },
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.onCancel();
            }
        })
    ];
    that.load();
};
PMTableDynaform.prototype.getButtons = function () {
    return this.buttons;
};
PMTableDynaform.prototype.load = function () {
    var that = this;
    (new PMRestClient({
        typeRequest: 'get',
        messageError: ''.translate(),
        functionSuccess: function (xhr, response) {
            that.pmTables = response;
            var field = that.getField('tab_uid');
            field.clearOptions();
            field.addOption({
                value: '',
                label: '- Select a PM Table -'.translate(),
                disabled: true,
                selected: true
            });
            for (var i = 0; i < that.pmTables.length; i++) {
                field.addOption({
                    value: that.pmTables[i].pmt_uid,
                    label: that.pmTables[i].pmt_tab_name
                });
            }
        }
    })).setBaseEndPoint('pmtable').executeRestClient();
};
PMTableDynaform.prototype.loadPMTableKeyFields = function (newValue) {
    var that = this;
    var fields = [];
    for (var i = 0; i < that.pmTables.length; i++) {
        if (that.pmTables[i].pmt_uid === newValue) {
            that.getField('dyn_title').setValue(that.pmTables[i].pmt_tab_name);

            fields = that.pmTables[i].fields;
            for (var j = 0; j < fields.length; j++) {
                if (fields[j].fld_key === '1') {
                    that.getItems()[3].addItem(new CriteriaField({
                        id: 'pmtablePrimaryKey' + j,
                        pmType: 'text',
                        name: fields[j].fld_name,
                        label: fields[j].fld_name,
                        value: '',
                        controlsWidth: 525,
                        required: true
                    }));
                }
            }
        }
    }
    that.getItems()[3].setVisible(true);
};
PMTableDynaform.prototype.reset = function () {
    Mafe.Form.prototype.reset.call(this);
    this.getItems()[3].setVisible(false);
    this.getItems()[3].clearItems();
};
PMTableDynaform.prototype.getSuperTitle = function () {
    return this.superTitle;
};

CopyImportDynaform = function () {
    this.superTitle = 'Copy/Import Dynaform'.translate();
    this.onSave = new Function();
    this.onSaveOpen = new Function();
    this.onCancel = new Function();
    this.buttons = null;
    Mafe.Form.call(this);
    CopyImportDynaform.prototype.init.call(this);
};
CopyImportDynaform.prototype = new Mafe.Form();
CopyImportDynaform.prototype.init = function () {
    var that = this;
    that.setID('formDynaformCopy');
    that.setTitle('Copy/Import Dynaform'.translate());
    that.setItems([
        {
            id: 'formDynaformCopyProcess',
            pmType: 'dropdown',
            label: 'Process'.translate(),
            name: 'prj_uid',
            required: true,
            value: '',
            options: [],
            onChange: function (newValue, prevValue) {
                that.loadDynaforms();
            },
            labelWidth: '25%',
            controlsWidth: 300
        }, {
            id: 'formDynaformCopyShowing',
            pmType: 'dropdown',
            label: 'Showing forms of type'.translate(),
            name: 'dyn_type',
            value: 'xmlform',
            options: [
                {
                    label: 'HTML5/Responsive'.translate(),
                    value: 'xmlform'
                }
            ],
            onChange: function (newValue, prevValue) {
                that.loadDynaforms();
            },
            labelWidth: '25%',
            controlsWidth: 300
        }, {
            id: 'formDynaformCopyDynaform',
            pmType: 'dropdown',
            label: 'Dynaform to copy/import'.translate(),
            name: 'dyn_uid',
            required: true,
            value: '',
            options: [],
            labelWidth: '25%',
            controlsWidth: 300
        }, {
            id: 'formDynaformCopyInsert',
            pmType: 'text',
            label: 'Title of the new dynaform'.translate(),
            value: '',
            maxLength: 255,
            placeholder: 'The Dynaform title'.translate(),
            name: 'dyn_title',
            required: true,
            labelWidth: '25%',
            controlsWidth: 300
        }, {
            id: 'formDynaformCopyDescription',
            pmType: 'textarea',
            rows: 100,
            name: 'dyn_description',
            width: 200,
            label: 'Description of the new dynaform'.translate(),
            labelWidth: '25%',
            style: {cssClasses: ['mafe-textarea-resize']}
        }
    ]);
    that.buttons = [
        new PMUI.ui.Button({
            id: 'windowDynaformCopyImportButton',
            text: 'Copy/Import'.translate(),
            height: 31,
            buttonType: 'success',
            handler: function () {
                that.onSave();
            }
        }),
        new PMUI.ui.Button({
            id: 'windowDynaformCopyImportOpen',
            text: 'Copy/Import and Open'.translate(),
            height: 31,
            buttonType: 'success',
            handler: function () {
                that.onSaveOpen();
            }
        }),
        {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {'fontSize': '14px'}}
        },
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.onCancel();
            }
        })
    ];
    that.loadProcess();
};
CopyImportDynaform.prototype.getButtons = function () {
    return this.buttons;
};
CopyImportDynaform.prototype.loadProcess = function () {
    var that = this;
    (new PMRestClient({
        typeRequest: 'get',
        messageError: ''.translate(),
        functionSuccess: function (xhr, response) {
            var field = that.getField('prj_uid');
            field.clearOptions();
            field.addOption({
                value: '',
                label: '- Select a process -'.translate(),
                disabled: true,
                selected: true
            });
            for (var i = 0; i < response.length; i++) {
                if (response[i].prj_type === 'bpmn') {
                    field.addOption({
                        value: response[i].prj_uid,
                        label: response[i].prj_name
                    });
                }
            }
        }
    })).setBaseEndPoint('projects').executeRestClient();
};
CopyImportDynaform.prototype.loadDynaforms = function () {
    var that = this;
    if (that.getField('prj_uid').getValue() === '') {
        return;
    }
    (new PMRestClient({
        typeRequest: 'get',
        messageError: ''.translate(),
        functionSuccess: function (xhr, response) {
            var field = that.getField('dyn_uid');
            field.clearOptions();
            field.addOption({
                value: '',
                label: '- Select a Dynaform -'.translate(),
                disabled: true,
                selected: true
            });
            for (var i = 0; i < response.length; i++) {
                if (response[i]['dyn_type'] === that.getField('dyn_type').getValue()) {
                    field.addOption({
                        value: response[i].dyn_uid,
                        label: response[i].dyn_title
                    });
                }
            }
        }
    })).setBaseEndPoint('projects/' + that.getField('prj_uid').getValue() + '/dynaforms').executeRestClient();
};
CopyImportDynaform.prototype.reset = function () {
    Mafe.Form.prototype.reset.call(this);
    this.getField('dyn_uid').clearOptions();
};
CopyImportDynaform.prototype.getSuperTitle = function () {
    return this.superTitle;
};

Dynaform = function (settings) {
    this.listDynaform = null;
    this.selectDynaform = null;
    this.blankDynaform = null;
    this.pmTableDynaform = null;
    this.copyImportDynaform = null;
    Mafe.Window.call(this, settings);
    Dynaform.prototype.init.call(this, settings);
};
Dynaform.prototype = new Mafe.Window();
Dynaform.prototype.init = function (settings) {
    var that = this;
    that.listDynaform = new ListDynaform();
    that.listDynaform.onShowId = function (row, grid) {
        showUID(row.getData().dyn_uid);
    };
    that.listDynaform.onCreate = function () {
        that.resetView();
        that.setTitle(that.selectDynaform.getSuperTitle());
        that.selectDynaform.setVisible(true);
    };
    that.listDynaform.onEdit = function (row, grid) {
        that.edit(row, grid);
    };
    that.listDynaform.onDel = function (row, grid) {
        that.del(row, grid);
    };

    that.selectDynaform = new SelectDynaform();
    that.selectDynaform.onBlank = function () {
        that.resetView();
        that.setTitle(that.blankDynaform.getSuperTitle());
        that.blankDynaform.setVisible(true);
        that.setButtons(that.blankDynaform.getButtons());
    };
    that.selectDynaform.onPmTable = function () {
        that.resetView();
        that.setTitle(that.pmTableDynaform.getSuperTitle());
        that.pmTableDynaform.setVisible(true);
        that.setButtons(that.pmTableDynaform.getButtons());
    };
    that.selectDynaform.onCopyImport = function () {
        that.resetView();
        that.setTitle(that.copyImportDynaform.getSuperTitle());
        that.copyImportDynaform.setVisible(true);
        that.setButtons(that.copyImportDynaform.getButtons());
    };

    that.blankDynaform = new BlankDynaform();
    that.blankDynaform.onSave = function () {
        that.saveBlank(false);
    };
    that.blankDynaform.onSaveOpen = function () {
        that.saveBlank(true);
    };
    that.blankDynaform.onCancel = function () {
        that.blankDynaform.loseChanges();
    };
    that.blankDynaform.onYesConfirmCancellation = function () {
        that.resetView();
        that.setTitle(that.listDynaform.getSuperTitle());
        that.listDynaform.setVisible(true);
    };

    that.pmTableDynaform = new PMTableDynaform();
    that.pmTableDynaform.onSave = function () {
        that.savePMTable();
    };
    that.pmTableDynaform.onCancel = function () {
        that.pmTableDynaform.loseChanges();
    };
    that.pmTableDynaform.onYesConfirmCancellation = function () {
        that.resetView();
        that.setTitle(that.listDynaform.getSuperTitle());
        that.listDynaform.setVisible(true);
    };

    that.copyImportDynaform = new CopyImportDynaform();
    that.copyImportDynaform.onSave = function () {
        that.saveCopyImport(false);
    };
    that.copyImportDynaform.onSaveOpen = function () {
        that.saveCopyImport(true);
    };
    that.copyImportDynaform.onCancel = function () {
        that.copyImportDynaform.loseChanges();
    };
    that.copyImportDynaform.onYesConfirmCancellation = function () {
        that.resetView();
        that.setTitle(that.listDynaform.getSuperTitle());
        that.listDynaform.setVisible(true);
    };

    that.addItem(that.listDynaform);
    that.addItem(that.selectDynaform);
    that.addItem(that.blankDynaform);
    that.addItem(that.pmTableDynaform);
    that.addItem(that.copyImportDynaform);

    that.open();
    that.resetView();
    that.setTitle(that.listDynaform.getSuperTitle());
    that.listDynaform.setVisible(true);
};
Dynaform.prototype.saveBlank = function (open) {
    var that = this;
    if (!that.blankDynaform.isValid()) {
        return;
    }
    var data = that.blankDynaform.getData();
    data['dyn_version'] = 2;
    data['dyn_type'] = 'xmlform';
    var restClient = new PMRestClient({
        endpoint: 'dynaform',
        typeRequest: 'post',
        data: data,
        functionSuccess: function (xhr, response) {
            if (open) {
                that.close();
                PMUI.setActiveCanvas(null);
                PMDesigner.dynaformDesigner(response);
            } else {
                that.resetView();
                that.setTitle(that.listDynaform.getSuperTitle());
                that.listDynaform.setVisible(true);
                that.listDynaform.load();
            }
        },
        messageError: 'There are problems creating the dynaform, please try again.'.translate(),
        messageSuccess: 'Dynaform saved successfully'.translate(),
        flashContainer: that.listDynaform
    });
    restClient.executeRestClient();
};
Dynaform.prototype.savePMTable = function () {
    var that = this;
    if (!that.pmTableDynaform.isValid()) {
        return;
    }
    var dt1 = that.pmTableDynaform.getData();
    var fields = that.pmTableDynaform.getItems()[3];
    var items = [];
    for (var i = 0; i < fields.getItems().length; i++) {
        items.push({
            fld_name: fields.getItems()[i].name,
            pro_variable: fields.getItems()[i].value
        });
    }
    var restClient = new PMRestClient({
        endpoint: 'dynaform',
        typeRequest: 'post',
        data: {
            dyn_title: dt1.dyn_title,
            dyn_description: dt1.dyn_description,
            dyn_type: 'xmlform',
            dyn_version: 1,
            pmtable: {
                tab_uid: dt1.tab_uid,
                fields: items
            }
        },
        functionSuccess: function (xhr, response) {
            that.resetView();
            that.setTitle(that.listDynaform.getSuperTitle());
            that.listDynaform.setVisible(true);
            that.listDynaform.load();
        },
        messageError: 'There are problems creating a dynaform from a PM Table, please try again.'.translate(),
        messageSuccess: 'Dynaform saved successfully'.translate(),
        flashContainer: that.listDynaform
    });
    restClient.executeRestClient();
};
Dynaform.prototype.saveCopyImport = function (open) {
    var that = this;
    if (!that.copyImportDynaform.isValid()) {
        return;
    }
    var dt1 = that.copyImportDynaform.getData();
    var restClient = new PMRestClient({
        endpoint: 'dynaform',
        typeRequest: 'post',
        data: {
            dyn_title: dt1.dyn_title,
            dyn_description: dt1.dyn_description,
            dyn_type: dt1.dyn_type,
            dyn_version: 2,
            copy_import: {
                prj_uid: dt1.prj_uid,
                dyn_uid: dt1.dyn_uid
            }
        },
        functionSuccess: function (xhr, response) {
            if (open) {
                that.close();
                PMUI.setActiveCanvas(null);
                PMDesigner.dynaformDesigner(response);
            } else {
                that.resetView();
                that.setTitle(that.listDynaform.getSuperTitle());
                that.listDynaform.setVisible(true);
                that.listDynaform.load();
            }
        },
        messageError: 'There are problems coping the dynaform, please try again.'.translate(),
        messageSuccess: 'Dynaform saved successfully'.translate(),
        flashContainer: that.listDynaform
    });
    restClient.executeRestClient();
};
Dynaform.prototype.edit = function (row, grid) {
    this.close();
    PMUI.setActiveCanvas(null);
    PMDesigner.dynaformDesigner(row.getData());
};
Dynaform.prototype.del = function (row, grid) {
    var that = this;
    var confirmDeletion = new Mafe.ConfirmDeletion();
    confirmDeletion.setMessage('Do you want to delete this DynaForm?'.translate());
    confirmDeletion.onDelete = function () {
        var restClient = new PMRestClient({
            endpoint: 'dynaform/' + row.getData().dyn_uid,
            typeRequest: 'remove',
            functionSuccess: function (xhr, response) {
                that.listDynaform.load();
            },
            messageError: 'There are problems deleting the dynaform, please try again.'.translate(),
            messageSuccess: 'Dynaform deleted successfully'.translate(),
            flashContainer: that.listDynaform
        });
        restClient.executeRestClient();
    };
};

(function () {
    PMDesigner.dynaform = function () {
        var dynaform = new Dynaform();
    };
    PMDesigner.dynaform.create = function () {
        var dynaform = new Dynaform();
        dynaform.resetView();
        dynaform.setTitle(dynaform.selectDynaform.getSuperTitle());
        dynaform.selectDynaform.setVisible(true);
    };
}());

(
    function ()
    {
        var inputDocumentGetRestProxy,
            flagInputDocument,
            openFormInMainWindow;

        PMDesigner.input = function (event)
        {
            //this variable is used to switch between Edit and Create a record
            var inputDocumentOption = "";
            var inputDocumentUid = "";
            var winMainInputDocument;

            var listInputDocs;
            var inputDocumentsGetRestProxy = function (grdpnl)
            {
                var restProxy = new PMRestClient({
                    endpoint : 'input-documents',
                    typeRequest : 'get',
                    functionSuccess : function (xhr, response) {
                    	listInputDocs = response;
                        grdpnl.setDataItems(listInputDocs);
                        grdpnl.sort('inp_doc_title', 'asc');
                    }
                });
                restProxy.executeRestClient();
            };

            inputDocumentGetRestProxy = function (inputDocumentUid)
            {
                var restProxy = new PMRestClient({
                    endpoint : "input-document/" + inputDocumentUid,
                    typeRequest : 'get',
                    functionSuccess : function (xhr, response) {
                        var data = response;
                        inputDocumentOption = "PUT";
                        openFormForEditInMainWindow(data);
                    }
                });
                restProxy.executeRestClient();
            };

            var inputDocumentPostRestProxy = function (data)
            {
                var restProxy = new PMRestClient({
                    endpoint : "input-document",
                    typeRequest : 'post',
                    data : data,
                    functionSuccess : function (xhr, response) {
                        inputDocumentOption = "";
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure : function (xhr, response) {
                        var msgPost = new PMUI.ui.MessageWindow({
                            id : 'msgPost',
                            title: "",
                            message: response.error.message,
                            showCloseButton: true,
                            windowMessageType : 'default',
                            width : 490,
                            bodyHeight : 'auto'
                        });
                        msgPost.open();
                        msgPost.showFooter();
                    },
                    messageSuccess: 'Input Document saved successfully'.translate(),
                    flashContainer: grdpnlInputDocument
                });
                restProxy.executeRestClient();
            };

            var inputDocumentPutRestProxy = function (inputDocumentUid, data)
            {
                var restProxy = new PMRestClient({
                    endpoint : "input-document/" + inputDocumentUid,
                    typeRequest : 'update',
                    data : data,
                    functionSuccess : function (xhr, response) {
                        if (typeof flagInputDocument != 'undefined' && flagInputDocument) {
                            winMainInputDocument.close();
                            flagInputDocument = false;
                            return;
                        }
                        inputDocumentOption = "";
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure : function(xhr, response) {
                        var msgPost = new PMUI.ui.MessageWindow({
                            id :'msgPost',
                            title: "",
                            width : 490,
                            bodyHeight :'auto',
                            windowMessageType :'default',
                            message: response.error.message,
                            showCloseButton: true
                        });
                        msgPost.open();
                        msgPost.showFooter();
                    },
                    messageSuccess: 'Input Document updated successfully'.translate(),
                    flashContainer: grdpnlInputDocument
                });
                restProxy.executeRestClient();
            };

            var inputDocumentDeleteRestProxy = function (inputDocumentUid)
            {
                var restProxy = new PMRestClient({
                    endpoint : "input-document/" + inputDocumentUid,
                    typeRequest : 'remove',
                    functionSuccess : function (xhr, response) {
                        refreshGridPanelInMainWindow();
                    },
                    messageSuccess: 'Input Document deleted successfully'.translate(),
                    flashContainer: grdpnlInputDocument
                });
                restProxy.executeRestClient();
            };

            var refreshGridPanelInMainWindow = function ()
            {
                winMainInputDocument.getItems()[0].setVisible(true);
                winMainInputDocument.getItems()[1].setVisible(false);
                winMainInputDocument.setTitle("Input Documents".translate());
                winMainInputDocument.hideFooter();

                inputDocumentsGetRestProxy(grdpnlInputDocument);
            };

            var openGridPanelInMainWindow = function ()
            {
                winMainInputDocument.getItems()[0].setVisible(true);
                winMainInputDocument.getItems()[1].setVisible(false);
                winMainInputDocument.setTitle("Input Documents".translate());
                winMainInputDocument.hideFooter();
                $(winMainInputDocument.body).removeClass("pmui-background");
            };

            openFormInMainWindow = function ()
            {
                winMainInputDocument.getItems()[0].setVisible(false);
                winMainInputDocument.getItems()[1].setVisible(true);
                $(winMainInputDocument.body).addClass("pmui-background");

                inputDocumentOption = "POST";
                winMainInputDocument.setTitle("Create Input Document".translate());

                txtTags.setValue("INPUT");
                winMainInputDocument.showFooter();
            };

            var openFormForEditInMainWindow = function (inputDocumentData)
            {
                inputDocumentUid = inputDocumentData.inp_doc_uid;

                winMainInputDocument.getItems()[0].setVisible(false);
                winMainInputDocument.getItems()[1].setVisible(true);
                winMainInputDocument.setTitle("Edit Input Document".translate());

                txtTitle.setValue(inputDocumentData.inp_doc_title);
                txtDescription.setValue(inputDocumentData.inp_doc_description);
                cboDocumentType.setValue(inputDocumentData.inp_doc_form_needed);
                cboFormat.setValue(inputDocumentData.inp_doc_original);

                if (inputDocumentData.inp_doc_form_needed != "VIRTUAL") {
                    cboFormat.setVisible(true);
                } else {
                    cboFormat.setVisible(false);
                }

                cboVersioning.setValue(inputDocumentData.inp_doc_versioning + "");
                txtDestinationPath.setValue(inputDocumentData.inp_doc_destination_path);
                txtTags.setValue(inputDocumentData.inp_doc_tags);
                $(winMainInputDocument.body).addClass("pmui-background");
                winMainInputDocument.showFooter();
            };

            var txtTitle = new PMUI.field.TextField({
                id: "txtTitle",
                name: "txtTitle",
                valueType: "string",
                label: "Title".translate(),
                maxLength: 200,
                controlsWidth: 380,
                required: true,
                controlsWidth : 300
            });

            var cboDocumentType = new PMUI.field.DropDownListField({
                id:"cboDocumentType",
                name: "cboDocumentType",
                label: "Document Type".translate(),
                value: "VIRTUAL",
                controlsWidth: 130,
                options: [
                    {
                        value: "VIRTUAL",
                        label: "Digital".translate()
                    },
                    {
                        value: "REAL",
                        label: "Printed".translate()
                    },
                    {
                        value: "VREAL",
                        label: "Digital/Printed".translate()
                    }
                ],
                onChange: function (newValue, prevValue)
                {
                    if (cboDocumentType.getValue() != "VIRTUAL") {
                        cboFormat.setVisible(true);
                    } else {
                        cboFormat.setVisible(false);
                    }
                },
                controlsWidth : 110	
            });

            var cboFormat = new PMUI.field.DropDownListField({
                id: "cboFormat",
                name: "cboFormat",
                label: "Format".translate(),
                value: "ORIGINAL",
                visible: false,
                controlsWidth: 105,
                options: [
                    {
                        value: "ORIGINAL",
                        label: "Original".translate()
                    },
                    {
                        value: "COPYLEGAL",
                        label: "Legal Copy".translate()
                    },
                    {
                        value: "COPY",
                        label: "Copy".translate()
                    }
                ]
            });

            var txtDescription = new PMUI.field.TextAreaField({
                id: "txtDescription",
                name: "txtDescription",
                label: "Description".translate(),
                controlsWidth: 380,
                rows: 100,
                style: {cssClasses: ['mafe-textarea-resize']}
            });

            var cboVersioning = new PMUI.field.DropDownListField({
                id: "cboVersioning",
                name: "cboVersioning",
                label: "Enable Versioning".translate(),
                value: "0",
                controlsWidth: 380,
                options: [
                    {
                        value: "0",
                        label: "NO".translate()
                    },
                    {
                        value: "1",
                        label: "YES".translate()
                    }
                ],
                controlsWidth : 60
            });

            var txtDestinationPath = new CriteriaField({
                id: "txtDestinationPath",
                name: "txtDestinationPath",
                valueType: "string",
                label: "Destination Path".translate(),
                maxLength: 200,
                controlsWidth: 380
            });

            var txtTags = new CriteriaField({
                id: "txtTags",
                name: "txtTags",
                valueType: "string",
                label: "Tags".translate(),
                maxLength: 200,
                value: "INPUT",
                controlsWidth: 380
            });

            var btnSave = new PMUI.ui.Button({
                id: "btnSave",
                text: "Save".translate(),
                handler: function ()
                {
                    if (!frmInputDocument.isValid()) {
                        return;
                    }
                    var data = {
                        inp_doc_title: txtTitle.getValue(),
                        inp_doc_description: txtDescription.getValue(),
                        inp_doc_form_needed: cboDocumentType.getValue(),
                        inp_doc_versioning: parseInt(cboVersioning.getValue()),
                        inp_doc_destination_path: txtDestinationPath.getValue(),
                        inp_doc_tags: txtTags.getValue()
                    };
                    if (cboDocumentType.getValue() != "VIRTUAL") {
                        data["inp_doc_original"] = cboFormat.getValue();
                    }
                    switch (inputDocumentOption) {
                        case "POST":
                            inputDocumentPostRestProxy(data);
                            break;
                        case "PUT":
                            inputDocumentPutRestProxy(inputDocumentUid, data);
                            break;
                    }
                },
                height : 31,
                buttonType : 'success'
            });

            var btnCancel = new PMUI.ui.Button({
                id: "btnCancel",
                text: "Cancel".translate(),
                handler: function ()
                {
                    if (frmInputDocument.isDirty()){
                        var message_window = new PMUI.ui.MessageWindow({
                            id: "cancelMessageTriggers",
                            width :490,
                            title: 'Confirm'.translate(),
                            windowMessageType :'warning',
                            bodyHeight : 'auto',
                            message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                            footerItems : [
                                           {
                                        	   text:'Yes'.translate(),
                                        	   height :40,
                                        	   handler :function() {
                                                   message_window.close();
                                                   if (typeof flagInputDocument != 'undefined' && flagInputDocument) {
                                                       winMainInputDocument.close();
                                                       flagInputDocument = false;
                                                       return;
                                                   } else {
                                                       inputDocumentOption = "";
                                                       openGridPanelInMainWindow();
                                                   }
                                               }
                                           },{
                                        	   pmType : 'label',
                                        	   text :'or'
                                           },{
                                        	   text : 'No'.translate(),
                                        	   handler :  function() {
                                                   message_window.close();
                                               },
                                               buttonType :'link'
                                           }
                                         ]
                        });
                        message_window.open();
                        message_window.showFooter();
                    } else {
                        if (typeof flagInputDocument != 'undefined' && flagInputDocument) {
                            winMainInputDocument.close();
                            flagInputDocument = false;
                            return;
                        } else {
                            inputDocumentOption = "";
                            openGridPanelInMainWindow();
                        }
                    }
                },
                height : 31,
                buttonType : 'link'
            });

            var frmInputDocument = new PMUI.form.Form({
                id: "frmInputDocument",
                width: "auto",
                title: "",
                visibleHeader : false,
                items: [
                    txtTitle,
                    cboDocumentType,
                    cboFormat,
                    txtDescription,
                    cboVersioning,
                    txtDestinationPath,
                    txtTags
                ]
            });


            var btnNew = new PMUI.ui.Button({
                id: "btnNew",
                text: "Create".translate(),
                height:"36px",
                width : 100,
                style : {
                    cssClasses: [
                        'mafe-button-create'
                    ]
                },
                handler: function()
                {
                    openFormInMainWindow();
                    inputDocumentOption = "POST";
                    winMainInputDocument.setTitle("Create Input Document".translate());

                    frmInputDocument.reset();
                    txtTags.setValue("INPUT");
                    winMainInputDocument.showFooter();
                    frmInputDocument.setFocus();
                }
            });

            var grdpnlInputDocument = new PMUI.grid.GridPanel({
                id: "grdpnlInputDocument",
                pageSize: 10,
                width: "96%",
                //height: DEFAULT_WINDOW_HEIGHT - 60,
                style:{
                     cssClasses:["mafe-gridPanel"]                     
                },
                filterPlaceholder: 'Text to Search'.translate(),
                emptyMessage : 'No records found'.translate(),
                nextLabel: 'Next'.translate(),
                previousLabel: 'Previous'.translate(),
                customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                    return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
                },
                columns: [
                    {
                        id: 'grdpnlInputDocumentButtonShow',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Show ID".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-show'
                            ]
                        },
                        //width: "100px",
                        onButtonClick: function (row, grid)
                        {
                            showUID(row.id);
                        }
                    },
                    {
                        columnData: "inp_doc_title",
                        title: "Title".translate(),
                        width: "607px",
                        alignment: "left",
                        sortable: true,
                        alignmentCell : 'left'
                    },
                    {
                        id: 'grdpnlInputDocumentButtonEdit',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Edit".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-edit'
                            ]
                        },
                       // width: "80px",
                        onButtonClick: function (row, grid)
                        {
                            var data = row.getData();
                            inputDocumentGetRestProxy(data.inp_doc_uid);
                            frmInputDocument.setFocus();
                        }
                    },
                    {
                        id: 'grdpnlInputDocumentButtonDelete',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Delete".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-delete'
                            ]
                        },
                        //width: "90px",
                        onButtonClick: function (row, grid)
                        {
                            var data = row.getData();
                            confirmWindow = new PMUI.ui.MessageWindow({
                                id:"inputMessageWindowWarning",
                                windowMessageType : 'error',
                                width :490,
                                bodyHeight :'auto',
                                message: "Do you want to delete this Input Document?".translate(),
                                footerItems: [
                                    {
                                        id: 'confirmWindowButtonYes',
                                        text: "Delete".translate(),
                                        visible: true,
                                        handler: function() {
                                            inputDocumentDeleteRestProxy(data.inp_doc_uid);
                                            confirmWindow.close();
                                        },
                                        height :40
                                    },{
                                    	pmType :'label',
                                    	text :'or'
                                    },
                                    {
                                        id: 'confirmWindowButtonNo',
                                        text: "Cancel".translate(),
                                        visible: true,
                                        handler: function() {
                                            confirmWindow.close();
                                        },
                                        buttonType :'link'
                                    }
                                ]
                                });
                            confirmWindow.open();
                            confirmWindow.dom.titleContainer.style.height="17px";
                            confirmWindow.showFooter();
                        }
                    }
                ],
                dataItems: null
            });

            var winMainInputDocument = new PMUI.ui.Window({
                id: "winMainInputDocument",
                title: "Input Documents".translate(),
                height: DEFAULT_WINDOW_HEIGHT,
                width: DEFAULT_WINDOW_WIDTH,
                buttonsPosition:"center",
                footerItems: [
                    btnSave,
                    {
                		pmType: 'label',
                		text: "or".translate(),
                		style : {
                			cssProperties :{
                				'fontSize': '14px'
                			}
                		}
                      },
                    btnCancel
                ],
                buttonPanelPosition: "top"
            });


            winMainInputDocument.addItem(grdpnlInputDocument);
            winMainInputDocument.addItem(frmInputDocument);
            frmInputDocument.footer.setVisible(false);

            refreshGridPanelInMainWindow();
            if (typeof listInputDocs !== "undefined") {
                winMainInputDocument.open();
                $('#grdpnlInputDocument .pmui-textcontrol').css({'margin-top':'5px', width:'250px'});
                winMainInputDocument.hideFooter();
                grdpnlInputDocument.dom.toolbar.appendChild(btnNew.getHTML());
                btnNew.defineEvents();

                winMainInputDocument.footer.html.style.textAlign = 'right';
                winMainInputDocument.getItems()[0].setVisible(true);
                winMainInputDocument.getItems()[1].setVisible(false);
            }

        };

        PMDesigner.input.showFormEdit = function (uid) {
            flagInputDocument = true;
            inputDocumentGetRestProxy(uid);
        }

        PMDesigner.input.create = function () {
            openFormInMainWindow();
        }
    }()
);
(function () {

    var loadValuesStartTimer, openForm, updateStatus;

    PMDesigner.startTimer = function (element) {

        var startTimer = element,
                restClient,
                loadServerData,
                listUsers,
                dataForm;

        loadValuesStartTimer = function ($flag) {
            listUsers = [];
            dataForm = [];
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'activity/' + startTimer.ports.get(0).connection.flo_element_dest + '/assignee/all',
                            method: 'GET'
                        },
                        {
                            url: 'case-scheduler/' + startTimer.evn_uid,
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    listUsers = response[0].response;
                    dataForm = response[1].response;
                },
                messageError: [null, 'There are problems loading the Start Timer, please try again.'.translate()]
            });
            restClient.executeRestClient();
            if ($flag) {
                return listUsers.length;
            }
            return true;
        };

        var updateCaseScheduler = function (data) {
            restProxy = new PMRestClient({
                endpoint: 'case-scheduler/' + startTimer.evn_uid,
                typeRequest: 'update',
                data: data,
                functionSuccess: function (xhr, response)
                {
                    formCreateCaseScheduler.reset();
                    schedulerListWindow.close();
                },
                messageSuccess: 'Start Timer updated successfully'.translate(),
                messageError: 'There are problems updating the Start Timer, please try again.'.translate(),
                flashContainer: document.body
            });
            restProxy.executeRestClient();
        };

        updateStatus = function () {
            var status = (typeof dataForm.sch_state !== 'undefined') ? ((dataForm.sch_state === 'ACTIVE') ? 'INACTIVE' : 'ACTIVE') : 'INACTIVE';
            dataForm.sch_state = status;
            updateCaseScheduler(dataForm);
        };

        //Items for the form Create and edit Case Scheduler
        var itemsDaly = [
            {
                pmType: 'panel',
                layout: 'hbox',
                items: [
                    {
                        id: 'startDate',
                        pmType: 'datetime',
                        label: 'Start date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: true,
                        dateFormat: 'yy mm dd',
                        dateTime: false,
                        name: 'startDate',
                        valueType: 'date',
                        labelWidth: '26%'
                    },
                    {
                        id: 'endDate',
                        pmType: 'datetime',
                        label: 'End date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: false,
                        dateFormat: 'yy mm dd',
                        dateTime: false,
                        name: 'endDate',
                        valueType: 'date'
                    }
                ]
            },
            {
                id: 'execttime',
                pmType: 'text',
                label: 'Execution time'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                valueType: 'string',
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            }
        ];

        var itemsWeekly = [
            {
                pmType: 'panel',
                layout: 'hbox',
                items: [
                    {
                        id: 'startDate',
                        pmType: 'datetime',
                        label: 'Start date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: true,
                        dateFormat: 'yy mm dd',
                        dateTime: false,
                        name: 'startDate',
                        valueType: 'date',
                        labelWidth: '26%'
                    },
                    {
                        id: 'endDate',
                        pmType: 'datetime',
                        label: 'End date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: false,
                        dateFormat: 'yy mm dd',
                        dateTime: false,
                        name: 'endDate',
                        valueType: 'date'
                    }
                ]
            },
            {
                id: 'execttime',
                pmType: 'text',
                label: 'Execution time'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                valueType: 'string',
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            },
            {
                id: 'daysoftheweek',
                pmType: 'checkbox',
                label: 'Select the day(s) of the week below'.translate(),
                value: '',
                name: 'daysoftheweek',
                required: false,
                controlPositioning: 'horizontal',
                maxDirectionOptions: 3,
                options: [
                    {
                        id: 'monday',
                        label: 'Monday'.translate(),
                        value: '1'
                    },
                    {
                        id: 'tuesday',
                        label: 'Tuesday'.translate(),
                        value: '2'
                    },
                    {
                        id: 'wednesday',
                        label: 'Wednesday'.translate(),
                        value: '3'
                    },
                    {
                        id: 'thursday',
                        label: 'Thursday'.translate(),
                        value: '4'
                    },
                    {
                        id: 'friday',
                        label: 'Friday'.translate(),
                        value: '5'
                    },
                    {
                        id: 'saturday',
                        label: 'Saturday'.translate(),
                        value: '6'
                    },
                    {
                        id: 'sunday',
                        label: 'Sunday'.translate(),
                        value: '7'
                    }
                ]
            }
        ];

        loadOptionsRadio = function (newVal) {
            var paneldaysofMonth = formCreateCaseScheduler.getItems()[1].getItems()[2].getItems()[1];
            paneldaysofMonth.setVisible(true);
            if (newVal === 'dayofmonth') {
                paneldaysofMonth.getItems()[0].setVisible(true);
                paneldaysofMonth.getItems()[1].setVisible(false);
            } else if (newVal === 'day') {
                paneldaysofMonth.getItems()[0].setVisible(false);
                paneldaysofMonth.getItems()[1].setVisible(true);
            }
        };

        var itemsMonthly = [
            {
                pmType: 'panel',
                layout: 'hbox',
                items: [
                    {
                        id: 'startDate',
                        pmType: 'datetime',
                        label: 'Start date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: true,
                        dateFormat: 'yy mm dd',
                        datetime: false,
                        name: 'startDate',
                        valueType: 'date',
                        labelWidth: '26%'
                    },
                    {
                        id: 'endDate',
                        pmType: 'datetime',
                        label: 'End date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: false,
                        dateFormat: 'yy mm dd',
                        datetime: false,
                        name: 'endDate',
                        valueType: 'date'
                    }
                ]
            },
            {
                id: 'execttime',
                pmType: 'text',
                label: 'Execution time'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                valueType: 'string',
                controlsWidth: 580,
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            },
            {
                pmType: 'panel',
                id: 'panelDays',
                layout: 'hbox',
                items: [
                    {
                        id: 'options',
                        pmType: 'radio',
                        label: '',
                        value: '',
                        name: 'options',
                        required: false,
                        controlPositioning: 'vertical',
                        maxDirectionOptions: 4,
                        options: [
                            {
                                id: 'dayMonth',
                                label: 'Day of month'.translate(),
                                value: 'dayofmonth'
                            },
                            {
                                id: 'day',
                                label: 'The day'.translate(),
                                value: 'day'
                            }
                        ],
                        onChange: function (newVal, oldVal) {
                            loadOptionsRadio(newVal);
                        },
                        labelWidth: '46%'
                    },
                    {
                        pmType: 'panel',
                        id: 'paneldaysofMonth',
                        layout: 'vbox',
                        items: [
                            {
                                id: 'dayoftheMonth',
                                pmType: 'text',
                                label: '',
                                value: '',
                                placeholder: 'Day of the month (example: 1)'.translate(),
                                required: false,
                                name: 'dayMonth',
                                valueType: 'string'
                            },
                            {
                                pmType: 'panel',
                                id: 'panelmonth',
                                layout: 'hbox',
                                items: [
                                    {
                                        id: 'first',
                                        pmType: 'dropdown',
                                        label: '',
                                        value: '',
                                        required: false,
                                        name: 'first',
                                        valueType: 'string',
                                        options: [
                                            {
                                                label: 'First'.translate(),
                                                value: '1'
                                            },
                                            {
                                                label: 'Second'.translate(),
                                                value: '2'
                                            },
                                            {
                                                label: 'Third'.translate(),
                                                value: '3'
                                            },
                                            {
                                                label: 'Fourth'.translate(),
                                                value: '4'
                                            },
                                            {
                                                label: 'Last'.translate(),
                                                value: '5'
                                            }
                                        ],
                                        controlsWidth: 100
                                    },
                                    {
                                        id: 'day',
                                        pmType: 'dropdown',
                                        label: '',
                                        value: '',
                                        required: false,
                                        name: 'day',
                                        valueType: 'string',
                                        options: [
                                            {
                                                label: 'Monday'.translate(),
                                                value: '1'
                                            },
                                            {
                                                label: 'Tuesday'.translate(),
                                                value: '2'
                                            },
                                            {
                                                label: 'Wednesday'.translate(),
                                                value: '3'
                                            },
                                            {
                                                label: 'Thursday'.translate(),
                                                value: '4'
                                            },
                                            {
                                                label: 'Friday'.translate(),
                                                value: '5'
                                            },
                                            {
                                                label: 'Saturday'.translate(),
                                                value: '6'
                                            },
                                            {
                                                label: 'Sunday'.translate(),
                                                value: '7'
                                            }
                                        ],
                                        controlsWidth: 100
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                id: 'months',
                pmType: 'checkbox',
                label: 'Of the month(s)'.translate(),
                value: '',
                name: 'months',
                required: false,
                controlPositioning: 'horizontal',
                maxDirectionOptions: 4,
                options: [
                    {
                        id: 'jan',
                        label: 'Jan'.translate(),
                        value: '1'
                    },
                    {
                        id: 'feb',
                        label: 'Feb'.translate(),
                        value: '2'
                    },
                    {
                        id: 'mar',
                        label: 'Mar'.translate(),
                        value: '3'
                    },
                    {
                        id: 'apr',
                        label: 'Apr'.translate(),
                        value: '4'
                    },
                    {
                        id: 'may',
                        label: 'May'.translate(),
                        value: '5'
                    },
                    {
                        id: 'jun',
                        label: 'Jun'.translate(),
                        value: '6'
                    },
                    {
                        id: 'jul',
                        label: 'Jul'.translate(),
                        value: '7'
                    },
                    {
                        id: 'aug',
                        label: 'Aug'.translate(),
                        value: '8'
                    },
                    {
                        id: 'sep',
                        label: 'Sep'.translate(),
                        value: '9'
                    },
                    {
                        id: 'oct',
                        label: 'Oct'.translate(),
                        value: '10'
                    },
                    {
                        id: 'nov',
                        label: 'Nov'.translate(),
                        value: '11'
                    },
                    {
                        id: 'dec',
                        label: 'Dec'.translate(),
                        value: '12'
                    }
                ]
            }
        ];

        var itemsOneTime = [{
                id: 'execttime',
                pmType: 'text',
                label: 'Execution time'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                valueType: 'string',
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            }];

        var itemsEvery = [{
                id: 'execttime',
                pmType: 'text',
                label: 'Execute every Hour(s)'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                valueType: 'string',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            }];

        showProperties = function (newValue) {
            switch (newValue) {
                case 'daily':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsDaly);
                    break;
                case 'weekly':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsWeekly);
                    break;
                case 'monthly':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsMonthly);
                    var paneldaysofMonth = formCreateCaseScheduler.getItems()[1].getItems()[2].getItems()[1];
                    paneldaysofMonth.setVisible(false);
                    formCreateCaseScheduler.getItems()[1].getItems()[2].getItems()[0].hideColon();
                    paneldaysofMonth.getItems()[0].hideColon();
                    paneldaysofMonth.getItems()[1].getItems()[0].hideColon();
                    paneldaysofMonth.getItems()[1].getItems()[1].hideColon();
                    break;
                case 'oneTime':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsOneTime);
                    break;
                case 'every':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsEvery);
                    validateKeysField(formCreateCaseScheduler.getField('execttime').getControls()[0].getHTML(), ['isnumber', 'iscolon']);
                    break;
            }
        };

        //Form to Edit and create the Case Scheduler
        var formCreateCaseScheduler = new PMUI.form.Form({
            id: 'formCreateCaseScheduler',
            border: false,
            visibleHeader: false,
            width: '925px',
            name: 'formcreate',
            title: '',
            items: [
                {
                    id: 'panelProperties',
                    pmType: 'panel',
                    layout: 'vbox',
                    fieldset: true,
                    height: '350px',
                    legend: 'Properties'.translate(),
                    items: [
                        {
                            id: 'state',
                            pmType: 'dropdown',
                            label: 'Status'.translate(),
                            name: 'state',
                            required: true,
                            value: '',
                            controlsWidth: 150,
                            options: [
                                {
                                    value: 'ACTIVE',
                                    label: 'Active'.translate()
                                },
                                {
                                    value: 'INACTIVE',
                                    label: 'Inactive'.translate()
                                }
                            ]
                        },
                        {
                            id: 'username',
                            pmType: 'dropdown',
                            label: 'User'.translate(),
                            name: 'username',
                            required: true,
                            controlsWidth: 300,
                            value: '',
                            options: [],
                            onChange: function (newValue, prevValue) {
                            }
                        },
                        {
                            id: 'name',
                            pmType: 'text',
                            label: 'Name'.translate(),
                            value: startTimer.evn_name,
                            required: true,
                            name: 'name',
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: 'performTask',
                            pmType: 'dropdown',
                            label: 'Perform this task'.translate(),
                            name: 'performTask',
                            required: true,
                            value: '',
                            controlsWidth: 300,
                            options: [
                                {
                                    label: '- Select -'.translate(),
                                    value: '',
                                    disabled: true,
                                    selected: true
                                },
                                {
                                    value: 'daily',
                                    label: 'Daily'.translate()
                                },
                                {
                                    value: 'weekly',
                                    label: 'Weekly'.translate()
                                },
                                {
                                    value: 'monthly',
                                    label: 'Monthly'.translate()
                                },
                                {
                                    value: 'oneTime',
                                    label: 'One Time Only'.translate()
                                },
                                {
                                    value: 'every',
                                    label: 'Every'.translate()
                                }
                            ],
                            onChange: function (newValue, prevValue) {
                                showProperties(newValue);
                            }
                        }
                    ]
                },
                {
                    id: 'panelSelectDate',
                    pmType: 'panel',
                    layout: 'vbox',
                    fieldset: true,
                    visible: false,
                    height: '350px',
                    legend: 'Select the date and time for case(s) to be initiated.'.translate(),
                    items: []
                }
            ]
        });

        var buttonCancel = new PMUI.ui.Button({
            id: 'cancelSchedulerButton',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            handler: function (event) {
                if (formCreateCaseScheduler.isDirty()) {
                    var message_window = new PMUI.ui.MessageWindow({
                        windowMessageType: 'warning',
                        width: 490,
                        bodyHeight: 'auto',
                        id: 'cancelMessageStartTimer',
                        title: 'Confirm'.translate(),
                        message: 'Do you want to cancel this action? Your changes will be lost if you cancel it.'.translate(),
                        footerItems: [
                            {
                                text: 'Yes'.translate(),
                                height: 40,
                                handler: function () {
                                    message_window.close();
                                    schedulerListWindow.close();
                                }
                            }, {
                                pmType: 'label',
                                text: 'or'
                            }, {
                                text: 'No'.translate(),
                                handler: function () {
                                    message_window.close();
                                },
                                buttonType: 'link'
                            }
                        ]
                    });
                    message_window.open();
                    message_window.showFooter();
                } else {
                    formCreateCaseScheduler.reset();
                    schedulerListWindow.close();
                }
            }
        });

        //Window Buttons
        var buttonSave = new PMUI.ui.Button({
            id: 'saveSchedulerButton',
            text: 'Save'.translate(),
            height: 31,
            buttonType: 'success',
            handler: function (event) {
                if (formCreateCaseScheduler.isValid()) {
                    var dataFormCreate = formCreateCaseScheduler.getData();

                    var dataToSend = {
                        sch_del_user_name: dataFormCreate.username,
                        sch_name: startTimer.evn_name,
                        tas_uid: startTimer.ports.get(0).connection.flo_element_dest,
                        sch_start_time: '',
                        sch_start_date: '',
                        sch_week_days: '',
                        sch_start_day: '',
                        sch_start_day_opt_1: '',
                        sch_start_day_opt_2: '',
                        sch_months: '',
                        sch_end_date: '',
                        sch_repeat_every: '',
                        sch_state: (dataFormCreate.state !== '') ? dataFormCreate.state : 'ACTIVE',
                        sch_option: ''
                    };

                    var perform = dataFormCreate.performTask;
                    switch (perform) {
                        case 'daily':
                            dataToSend.sch_option = '1';
                            dataToSend.sch_start_time = dataFormCreate.execttime;
                            dataToSend.sch_start_date = dataFormCreate.startDate;
                            dataToSend.sch_end_date = dataFormCreate.endDate;
                            break;
                        case 'weekly':
                            var formdays = eval(dataFormCreate.daysoftheweek);
                            var days = '';
                            for (i = 0; i < formdays.length; i++) {
                                if (i !== (formdays.length - 1)) {
                                    days += formdays[i] + '|';
                                } else {
                                    days += formdays[i];
                                }
                            }

                            dataToSend.sch_option = '2';
                            dataToSend.sch_start_time = dataFormCreate.execttime;
                            dataToSend.sch_start_date = dataFormCreate.startDate;
                            dataToSend.sch_end_date = dataFormCreate.endDate;
                            dataToSend.sch_week_days = days;
                            break;
                        case 'monthly':
                            dataToSend.sch_option = '3';
                            dataToSend.sch_start_time = dataFormCreate.execttime;
                            dataToSend.sch_start_date = dataFormCreate.startDate;
                            dataToSend.sch_end_date = dataFormCreate.endDate;
                            if (dataFormCreate.options === 'dayofmonth') {
                                var formmonths = eval(dataFormCreate.months);
                                var months = '';
                                for (i = 0; i < formmonths.length; i++) {
                                    if (i !== (formmonths.length - 1)) {
                                        months += formmonths[i] + '|';
                                    } else {
                                        months += formmonths[i];
                                    }
                                }
                                dataToSend.sch_start_day = '1'; //Day of month
                                dataToSend.sch_start_day_opt_1 = dataFormCreate.dayMonth;//1 to 31 - day of the month
                            } else if (dataFormCreate.options === 'day') {
                                var opt2 = dataFormCreate.first + '|' + dataFormCreate.day;
                                var formmonths = eval(dataFormCreate.months);
                                var months = '';
                                for (i = 0; i < formmonths.length; i++) {
                                    if (i !== (formmonths.length - 1)) {
                                        months += formmonths[i] + '|';
                                    } else {
                                        months += formmonths[i];
                                    }
                                }
                                dataToSend.sch_start_day = '2'; //Day of month
                                dataToSend.sch_start_day_opt_2 = opt2;//1 to 31 - day of the month

                            }
                            dataToSend.sch_months = months;
                            break;
                        case 'oneTime':
                            dataToSend.sch_option = '4';
                            dataToSend.sch_start_time = dataFormCreate.execttime;
                            break;
                        case 'every':
                            dataToSend.sch_option = '5';
                            dataToSend.sch_repeat_every = timeToDecimal(dataFormCreate.execttime).toFixed(2);
                            break;
                    }
                    updateCaseScheduler(dataToSend);
                }
            }
        });

        //load users
        loadUsers = function () {
            var field = formCreateCaseScheduler.getField('username');
            field.clearOptions();
            for (var i = 0; i < listUsers.length; i++) {
                field.addOption({
                    value: listUsers[i].aas_username,
                    label: listUsers[i].aas_name + ' ' + listUsers[i].aas_lastname
                });
            }
        };

        loadDataForm = function () {
            loadTime = function (dataEdit, dataForm) {
                var starDate;
                var endDate;
                starDate = dataForm.sch_start_date ? dataForm.sch_start_date.split(' ') : [''];
                endDate = dataForm.sch_end_date ? dataForm.sch_end_date.split(' ') : [''];

                var startTime = dataForm.sch_start_time.split(' ');
                startTime = startTime[1].split(':');
                var finallyST = startTime[0] + ':' + startTime[1];
                dataEdit[4].setValue(starDate[0]);
                dataEdit[5].setValue(endDate[0]);
                dataEdit[6].setValue(finallyST);
            };
            var dataEdit = formCreateCaseScheduler.getFields();

            dataEdit[0].setValue(dataForm.sch_state);
            dataEdit[1].setValue(dataForm.sch_del_user_name);
            var option = 'daily';
            switch (dataForm.sch_option) {
                case '1':
                    option = 'daily';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    loadTime(dataEdit, dataForm);
                    break;
                case '2':
                    option = 'weekly';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    loadTime(dataEdit, dataForm);

                    var daysVal = "[\"";
                    var days = dataForm.sch_week_days.split('|');
                    for (i = 0; i < days.length; i++) {
                        if (i !== (days.length - 1)) {
                            daysVal += days[i] + "\",\"";
                        } else {
                            daysVal += days[i] + "\"]";
                        }
                    }
                    dataEdit[7].setValue(daysVal);
                    break;
                case '3':
                    option = 'monthly';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    loadTime(dataEdit, dataForm);
                    var days = [];
                    if (dataForm.sch_start_day !== '') {
                        days = dataForm.sch_start_day.split('|');
                    }

                    if (days[0] === '1') {
                        dataEdit[7].setValue('dayofmonth');
                        loadOptionsRadio('dayofmonth');
                        dataEdit[8].setValue(days[1]);
                    } else if (days[0] === '2') {
                        dataEdit[7].setValue('day');
                        loadOptionsRadio('day');
                        dataEdit[9].setValue(days[1]);
                        dataEdit[10].setValue(days[2]);
                    }
                    var monthsVal = "[\"";
                    var monthsop = dataForm.sch_months.split('|');
                    for (i = 0; i < monthsop.length; i++) {
                        if (i !== (monthsop.length - 1)) {
                            monthsVal += monthsop[i] + "\",\"";
                        } else {
                            monthsVal += monthsop[i] + "\"]";
                        }
                    }
                    dataEdit[11].setValue(monthsVal);
                    break;
                case '4':
                    option = 'oneTime';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    var startTime = dataForm.sch_start_time.split(' ');
                    startTime = startTime[1].split(':');
                    var finallyST = startTime[0] + ':' + startTime[1];
                    dataEdit[4].setValue(finallyST);
                    break;
                case '5':
                    option = 'every';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    dataEdit[4].setValue(decimalToTime(parseFloat(dataForm.sch_repeat_every)));
                    break;
            }
        };

        //Main window Case Scheduler
        var schedulerListWindow = new PMUI.ui.Window({
            id: 'schedulerListWindow',
            title: 'Start Timer Event'.translate(),
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            buttonPanelPosition: 'top',
            buttons: [
                buttonSave,
                {pmType: 'label', text: 'or'},
                buttonCancel
            ]
        });

        openForm = function () {
            schedulerListWindow.addItem(formCreateCaseScheduler);
            schedulerListWindow.open();
            loadUsers();
            loadDataForm();
            applyStyleWindowForm(schedulerListWindow);
            schedulerListWindow.showFooter();
            schedulerListWindow.defineEvents();
        };
    };

    PMDesigner.startTimer.openForm = function (element) {
        openForm();
    };

    PMDesigner.startTimer.validate = function (element) {
        if (element.ports.isEmpty()) {
            PMDesigner.msgFlash('Must connect to a Task'.translate(), document.body, 'error', 3000, 5);
            return false;
        }
        PMDesigner.startTimer(element);
        if (loadValuesStartTimer(true) === 0) {
            PMDesigner.msgFlash('The task doesn\'t have assigned users'.translate(), document.body, 'info', 3000, 5);
            return false;
        }
        return true;
    };

}());
(
    function ()
    {

        var dataBaseConnectionOption,
            winFrmDataBaseConnectionShow;

        PMDesigner.database = function (event)
        {
            var winGrdpnlDataBaseConnection,
            panelTest,
            grdpnlDataBaseConnection,
            flagError,
            titleOld,
            dataBaseConnectionOption,
            btnNew,
            btnTestConnection,
            btnCreate,
            btnCancel,
            dataBaseConnectionData;

            disableAllItems = function ()
            {
                winGrdpnlDataBaseConnection.getItems()[0].setVisible(false);
                winGrdpnlDataBaseConnection.getItems()[1].setVisible(false);
                winGrdpnlDataBaseConnection.getItems()[2].setVisible(false);

                txtUID.setVisible(false);
                btnTestConnection.setVisible(false);
                btnBack.setVisible(false);
                btnCreate.setVisible(false);
                btnCancel.setVisible(false);
                winGrdpnlDataBaseConnection.hideFooter();
            }

            var testShow = function (testData)
            {
                var msg = "";
                flagError = 0;
                disableAllItems();
                winGrdpnlDataBaseConnection.showFooter();
                titleOld = winGrdpnlDataBaseConnection.getTitle();
                winGrdpnlDataBaseConnection.setTitle("Testing Server Connection".translate());
                winGrdpnlDataBaseConnection.getItems()[2].setVisible(true);

                for (var i = 0; i <= testData.length - 1; i++) {
                    var flag = (typeof(testData[i].error) != "undefined")? 1 : 0;

                    if (flag != 1) {
                        msg =  msg + "<img src = \"/images/select-icon.png\" width=\"17\" height=\"17\" style=\"margin-right: 0.9em;\" />" + testData[i].test + "<br />";
                    } else {
                        msg =  msg + "<img src = \"/images/error.png\" width=\"21\" height=\"21\" style=\"margin-right: 0.6em;\" />" + testData[i].error + "<br />";
                    }

                    if (typeof(testData[i].error) != "undefined" && flagError == 0) {
                        flagError = 1;
                    }
                }
                if (flag == 0) {
                    btnCreate.setVisible(true);
                }
                btnBack.setVisible(true);

                var titleSummary = "<div style=\"margin: 0 0 1em 0; border: 2px solid #AFC5D0; background:#D7ECF1; font: bold 1em arial; text-align: center; width: "+ (DEFAULT_WINDOW_WIDTH - 22) +";\">Testing Database Server configuration</div>";

                var style = $('#panelTest').attr("style");
                titleSummary = titleSummary + "<div style=\"padding: 0.5em; height: 235px;\">" + msg + "</div>";
                $('#panelTest').empty();
                style = style + ' background: #FFFFFF; font: normal 0.8em arial;';
                $('#panelTest').attr("style", style);
                $('#panelTest').append(titleSummary);
            };

            var showForm = function () {
                disableAllItems();
                winGrdpnlDataBaseConnection.showFooter();
                winGrdpnlDataBaseConnection.setTitle(titleOld);
                winGrdpnlDataBaseConnection.getItems()[1].setVisible(true);
                btnTestConnection.setVisible(true);
                btnCancel.setVisible(true);
            }

            var refreshGridPanelInMainWindow = function (load)
            {
                disableAllItems();
                dataBaseConnectionOption = "";
                winGrdpnlDataBaseConnection.getItems()[0].setVisible(true);
                winGrdpnlDataBaseConnection.setTitle("Database Connections".translate());
                load = load != null ? load : true;
                if (load) {
                    dataBaseConnectionsGetRestProxy(grdpnlDataBaseConnection);
                }
            };

            var listDBConnection;
            var dataBaseConnectionsGetRestProxy = function (grdpnl)
            {
                var restProxy = new PMRestClient ({
                    endpoint: "database-connections",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        listDBConnection = response;
                        grdpnl.setDataItems(listDBConnection);
                        grdpnl.sort('dbs_database_name', 'asc');
                    }
                });
                restProxy.executeRestClient();
            };

            var dataBaseConnectionPostTestRestProxy = function (data)
            {
                var restProxy = new PMRestClient ({
                    endpoint: "database-connection/test",
                    typeRequest: "post",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        testShow(response);
                    }
                });
                restProxy.executeRestClient();
            };

            var dataBaseConnectionGetRestProxy = function (dataBaseConnectionUid)
            {
                var restProxy = new PMRestClient ({
                    endpoint: "database-connection/" + dataBaseConnectionUid,
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        dataBaseConnectionOption = "PUT";
                        winFrmDataBaseConnectionShow("PUT", data);
                    }
                });
                restProxy.executeRestClient();
            };

            var dataBaseConnectionPutRestProxy = function (dataBaseConnectionUid, data)
            {
                var restProxy = new PMRestClient({
                    endpoint: "database-connection/" + dataBaseConnectionUid,
                    typeRequest: "update",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    messageSuccess: 'Database connection updated successfully'.translate(),
                    flashContainer: grdpnlDataBaseConnection
                });

                restProxy.executeRestClient();
            };

            var dataBaseConnectionDeleteRestProxy = function (dataBaseConnectionUid)
            {
                var restProxy = new PMRestClient({
                    endpoint: "database-connection/" + dataBaseConnectionUid,
                    typeRequest: "remove",
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    messageSuccess: 'Database connection deleted successfully'.translate(),
                    flashContainer: grdpnlDataBaseConnection
                });
                restProxy.executeRestClient();
            };

            var dataBaseConnectionPostRestProxy = function (data)
            {
                var restProxy = new PMRestClient ({
                    endpoint: "database-connection",
                    typeRequest: "post",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure: function(xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    messageError : 'An unexpected error while deleting the DB Connection, please try again later.'.translate(),
                    messageSuccess: 'Database connection saved successfully'.translate(),
                    flashContainer: grdpnlDataBaseConnection
                });

                restProxy.executeRestClient();
            };

            var cboEngineSetOptionsRestProxy = function (cboEngine, cboEncode)
            {
                cboEngine.clearOptions();
                var restProxy = new PMRestClient ({
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        var arrayOptions = [];
                        for (var i = 0; i <= data.length - 1; i++)  {
                            arrayOptions.push(
                                {
                                    value: data[i].id,
                                    label: data[i].name
                                }
                            );
                        }
                        cboEngine.setOptions(arrayOptions);
                        cboEngine.setValue(arrayOptions[0].value);
                        cboEncodeSetOptionsRestProxy(cboEngine.getValue(), cboEncode);
                    }
                });

                restProxy.setBaseEndPoint("system/db-engines");
                restProxy.executeRestClient();
            };

            var cboEncodeSetOptionsRestProxy = function (selectedCboEngineValue, cboEncode)
            {
                cboEncode.clearOptions();

                var arrayEnconde = [];
                var encode = selectedCboEngineValue;

                arrayEnconde["mysql"] = [
                    {"value": "big5",     "text": "big5 - Big5 Traditional Chinese"},
                    {"value": "dec8",     "text": "dec8 - DEC West European"},
                    {"value": "cp850",    "text": "cp850 - DOS West European"},
                    {"value": "hp8",      "text": "hp8 - HP West European"},
                    {"value": "koi8r",    "text": "koi8r - KOI8-R Relcom Russian"},
                    {"value": "latin1",   "text": "latin1 - cp1252 West European"},
                    {"value": "latin2",   "text": "latin2 - ISO 8859-2 Central European"},
                    {"value": "swe7",     "text": "swe7 - 7bit Swedish"},
                    {"value": "ascii",    "text": "ascii - US ASCII"},
                    {"value": "ujis",     "text": "ujis - EUC-JP Japanese"},
                    {"value": "sjis",     "text": "sjis - Shift-JIS Japanese"},
                    {"value": "hebrew",   "text": "hebrew - ISO 8859-8 Hebrew"},
                    {"value": "tis620",   "text": "tis620 - TIS620 Thai"},
                    {"value": "euckr",    "text": "euckr - EUC-KR Korean"},
                    {"value": "koi8u",    "text": "koi8u - KOI8-U Ukrainian"},
                    {"value": "gb2312",   "text": "gb2312 - GB2312 Simplified Chinese"},
                    {"value": "greek",    "text": "greek - ISO 8859-7 Greek"},
                    {"value": "cp1250",   "text": "cp1250 - Windows Central European"},
                    {"value": "gbk",      "text": "gbk - GBK Simplified Chinese"},
                    {"value": "latin5",   "text": "latin5 - ISO 8859-9 Turkish"},
                    {"value": "armscii8", "text": "armscii8 - ARMSCII-8 Armenian"},
                    {"value": "utf8",     "text": "utf8 - UTF-8 Unicode"},
                    {"value": "ucs2",     "text": "ucs2 - UCS-2 Unicode"},
                    {"value": "cp866",    "text": "cp866 - DOS Russian"},
                    {"value": "keybcs2",  "text": "keybcs2 - DOS Kamenicky Czech-Slovak"},
                    {"value": "macce",    "text": "macce - Mac Central European"},
                    {"value": "macroman", "text": "macroman - Mac West European"},
                    {"value": "cp852",    "text": "cp852 - DOS Central European"},
                    {"value": "latin7",   "text": "atin7 - ISO 8859-13 Baltic"},
                    {"value": "cp1251",   "text": "cp1251 - Windows Cyrillic"},
                    {"value": "cp1256",   "text": "cp1256  - Windows Arabic"},
                    {"value": "cp1257",   "text": "cp1257  - Windows Baltic"},
                    {"value": "binary",   "text": "binary  - Binary pseudo charset"},
                    {"value": "geostd8",  "text": "geostd8 - GEOSTD8 Georgian"},
                    {"value": "cp932",    "text": "cp932] - SJIS for Windows Japanese"},
                    {"value": "eucjpms",  "text": "eucjpms - UJIS for Windows Japanese"}
                ];

                arrayEnconde["pgsql"] = [
                    {"value": "BIG5",       "text": "BIG5"},
                    {"value": "EUC_CN",     "text": "EUC_CN"},
                    {"value": "EUC_JP",     "text": "EUC_JP"},
                    {"value": "EUC_KR",     "text": "EUC_KR"},
                    {"value": "EUC_TW",     "text": "EUC_TW"},
                    {"value": "GB18030",    "text": "GB18030"},
                    {"value": "GBK",        "text": "GBK"},
                    {"value": "ISO_8859_5", "text": "ISO_8859_5"},
                    {"value": "ISO_8859_6", "text": "ISO_8859_6"},
                    {"value": "ISO_8859_7", "text": "ISO_8859_7"},
                    {"value": "ISO_8859_8", "text": "ISO_8859_8"},
                    {"value": "JOHAB",      "text": "JOHAB"},
                    {"value": "KOI8",       "text": "KOI8"},
                    {"value": "selected",   "text": "LATIN1"},
                    {"value": "LATIN2",     "text": "LATIN2"},
                    {"value": "LATIN3",     "text": "LATIN3"},
                    {"value": "LATIN4",     "text": "LATIN4"},
                    {"value": "LATIN5",     "text": "LATIN5"},
                    {"value": "LATIN6",     "text": "LATIN6"},
                    {"value": "LATIN7",     "text": "LATIN7"},
                    {"value": "LATIN8",     "text": "LATIN8"},
                    {"value": "LATIN9",     "text": "LATIN9"},
                    {"value": "LATIN10",    "text": "LATIN10"},
                    {"value": "SJIS",       "text": "SJIS"},
                    {"value": "SQL_ASCII",  "text": "SQL_ASCII"},
                    {"value": "UHC",        "text": "UHC"},
                    {"value": "UTF8",       "text": "UTF8"},
                    {"value": "WIN866",     "text": "WIN866"},
                    {"value": "WIN874",     "text": "WIN874"},
                    {"value": "WIN1250",    "text": "WIN1250"},
                    {"value": "WIN1251",    "text": "WIN1251"},
                    {"value": "WIN1252",    "text": "WIN1252"},
                    {"value": "WIN1256",    "text": "WIN1256"},
                    {"value": "WIN1258",    "text": "WIN1258"}
                ];

                arrayEnconde["mssql"] = [
                    {"value": "utf8", "text": "utf8 - UTF-8 Unicode"}
                ];

                arrayEnconde["sqlsrv"] = [
                    {"value": "utf8", "text": "utf8 - UTF-8 Unicode"}
                ];

                var arrayNewEnconde = (typeof(arrayEnconde[encode]) != "undefined")? arrayEnconde[encode] : [];
                var arrayOptions = [];

                for (var i = 0; i <= arrayNewEnconde.length - 1; i++)  {
                    arrayOptions.push(
                        {
                            value: arrayNewEnconde[i].value,
                            label: arrayNewEnconde[i].text
                        }
                    );
                }

                cboEncode.setOptions(arrayOptions);
                cboEncode.setValue('utf8');
            };

            winFrmDataBaseConnectionShow = function (option, data)
            {
                disableAllItems();
                dataBaseConnectionData = data;
                frmDataBaseConnection.reset();
                cboEngineSetOptionsRestProxy(cboEngine, cboEncode);
                winGrdpnlDataBaseConnection.getItems()[1].setVisible(true);
                btnTestConnection.setVisible(true);
                btnCancel.setVisible(true);
                winGrdpnlDataBaseConnection.showFooter();

                switch (option) {
                    case "POST":
                        winGrdpnlDataBaseConnection.setTitle("Create Database Connection".translate());
                        frmDataBaseConnection.setTitle("");
                        txtPort.setValue("3306");
                        break;
                    case "PUT":
                        winGrdpnlDataBaseConnection.setTitle("Edit Database Connection".translate());
                        frmDataBaseConnection.setTitle("");
                        txtUID.setVisible(true);
                        txtUID.setValue(dataBaseConnectionData.dbs_uid),
                        cboEngine.setValue(dataBaseConnectionData.dbs_type),
                        txtServer.setValue(dataBaseConnectionData.dbs_server),
                        txtDataBaseName.setValue(dataBaseConnectionData.dbs_database_name),
                        txtUsername.setValue(dataBaseConnectionData.dbs_username),
                        txtPassword.setValue(dataBaseConnectionData.dbs_password),
                        txtPort.setValue(dataBaseConnectionData.dbs_port),
                        cboEncode.setValue(dataBaseConnectionData.dbs_encode),
                        txtDescription.setValue(dataBaseConnectionData.dbs_description)
                        break;
                }
                frmDataBaseConnection.setFocus();
            };

            var txtUID = new PMUI.field.TextField({
                id: "txtUID",
                name: "txtUID",
                valueType: "string",
                controlsWidth: 300,
                label: "UID".translate(),
                maxLength: 200,
                readOnly: true,
                visible: false
            });

            var cboEngine = new PMUI.field.DropDownListField({
                id: "cboEngine",
                name: "cboEngine",
                label: "Engine".translate(),
                options: null,
                controlsWidth: 150,
                onChange: function (newValue, prevValue)
                {
                    cboEncodeSetOptionsRestProxy(cboEngine.getValue(), cboEncode);
                }
            });

            var cboEncode = new PMUI.field.DropDownListField({
                id: "cboEncode",
                name: "cboEncode",
                label: "Encode".translate(),
                options: null,
                controlsWidth: 300
            });

            var txtServer = new PMUI.field.TextField({
                id: "txtServer",
                name: "txtServer",
                valueType: "string",
                controlsWidth: 300,
                label: "Server".translate(),
                maxLength: 200,
                required: true
            });

            var txtDataBaseName = new PMUI.field.TextField({
                id: "txtDataBaseName",
                name: "txtDataBaseName",
                valueType: "string",
                controlsWidth: 300,
                label: "Database Name".translate(),
                maxLength: 200,
                required: true
            });

            var txtUsername = new PMUI.field.TextField({
                id: "txtUsername",
                name: "txtUsername",
                valueType: "string",
                controlsWidth: 300,
                label: "Username".translate(),
                maxLength: 200,
                required: true
            });

            var txtPassword = new PMUI.field.PasswordField ({
                id: "txtPassword",
                name: "txtPassword",
                valueType: "string",
                controlsWidth: 300,
                label: "Password".translate(),
                maxLength: 200
            });

            var txtPort = new PMUI.field.TextField({
                id: "txtPort",
                name: "txtPort",
                valueType: "string",
                controlsWidth: 300,
                label: "Port".translate(),
                value: "3306",
                controlsWidth: 300,
                maxLength: 200,
                required: true
            });

            var txtDescription = new PMUI.field.TextAreaField({
                id: "txtDescription",
                name: "txtDescription",
                valueType: "string",
                controlsWidth: 500,
                label: "Description".translate(),
                height: "200px",
                style: {cssClasses: ['mafe-textarea-resize']}
            });

            btnTestConnection = new PMUI.ui.Button({
                id: "btnTestConnection",
                text: "Test Connection".translate(),
                buttonType: 'success',
                height : 31,
                handler: function ()
                {
                    if (frmDataBaseConnection.isValid()) {
                        var data = {
                            dbs_type: cboEngine.getValue(),
                            dbs_server: txtServer.getValue(),
                            dbs_database_name: txtDataBaseName.getValue(),
                            dbs_username: txtUsername.getValue(),
                            dbs_password: txtPassword.getValue(),
                            dbs_port: parseInt(txtPort.getValue()),
                            dbs_encode: cboEncode.getValue(),
                            dbs_description: txtDescription.getValue()
                        };

                        dataBaseConnectionPostTestRestProxy(data);
                    }
                }
            });

            btnCreate = new PMUI.ui.Button({
                id: "btnCreate",
                text: "Save".translate(),

                handler: function ()
                {
                    var data = {
                         dbs_type: cboEngine.getValue(),
                         dbs_server: txtServer.getValue(),
                         dbs_database_name: txtDataBaseName.getValue(),
                         dbs_username: txtUsername.getValue(),
                         dbs_password: txtPassword.getValue(),
                         dbs_port: parseInt(txtPort.getValue()),
                         dbs_encode: cboEncode.getValue(),
                         dbs_description: txtDescription.getValue()
                    };

                    switch (dataBaseConnectionOption) {
                        case "POST":
                            if (frmDataBaseConnection.isValid()) {
                                dataBaseConnectionPostRestProxy(data);
                            } else {
                                return;
                            }
                            break;
                        case "PUT":
                            if (frmDataBaseConnection.isValid()) {
                                dataBaseConnectionPutRestProxy(dataBaseConnectionData.dbs_uid, data);
                            } else {
                                return;
                            }
                            break;
                    }
                }
            });

            btnCancel = new PMUI.ui.Button({
                id: "btnCancel",
                text: "Cancel".translate(),
                buttonType: 'link',
                height :31,
                handler: function ()
                {
                    if (frmDataBaseConnection.isDirty()){
                        var message_window = new PMUI.ui.MessageWindow({
                            id: "cancelMessageTriggers",
                            windowMessageType: 'warning',
                            width: 490,
                            message : 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                            footerItems: [
                                {
                                    text: "Yes".translate(),
                                    height: 40,
                                    handler: function() {
                                         message_window.close();
                                         dataBaseConnectionOption = "";
                                         refreshGridPanelInMainWindow(false);
                                     }
                                },
                                {
                                    pmType : 'label',
                                    text: "or".translate()
                                },
                                {
                                    height: 40,
                                    text: "No".translate(),
                                    buttonType: 'link',
                                    handler: function() {
                                        message_window.close();       
                                    }
                                }
                            ],
                            title: 'Confirm'.translate()
                        });
                        message_window.open();
                        message_window.showFooter();
                    } else {
                        dataBaseConnectionOption = "";
                        refreshGridPanelInMainWindow(false);
                    }
                }
            });

            btnBack = new PMUI.ui.Button({
                id: "btnBack",
                text: "Back".translate(),
                handler: function ()
                {
                    showForm();
                }
            });

            frmDataBaseConnection = new PMUI.form.Form({
                id: "frmDataBaseConnection",
                width: DEFAULT_WINDOW_WIDTH-70,

                items: [
                    txtUID,
                    cboEngine,
                    cboEncode,
                    txtServer,
                    txtDataBaseName,
                    txtUsername,
                    txtPassword,
                    txtPort,
                    txtDescription
                ]
            });

            btnNew = new PMUI.ui.Button({
                id: "btnNew",
                text: "Create".translate(),
                height:"36px",
                width : 100,
                style : {
                    cssClasses: [
                        'mafe-button-create'
                    ]
                },
                handler: function ()
                {
                    dataBaseConnectionOption = "POST";
                    winFrmDataBaseConnectionShow("POST", {});
                }
                //buttonType : 'success'
            });

            grdpnlDataBaseConnection = new PMUI.grid.GridPanel({
                id: "grdpnlDataBaseConnection",
                filterable: true,
                pageSize: 10,
                width: "96%",
                style:{
                     cssClasses:["mafe-gridPanel"]                     
                },
                //height: DEFAULT_WINDOW_HEIGHT - 60,
                filterPlaceholder: 'Text to Search'.translate(),
                emptyMessage : 'No records found'.translate(),
                nextLabel: 'Next'.translate(),
                previousLabel: 'Previous'.translate(),
                customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                    return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
                },
                columns: [
                    {
                        id: 'grdpnlDataBaseConnectionButtonShow',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Show ID".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-show'
                            ]
                        },
                        width: "100px",
                        onButtonClick: function (row, grid) {
                            showUID(row.id);
                        }
                    },
                    {
                        columnData: "dbs_type",
                        title: "Type".translate(),
                        width: "100px",
                        sortable: true,
                        alignmentCell: 'left'
                    },
                    {
                        columnData: "dbs_server",
                        title: "Server".translate(),
                        width: "155px",
                        alignmentCell: 'left'
                    },
                    {
                        columnData: "dbs_database_name",
                        title: "Database Name".translate(),
                        width: "160px",
                        sortable: true,
                        alignmentCell: 'left'
                    },
                    {
                        columnData: "dbs_description",
                        title: "Description".translate(),
                        width: "200px",
                        alignmentCell: 'left'
                    },
                    {
                        id: 'grdpnlDataBaseConnectionButtonEdit',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Edit".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-edit'
                            ]
                        },
                        //width: "74px",
                        onButtonClick: function(row, grid)
                        {
                            var data = row.getData();
                            dataBaseConnectionGetRestProxy(data.dbs_uid);
                        }
                    },
                    {
                        id: 'grdpnlDataBaseConnectionButtonDelete',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Delete".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-delete'
                            ]
                        },
                        //width: "100px",
                        onButtonClick: function(row, grid)
                        {
                            var data = row.getData();
                            var msgWarning = new PMUI.ui.MessageWindow({
                                id: "msgWarning",
                                title: 'Warning'.translate(),
                                windowMessageType: 'error',
                                message: "Do you want to delete this DB Connection?".translate(),
                                buttons: [
                                    {
                                        text: "Delete".translate(),
                                        height: 40,
                                        handler: function() {
                                            dataBaseConnectionDeleteRestProxy(data.dbs_uid);
                                            msgWarning.close();
                                        }
                                    },
                                    {
                                        pmType: 'label',
                                        text: "or".translate()
                                    },
                                    {
                                        text: "Cancel".translate(),
                                        buttonType: 'link',
                                        handler: function() {
                                            msgWarning.close();
                                        }
                                    }
                                ]
                            });
                            msgWarning.open();
                            msgWarning.showFooter();
                        }
                    }
                ],
                dataItems: null
            });

            panelTest = new PMUI.core.Panel({
                id : 'panelTest',
                height : DEFAULT_WINDOW_HEIGHT - 71,
                display : 'inline-block'
            });

            winGrdpnlDataBaseConnection = new PMUI.ui.Window({
                id: "winGrdpnlDataBaseConnection",
                title: "Database Connections".translate(),
                width: DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT,
                buttonPanelPosition : "top",
                buttons: [ btnTestConnection, btnCreate,
                  {
            		pmType: 'label',
            		text: "or".translate(),
            		style : {
            			cssProperties :{
            				'fontSize': '14px'
            			}
            		}
                  }, btnCancel,
                  btnBack]
            });

            winGrdpnlDataBaseConnection.addItem(grdpnlDataBaseConnection);
            winGrdpnlDataBaseConnection.addItem(frmDataBaseConnection);
            winGrdpnlDataBaseConnection.addItem(panelTest);

            refreshGridPanelInMainWindow();
            if (typeof listDBConnection !== "undefined") {
                winGrdpnlDataBaseConnection.open();
                $('#grdpnlDataBaseConnection .pmui-textcontrol').css({'margin-top':'5px', width:'250px'});
                winGrdpnlDataBaseConnection.defineEvents();
                applyStyleWindowForm(winGrdpnlDataBaseConnection);
                winGrdpnlDataBaseConnection.footer.html.style.textAlign = 'right';
                $(btnNew.getHTML()).css({float:"right"})
                grdpnlDataBaseConnection.dom.toolbar.appendChild(btnNew.getHTML());
                btnNew.defineEvents();

                disableAllItems();
                winGrdpnlDataBaseConnection.getItems()[0].setVisible(true);
            }
        };

        PMDesigner.database.create = function () {
            PMDesigner.database();
            dataBaseConnectionOption = "POST";
            winFrmDataBaseConnectionShow("POST", {});
        };
    }()
);


(function () {
    var openTinyInMainWindow,
            dataOutPutDocument,
            openFormInMainWindow;

    PMDesigner.output = function (event) {
        var winMainOutputDocument;

        var formOutput, rowData, updateOutPut, restClient;

        setDataRow = function (row) {
            dataOutPutDocument = row.getData();
            rowData = row;
        };

        clearDataRow = function () {
            dataOutPutDocument = '';
            rowData = '';
        };

        var listOutputDocs;
        getGridOutput = function () {
            var restClientGet = new PMRestClient({
                endpoint: 'output-documents',
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    listOutputDocs = response;
                    gridOutput.setDataItems(listOutputDocs);
                    gridOutput.sort('out_doc_title', 'asc');
                },
                messageError: "There are problems getting the output documents, please try again.".translate()
            });
            restClientGet.executeRestClient();
        };

        disableAllItems = function () {
            winMainOutputDocument.hideFooter();
            formOutput.reset();

            winMainOutputDocument.getItems()[0].setVisible(false);
            winMainOutputDocument.getItems()[1].setVisible(false);
            for (var i = 0; i <= winMainOutputDocument.getItems()[1].getItems().length - 1; i++) {
                winMainOutputDocument.getItems()[1].getItems()[i].setVisible(false);
            }
            btnSaveWindowOutputDoc.setVisible(false);
            btnCloseWindowOutputDoc.setVisible(false);
            btnSaveTiny.setVisible(false);
            btnCancelTiny.setVisible(false);
            winMainOutputDocument.footer.getItems()[1].setVisible(false);
            winMainOutputDocument.footer.getItems()[4].setVisible(false);
        }

        var refreshGridPanelInMainWindow = function ()
        {
            disableAllItems();
            winMainOutputDocument.getItems()[0].setVisible(true);
            winMainOutputDocument.setTitle("Output Documents".translate());
            getGridOutput();
        };

        var openGridPanelInMainWindow = function ()
        {
            disableAllItems();
            winMainOutputDocument.getItems()[0].setVisible(true);
            winMainOutputDocument.setTitle("Output Documents".translate());
            $(winMainOutputDocument.body).removeClass("pmui-background");
        };

        openFormInMainWindow = function ()
        {
            disableAllItems();
            winMainOutputDocument.showFooter();
            winMainOutputDocument.getItems()[1].setVisible(true);
            for (var i = 0; i < winMainOutputDocument.getItems()[1].getItems().length - 1; i++) {
                winMainOutputDocument.getItems()[1].getItems()[i].setVisible(true);
            }
            btnSaveWindowOutputDoc.setVisible(true);
            btnCloseWindowOutputDoc.setVisible(true);
            winMainOutputDocument.footer.getItems()[4].setVisible(true);
            password.setVisible(false);
            winMainOutputDocument.setTitle("Create Output Document".translate());
            winMainOutputDocument.setHeight(520);
            formOutput.panel.style.addProperties({padding: '20px 10px'});
            formOutput.setFocus();

        };

        var openFormForEditInMainWindow = function (outputDocumentData)
        {
            disableAllItems();
            winMainOutputDocument.showFooter();
            btnSaveWindowOutputDoc.setVisible(true);
            btnCloseWindowOutputDoc.setVisible(true);
            winMainOutputDocument.footer.getItems()[4].setVisible(true);
            formOutput.setWidth(700);
            winMainOutputDocument.getItems()[1].setVisible(true);
            winMainOutputDocument.setTitle("Edit Output Document".translate());
            $(winMainOutputDocument.body).addClass("pmui-background");
            for (var i = 0; i < winMainOutputDocument.getItems()[1].getItems().length - 1; i++) {
                winMainOutputDocument.getItems()[1].getItems()[i].setVisible(true);
            }

            password.setVisible(false);
            if (dataOutPutDocument != '' && dataOutPutDocument != undefined) {
                var dataEdit = formOutput.getFields( );
                dataEdit[0].setValue(dataOutPutDocument['out_doc_title']);
                dataEdit[1].setValue(dataOutPutDocument['out_doc_filename']);
                dataEdit[2].setValue(dataOutPutDocument['out_doc_description']);
                dataEdit[3].setValue(dataOutPutDocument['out_doc_report_generator']);
                dataEdit[4].setValue(dataOutPutDocument['out_doc_media']);
                dataEdit[5].setValue(dataOutPutDocument['out_doc_landscape']);
                dataEdit[6].setValue(dataOutPutDocument['out_doc_left_margin']);
                dataEdit[7].setValue(dataOutPutDocument['out_doc_right_margin']);
                dataEdit[8].setValue(dataOutPutDocument['out_doc_top_margin']);
                dataEdit[9].setValue(dataOutPutDocument['out_doc_bottom_margin']);
                dataEdit[10].setValue(dataOutPutDocument['out_doc_generate']);
                if (dataOutPutDocument['out_doc_generate'] != 'WORD') {
                    dataEdit[11].setVisible(true);
                }
                dataEdit[11].setValue(dataOutPutDocument['out_doc_pdf_security_enabled']);
                if (dataOutPutDocument['out_doc_pdf_security_enabled'] != 0) {
                    password.setVisible(true);
                }
                dataEdit[12].setValue(dataOutPutDocument['out_doc_pdf_security_open_password']);
                dataEdit[13].setValue(dataOutPutDocument['out_doc_pdf_security_owner_password']);

                dataOutPutDocument['out_doc_pdf_security_permissions'] = dataOutPutDocument['out_doc_pdf_security_permissions'].split("|");
                dataEdit[14].setValue(JSON.stringify(dataOutPutDocument['out_doc_pdf_security_permissions']));

                dataEdit[15].setValue(dataOutPutDocument['out_doc_versioning']);
                dataEdit[16].setValue(dataOutPutDocument['out_doc_destination_path']);
                dataEdit[17].setValue(dataOutPutDocument['out_doc_tags']);
            }
            winMainOutputDocument.setHeight(520);
            formOutput.panel.style.addProperties({padding: '20px 10px'});
            formOutput.setFocus();
        };

        openTinyInMainWindow = function (outputDocumentData)
        {
            disableAllItems();
            winMainOutputDocument.showFooter();
            tinyEditorField = 13;
            winMainOutputDocument.getItems()[1].setVisible(true);
            winMainOutputDocument.getItems()[1].getItems()[tinyEditorField].setVisible(true);
            formOutput.setWidth(890);
            btnSaveTiny.setVisible(true);
            btnCancelTiny.setVisible(true);
            winMainOutputDocument.footer.getItems()[1].setVisible(true);
            if (!editorTiny.isInitialized) {
                editorTiny.createHTML();
                editorTiny.setParameterTiny();
                editorTiny.isInitialized = true;
            } else {
                tinyMCE.execCommand('mceFocus', false, 'tinyeditor');
            }
            var dataEdit = formOutput.getFields( );
            winMainOutputDocument.setTitle("Edit Output Document".translate());
            if (dataOutPutDocument != '' && dataOutPutDocument != undefined) {
                dataOutPutDocument['out_doc_template'] = (dataOutPutDocument['out_doc_template'] != null) ? dataOutPutDocument['out_doc_template'] : ' ';
                dataEdit[18].setValue(dataOutPutDocument['out_doc_template']);
                dataEdit[18].setValueTiny(dataOutPutDocument['out_doc_template']);
                dataEdit[18].setHeight(425);
            }
            formOutput.panel.style.addProperties({padding: '0px 10px'});
            winMainOutputDocument.setHeight(520);
            if (!editorTiny.isInitialized)
                tinymce.execCommand('mceFocus', false, 'tinyeditor');
        };

        deleteDataRow = function () {
            confirmWindow = new PMUI.ui.MessageWindow({
                id: "outputMessageWindowWarning",
                windowMessageType: 'error',
                bodyHeight: 'auto',
                width: 490,
                message: "Do you want to delete this Output Document?".translate(),
                footerItems: [
                    {
                        id: 'confirmWindowButtonYes',
                        text: "Delete".translate(),
                        visible: true,
                        height: 40,
                        handler: function () {
                            confirmWindow.close();
                            restClient = new PMRestClient({
                                endpoint: "output-document/" + dataOutPutDocument.out_doc_uid,
                                typeRequest: 'remove',
                                functionSuccess: function (xhr, response) {
                                    refreshGridPanelInMainWindow();
                                },
                                messageError: "There are problems deleting the OutputDocument, please try again.".translate(),
                                messageSuccess: 'Output Document deleted successfully'.translate(),
                                flashContainer: gridOutput
                            });
                            restClient.executeRestClient();
                        }
                    },
                    {
                        pmType: 'label',
                        text: 'or'
                    },
                    {
                        id: 'confirmWindowButtonNo',
                        text: "Cancel".translate(),
                        visible: true,
                        handler: function () {
                            confirmWindow.close();
                        },
                        buttonType: 'link'
                    }
                ]
            });
            confirmWindow.open();
            confirmWindow.dom.titleContainer.style.height = "17px";
            confirmWindow.showFooter();
        };

        updateOutput = function (data) {
            dataOutPutDocument = '';
            var restClientUpdate = new PMRestClient({
                endpoint: "output-document/" + data.out_doc_uid,
                typeRequest: 'update',
                data: data,
                functionSuccess: function (xhr, response) {
                    dataOutPutDocument = data;
                    refreshGridPanelInMainWindow();
                },
                messageError: "There are problems updating the OutputDocument, please try again.".translate(),
                messageSuccess: 'Output Document updated successfully'.translate(),
                flashContainer: gridOutput
            });
            restClientUpdate.executeRestClient();
        };

        editorTiny = new PMTinyField({
            id: 'outputEditorTiny',
            theme: "advanced",
            plugins: "advhr,advimage,advlink,advlist,autolink,autoresize,contextmenu,directionality,emotions,example,example_dependency,fullpage,fullscreen,iespell,inlinepopups,insertdatetime,layer,legacyoutput,lists,media,nonbreaking,noneditable,pagebreak,paste,preview,print,save,searchreplace,style,tabfocus,table,template,visualblocks,visualchars,wordcount,xhtmlxtras,pmSimpleUploader,pmVariablePicker,pmGrids,style",
            mode: "specific_textareas",
            editorSelector: "tmceEditor",
            widthTiny: DEFAULT_WINDOW_WIDTH - 58,
            heightTiny: DEFAULT_WINDOW_HEIGHT - 100,
            directionality: 'ltr',
            verifyHtml: false,
            themeAdvancedButtons1: "pmSimpleUploader,|,pmVariablePicker,|,pmGrids,|,bold,italic,underline,|,justifyleft,justifycenter,justifyright,justifyfull,|,fontselect,fontsizeselect,|,cut,copy,paste,|,bullist,numlist,|,outdent,indent,blockquote",
            themeAdvancedButtons2: "tablecontrols,|,undo,redo,|,link,unlink,image,|,forecolor,backcolor,styleprops,|,hr,removeformat,visualaid,|,sub,sup,|,ltr,rtl,|,code",
            popupCss: "/js/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/dialog.css",
            skin: "o2k7",
            skin_variant: "silver"
        });

        var docMargin = new PMUI.form.FormPanel({
            fieldset: true,
            layout: 'hbox',
            legend: "Margin".translate(),
            items: [
                {
                    pmType: 'panel',
                    proportion: 0.7
                },
                {
                    pmType: "panel",
                    layout: 'vbox',
                    items: [
                        {
                            id: 'outputFormDocLeftMargin',
                            pmType: "text",
                            label: "Left".translate(),
                            required: true,
                            value: 20,
                            name: "out_doc_left_margin",
                            controlsWidth: 50,
                            labelWidth: '35%'
                        }, {
                            id: 'outputFormDocRightMargin',
                            pmType: "text",
                            label: "Right".translate(),
                            required: true,
                            value: 20,
                            name: "out_doc_right_margin",
                            controlsWidth: 50,
                            labelWidth: '35%'
                        }
                    ]
                },
                {
                    pmType: "panel",
                    layout: 'vbox',
                    proportion: 1.5,
                    items: [
                        {
                            id: 'outputFormDocTopMargin',
                            pmType: "text",
                            label: "Top".translate(),
                            required: true,
                            value: 20,
                            name: "out_doc_top_margin",
                            controlsWidth: 50,
                            labelWidth: '30%'
                        }, {
                            id: 'outputFormDocBottomMargin',
                            pmType: "text",
                            label: "Bottom".translate(),
                            required: true,
                            value: 20,
                            name: "out_doc_bottom_margin",
                            controlsWidth: 50,
                            labelWidth: '30%'
                        }
                    ]
                }
            ]
        });

        var password = new PMUI.form.FormPanel({
            width: 500,
            height: 130,
            fieldset: true,
            visible: false,
            legend: "",
            items: [
                {
                    pmType: "panel",
                    layout: 'vbox',
                    items: [
                        {
                            id: 'outputFormDocPdfSecurityOpen',
                            pmType: "password",
                            controlsWidth: 380,
                            label: "Open Password ".translate(),
                            value: "",
                            name: "out_doc_pdf_security_open_password"
                        }, {
                            id: 'outputFormDocPdfSecurityOwner',
                            pmType: "password",
                            controlsWidth: 380,
                            label: "Owner Password ".translate(),
                            value: "",
                            name: "out_doc_pdf_security_owner_password"
                        }
                    ]
                },
                {
                    pmType: "panel",
                    layout: 'vbox',
                    items: [
                        {
                            id: 'outputFormDocPdfSecurityPermissions',
                            pmType: 'checkbox',
                            label: "Allowed Permissions".translate(),
                            value: '',
                            name: 'out_doc_pdf_security_permissions',
                            required: false,
                            controlPositioning: 'horizontal',
                            separator: "|",
                            maxDirectionOptions: 4,
                            options: [
                                {
                                    id: 'monday',
                                    label: "print".translate(),
                                    value: 'print'
                                },
                                {
                                    id: 'monday',
                                    label: "modify".translate(),
                                    value: 'modify'
                                },
                                {
                                    id: 'monday',
                                    label: "copy".translate(),
                                    value: 'copy'
                                },
                                {
                                    id: 'monday',
                                    label: "forms".translate(),
                                    value: 'forms'
                                }

                            ]
                        }
                    ]
                }
            ],
            layout: "vbox"
        });

        //the form is 700px width, but with the tiny grows to 890
        formOutput = new PMUI.form.Form({
            id: 'outputForm',
            fieldset: true,
            title: "",
            visibleHeader: false,
            width: DEFAULT_WINDOW_WIDTH - 43,
            items: [
                {
                    id: 'outputFormDocTitle',
                    pmType: "text",
                    name: 'out_doc_title',
                    label: "Title".translate(),
                    controlsWidth: 300,
                    required: true
                },
                new CriteriaField({
                    id: 'outputFormDocFilename',
                    pmType: "text",
                    name: 'out_doc_filename',
                    label: "Filename generated".translate(),
                    controlsWidth: 300,
                    required: true
                }),
                {
                    id: 'outputFormDocDescription',
                    pmType: "textarea",
                    name: 'out_doc_description',
                    label: "Description".translate(),
                    controlsWidth: 500,
                    rows: 100,
                    style: {cssClasses: ['mafe-textarea-resize']}
                },
                {
                    id: 'outputFormDocReportGenerator',
                    pmType: "dropdown",
                    name: 'out_doc_report_generator',
                    label: "Report Generator".translate(),
                    require: true,
                    controlsWidth: 165,
                    options: [
                        {
                            label: "TCPDF".translate(),
                            value: "TCPDF"
                        },
                        {
                            label: "HTML2PDF (Old Version)".translate(),
                            value: "HTML2PDF"
                        }
                    ],
                    value: "TCPDF"
                },
                {
                    id: 'outputFormDocMedia',
                    pmType: "dropdown",
                    name: 'out_doc_media',
                    label: "Media".translate(),
                    controlsWidth: 165,
                    options: [
                        {label: "Letter".translate(), value: "Letter"},
                        {label: "Legal".translate(), value: "Legal"},
                        {label: "Executive".translate(), value: "Executive"},
                        {label: "B5".translate(), value: "B5"},
                        {label: "Folio".translate(), value: "Folio"},
                        {label: "A0Oversize".translate(), value: "A0Oversize"},
                        {label: "A0".translate(), value: "A0"},
                        {label: "A1".translate(), value: "A1"},
                        {label: "A2".translate(), value: "A2"},
                        {label: "A3".translate(), value: "A3"},
                        {label: "A4".translate(), value: "A4"},
                        {label: "A5".translate(), value: "A5"},
                        {label: "A6".translate(), value: "A6"},
                        {label: "A7".translate(), value: "A7"},
                        {label: "A8".translate(), value: "A8"},
                        {label: "A9".translate(), value: "A9"},
                        {label: "A10", value: "A10"},
                        {label: "Screenshot640".translate(), value: "SH640"},
                        {label: "Screenshot800".translate(), value: "SH800"},
                        {label: "Screenshot1024".translate(), value: "SH1024"}
                    ]
                },
                {
                    id: 'outputFormDocLandscape',
                    pmType: "dropdown",
                    name: 'out_doc_landscape',
                    label: "Orientation".translate(),
                    controlsWidth: 165,
                    options: [
                        {
                            label: "Portrait".translate(),
                            selected: true,
                            value: 0
                        },
                        {
                            label: "Landscape".translate(),
                            value: 1
                        }
                    ],
                    valueType: 'number'
                },
                docMargin,
                {
                    id: 'outputFormDocGenerate',
                    pmType: "dropdown",
                    name: 'out_doc_generate',
                    controlsWidth: 70,
                    label: "Output Document to Generate".translate(),
                    options: [
                        {
                            label: "Both".translate(),
                            value: "BOTH"
                        },
                        {
                            label: "Doc".translate(),
                            value: "DOC"
                        },
                        {
                            label: "Pdf".translate(),
                            value: "PDF"
                        }
                    ],
                    value: "DOC",
                    onChange: function (newValue, prevValue) {
                        var visible = true;
                        if (newValue == 'DOC') {
                            visible = false;
                        }
                        formOutput.getFields( )[11].setVisible(visible);
                    }
                },
                {
                    id: 'outputFormDocPdfSecurityEnabled',
                    pmType: "dropdown",
                    name: 'out_doc_pdf_security_enabled',
                    controlsWidth: 100,
                    label: 'PDF security'.translate(),
                    visible: false,
                    options: [
                        {
                            label: "Disabled".translate(),
                            selected: true,
                            value: 0
                        },
                        {
                            label: "Enabled".translate(),
                            value: 1
                        }
                    ],
                    valueType: 'number',
                    onChange: function (newValue, prevValue) {
                        var visible = true;
                        if (newValue == 0) {
                            visible = false;
                        }
                        password.setVisible(visible);
                    }
                },
                password,
                {
                    id: 'outputFormDocVersioning',
                    pmType: "dropdown",
                    name: "out_doc_versioning",
                    controlsWidth: 70,
                    label: 'Enable versioning'.translate(),
                    options: [
                        {
                            label: "Yes".translate(),
                            value: 1
                        },
                        {
                            label: "No".translate(),
                            selected: true,
                            value: 0
                        }
                    ],
                    valueType: 'number'
                },
                new CriteriaField({
                    id: 'outputFormDocDestinationPath',
                    pmType: "text",
                    name: "out_doc_destination_path",
                    label: "Destination Path".translate(),
                    controlsWidth: 340
                }),
                new CriteriaField({
                    id: 'outputFormDocTags',
                    pmType: "text",
                    name: "out_doc_tags",
                    label: "Tags".translate(),
                    controlsWidth: 340
                })
            ],
            style: {
                cssProperties: {
                    marginLeft: '20px'
                }
            }
        });

        formOutput.style.addProperties({marginLeft: '20px'});
        gridOutput = new PMUI.grid.GridPanel({
            id: 'gridOutput',
            pageSize: 10,
            width: "96%",
            style: {
                cssClasses: ["mafe-gridPanel"]
            },
            filterPlaceholder: 'Text to Search'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            columns: [
                {
                    id: 'gridOutputButtonShow',
                    title: '',
                    dataType: 'button',
                    buttonLabel: 'Show ID'.translate(),
                    columnData: "out_doc_uid",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-show'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        showUID(row.id);
                    }
                },
                {
                    title: 'Title'.translate(),
                    dataType: 'string',
                    width: '392px',
                    alignment: "left",
                    columnData: "out_doc_title",
                    sortable: true,
                    alignmentCell: 'left'
                },
                {
                    title: 'Type'.translate(),
                    dataType: 'string',
                    width: '100px',
                    alignmentCell: 'left',
                    columnData: "out_doc_type",
                    sortable: true
                },
                {
                    id: 'gridOutputButtonEdit',
                    title: '',
                    dataType: 'button',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit'
                        ]
                    },
                    buttonLabel: 'Edit'.translate(),
                    onButtonClick: function (row, grid) {
                        setDataRow(row);
                        openFormForEditInMainWindow();
                    }
                },
                {
                    id: 'gridOutputButtonProperties',
                    title: '',
                    dataType: 'button',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-properties'
                        ]
                    },
                    buttonLabel: 'Open Editor'.translate(),
                    onButtonClick: function (row, grid) {
                        setDataRow(row);
                        openTinyInMainWindow(row);
                    }
                },
                {
                    id: 'gridOutputButtonDelete',
                    title: '',
                    dataType: 'button',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    buttonLabel: 'Delete'.translate(),
                    onButtonClick: function (row, grid) {
                        setDataRow(row);
                        deleteDataRow();
                    }
                }
            ]
        });

        btnSaveWindowOutputDoc = new PMUI.ui.Button({
            id: 'btnSaveWindowOutputDoc',
            text: "Save".translate(),
            handler: function () {
                if (formOutput.isValid( )) {
                    itemOutPut = formOutput.getData();
                    itemOutPut['out_doc_type'] = "HTML";

                    var items = jQuery.parseJSON(itemOutPut['out_doc_pdf_security_permissions']);
                    itemOutPut['out_doc_pdf_security_permissions'] = '';
                    for (var i = 0; i < items.length; i++) {
                        itemOutPut['out_doc_pdf_security_permissions'] += (i == 0) ? items[i] : '|' + items[i];
                    }

                    if (dataOutPutDocument != '' && dataOutPutDocument != undefined) {
                        itemOutPut['out_doc_uid'] = dataOutPutDocument.out_doc_uid;
                        restClient = new PMRestClient({
                            endpoint: "output-document/" + dataOutPutDocument.out_doc_uid,
                            typeRequest: 'update',
                            data: itemOutPut,
                            functionSuccess: function (xhr, response) {
                                dataOutPutDocument = itemOutPut;
                                refreshGridPanelInMainWindow();
                            },
                            messageError: "There are problems updating the OutputDocument, please try again.".translate(),
                            messageSuccess: 'Output Document updated successfully'.translate(),
                            flashContainer: gridOutput
                        });
                        restClient.executeRestClient();
                    } else {
                        itemOutPut['out_doc_uid'] = '';
                        restClient = new PMRestClient({
                            endpoint: "output-document",
                            typeRequest: 'post',
                            data: itemOutPut,
                            functionSuccess: function (xhr, response) {
                                dataOutPutDocument = itemOutPut;
                                refreshGridPanelInMainWindow();
                            },
                            messageError: "There are problems saved the OutputDocument, please try again.".translate(),
                            messageSuccess: 'Output Document saved successfully'.translate(),
                            flashContainer: gridOutput
                        });
                        restClient.executeRestClient();
                    }
                    clearDataRow();
                }
            },
            height: 31,
            buttonType: 'success'
        });

        btnCloseWindowOutputDoc = new PMUI.ui.Button({
            id: 'btnCloseWindowOutputDoc',
            text: "Cancel".translate(),
            handler: function () {
                if (formOutput.isDirty()) {
                    var message_window = new PMUI.ui.MessageWindow({
                        id: "cancelMessageTriggers",
                        width: 490,
                        title: 'Confirm'.translate(),
                        windowMessageType: "warning",
                        bodyHeight: 'auto',
                        message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                        footerItems: [
                            {
                                text: "Yes".translate(),
                                handler: function () {
                                    message_window.close();
                                    clearDataRow();
                                    openGridPanelInMainWindow();
                                },
                                height: 40
                            }, {
                                pmType: 'label',
                                text: "or".translate()
                            }, {
                                text: "No".translate(),
                                handler: function () {
                                    message_window.close();
                                },
                                buttonType: 'link'
                            }
                        ]
                    });
                    message_window.open();
                    message_window.showFooter();
                } else {
                    clearDataRow();
                    openGridPanelInMainWindow();
                }
            },
            height: 31,
            buttonType: 'link'
        });

        newButtonOutput = new PMUI.ui.Button({
            id: 'outputButtonNew',
            text: 'Create'.translate(),
            height: "36px",
            width: 100,
            style: {
                cssClasses: [
                    'mafe-button-create'
                ]
            },
            handler: function () {
                clearDataRow();
                openFormInMainWindow();
            }
        });

        btnCancelTiny = new PMUI.ui.Button({
            id: 'btnCloseTiny',
            text: 'Cancel'.translate(),
            handler: function () {
                if (typeof dataOutPutDocument['externalType'] != 'undefined' && dataOutPutDocument['externalType']) {
                    winMainOutputDocument.close();
                    return;
                }
                openGridPanelInMainWindow();
            },
            buttonType: 'link'
        });

        btnSaveTiny = new PMUI.ui.Button({
            id: 'btnSaveTiny',
            text: 'Save'.translate(),
            handler: function () {
                dataOutPutDocument['out_doc_template'] = tinyMCE.activeEditor.getContent();
                updateOutput(dataOutPutDocument);
                if (typeof dataOutPutDocument['externalType'] != 'undefined' && dataOutPutDocument['externalType']) {
                    winMainOutputDocument.close();
                    return;
                }
                clearDataRow();
                refreshGridPanelInMainWindow();
            },
            buttonType: 'success',
            height: 31
        });

        var winMainOutputDocument = new PMUI.ui.Window({
            id: "winMainOutputDocument",
            title: "Output Documents".translate(),
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            buttonPanelPosition: "top",
            buttons: [btnSaveTiny,
                {
                    pmType: 'label',
                    text: "or".translate()
                }, btnCancelTiny, btnSaveWindowOutputDoc,
                {
                    pmType: 'label',
                    text: "or".translate(),
                    style: {
                        cssProperties: {
                            'fontSize': '14px'
                        }
                    }
                },
                btnCloseWindowOutputDoc]
        });

        formOutput.addItem(editorTiny);
        formOutput.footer.setVisible(false);

        winMainOutputDocument.addItem(gridOutput);
        winMainOutputDocument.addItem(formOutput);

        refreshGridPanelInMainWindow();

        validateKeysField(docMargin.getField('out_doc_left_margin').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);
        validateKeysField(docMargin.getField('out_doc_right_margin').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);
        validateKeysField(docMargin.getField('out_doc_top_margin').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);
        validateKeysField(docMargin.getField('out_doc_bottom_margin').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);

        if (typeof listOutputDocs !== "undefined") {
            winMainOutputDocument.open();
            $('#gridOutput .pmui-textcontrol').css({'margin-top': '5px', width: '250px'});
            applyStyleWindowForm(winMainOutputDocument);

            editorTiny.isInitialized = false;
            winMainOutputDocument.footer.html.style.textAlign = 'right';

            gridOutput.dom.toolbar.appendChild(newButtonOutput.getHTML());
            newButtonOutput.defineEvents();
            winMainOutputDocument.defineEvents();
            disableAllItems();
            winMainOutputDocument.getItems()[0].setVisible(true);
        }
    };

    PMDesigner.output.showTiny = function (uid) {
        getItemdOutput = function () {
            var restClientGet = new PMRestClient({
                endpoint: 'output-document/' + uid,
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    dataOutPutDocument = response;
                },
                messageError: "There are problems getting the output documents, please try again.".translate()
            });
            restClientGet.executeRestClient();
        };
        getItemdOutput();
        dataOutPutDocument['externalType'] = true;
        openTinyInMainWindow(dataOutPutDocument);
    };

    PMDesigner.output.create = function () {
        openFormInMainWindow();
    };
}());

(
    function() {
        var iframeRT,
            reportWindow,
            pathSrc;

        PMDesigner.reporttable = function (event) {
            reportWindow = new PMUI.ui.Window({
                id : 'reportTableWindow',
                title: "Report Tables".translate(),
                width: DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT
            });

            pathSrc = window.parent.location;

            iframeRT = new PMIframe ({
                id : 'reporTableIframe',
                src: "http://"+pathSrc.host+"/sys"+WORKSPACE+"/"+LANG+"/"+SKIN+"/pmTables?PRO_UID="+PMDesigner.project.id+"&flagProcessmap=1",
                width:  DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT-36,
                scrolling: 'no',
                frameborder: '0'
            });

            reportWindow.addItem(iframeRT);
            reportWindow.open();
            reportWindow.setBodyPadding(0);
        };

        PMDesigner.reporttable.create = function () {
            pathSrc = window.parent.location;
            reportWindow.clearItems( );
            iframeRT = new PMIframe ({
                id : 'reporTableIframe',
                src: "http://"+pathSrc.host+"/sys"+WORKSPACE+"/"+LANG+"/"+SKIN+"/pmTables/edit?PRO_UID="+PMDesigner.project.id+"&tableType=report&flagProcessmap=1",
                width:  DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT-36,
                scrolling: 'no',
                frameborder: '0'
            });
            reportWindow.addItem(iframeRT);
            reportWindow.open();
            reportWindow.setBodyPadding(0);
        }

    }()
);
(function () {
    var openNewTriggerOptions2, btnCopyImport;

    PMDesigner.trigger = function (event) {

        var message_ErrorWindow = new PMUI.ui.MessageWindow({
            id: "errorMessage",
            width: 490,
            windowMessageType: 'error',
            title: 'Error'.translate(),
            message: "This is an error message.".translate(),
            footerItems: [
                {
                    text: 'OK'.translate(),
                    height: 40,
                    handler: function () {
                        message_ErrorWindow.close();
                    }
                }
            ]
        });

        var listTriggers;
        var flagChanges;

        //GRID List Case Scheduler
        var gridListTrigger = new PMUI.grid.GridPanel({
            id: "listTriggers",
            pageSize: 10,
            width: "96%",
            style: {
                cssClasses: ["mafe-gridPanel"]
            },
            filterPlaceholder: 'Text to Search'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            columns: [
                {
                    id: 'listTriggersButtonShow',
                    title: '',
                    dataType: 'button',
                    searchable: false,
                    buttonLabel: 'Show ID'.translate(),
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-show'
                        ]
                    },
                    id : 'copyuid',
                            onButtonClick: function (row, grid) {
                        var dataRow = row.getData();
                        messageWindow = new PMUI.ui.MessageWindow({
                            id: 'dynaformMessageWindowUID',
                            windowMessageType: 'warning',
                            width: 490,
                            title: 'Success'.translate(),
                            message: dataRow.tri_uid,
                            footerItems: [
                                {
                                    text: 'OK'.translate(),
                                    height: 40,
                                    handler: function () {
                                        messageWindow.close();
                                    }
                                }
                            ]
                        });
                        messageWindow.setTitle("ID".translate());
                        messageWindow.open();
                        messageWindow.showFooter();
                        $(messageWindow.dom.icon).removeClass();
                    }
                },
                {
                    title: 'Title'.translate(),
                    id: "title",
                    dataType: 'string',
                    width: "407px",
                    visible: true,
                    columnData: "tri_title",
                    searcheable: true,
                    sortable: true,
                    alignmentCell: 'left'
                },
                {
                    title: 'Type'.translate(),
                    id: "type",
                    dataType: 'string',
                    width: "225px",
                    visible: true,
                    alignmentCell: 'left',
                    columnData: function (data) {
                        if (data.tri_param != undefined && data.tri_param != "" && data.tri_param != "PRIVATE") {
                            var wizardData = JSON.parse(data.tri_param);
                            wizardData = wizardData.params;
                            return wizardData.LIBRARY_NAME;
                        } else {
                            return "Custom";
                        }
                    },
                    searcheable: true,
                    sortable: true
                },
                {
                    id: "editButton",
                    title: '',
                    dataType: 'button',
                    messageTooltip: "Edit".translate(),
                    buttonLabel: "Edit".translate(),
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        var data = row.getData();
                        var fields;
                        if (data.tri_param == "") {
                            openFormCustom();
                            formEditTriggerCustom.showFooter();

                            var codeMirrorControl, cmControlCopyTrigger;
                            codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;

                            if (codeMirrorControl != undefined) {
                                codeMirrorControl.setSize(600, 200);
                            }
                            formEditTriggerCustom.getItems()[1].setHeight(190);
                            fields = formEditTriggerCustom.getItems()[0];
                            fields.getItems()[0].setValue(data.tri_uid);
                            fields.getItems()[1].setValue(data.tri_title);
                            fields.getItems()[2].setValue(data.tri_description);
                            formEditTriggerCustom.getItems()[1].setValue(data.tri_webbot);

                            codeMirrorControl.setValue(data.tri_webbot);

                        } else {
                            openFormWizardEditMode();
                            var wizardData = JSON.parse(data.tri_param);
                            wizardData = wizardData.params;

                            var lib = wizardData.LIBRARY_CLASS;
                            lib = lib.split('.');
                            lib = lib[1];
                            fields = formEditTriggerWizard.getFields();
                            fields[0].setValue(data.tri_uid);
                            fields[1].setValue(lib);
                            fields[2].setValue(wizardData.PMFUNTION_NAME);
                            fields[3].setValue(wizardData.LIBRARY_NAME + " (" + wizardData.PMFUNTION_LABEL + ")");
                            fields[4].setValue(data.tri_title);
                            fields[5].setValue(data.tri_description);
                            fields[6].setValue(data.tri_webbot);

                            var inputItems = [];
                            var outputItems = [];

                            restClient = new PMRestClient({
                                endpoint: "trigger-wizard/" + lib + "/" + wizardData.PMFUNTION_NAME,
                                typeRequest: 'get',
                                functionSuccess: function (xhr, response) {
                                    if (response.fn_params.input != undefined) {
                                        for (j = 0; j < response.fn_params.input.length; j++) {
                                            var nameInput = response.fn_params.input[j].name;

                                            var inp = new CriteriaField({
                                                id: nameInput,
                                                pmType: "text",
                                                name: nameInput,
                                                label: response.fn_params.input[j].label,
                                                value: wizardData[nameInput].toString(),
                                                controlsWidth: 400,
                                                labelWidth: '27%',
                                                helper: response.fn_params.input[j].description,
                                                required: response.fn_params.input[j].required,
                                                height: 45
                                            });

                                            inputItems.push(inp);
                                        }
                                    }
                                    if (response.fn_params.output != undefined) {
                                        for (k = 0; k < response.fn_params.output.length; k++) {
                                            var nameOutput = response.fn_params.output[k].name;

                                            var out = new CriteriaField({
                                                id: nameOutput,
                                                pmType: "text",
                                                name: nameOutput,
                                                label: response.fn_params.output[k].label,
                                                value: wizardData.TRI_ANSWER.toString(),
                                                controlsWidth: 400,
                                                labelWidth: '27%',
                                                helper: response.fn_params.output[k].description,
                                                required: response.fn_params.output[k].required,
                                                height: 45
                                            });

                                            outputItems.push(out);
                                        }
                                    }
                                    triggerWindow.setTitle(wizardData.LIBRARY_NAME);
                                    if (inputItems.length > 0) {
                                        formEditTriggerWizard.getItems()[1].setVisible(true);
                                        formEditTriggerWizard.getItems()[2].setVisible(true);
                                        formEditTriggerWizard.getItems()[3].setVisible(true);
                                        formEditTriggerWizard.getItems()[3].clearItems();
                                        formEditTriggerWizard.getItems()[3].setItems(inputItems);
                                    } else {
                                        formEditTriggerWizard.getItems()[1].setVisible(false);
                                        formEditTriggerWizard.getItems()[2].setVisible(false);
                                        formEditTriggerWizard.getItems()[3].setVisible(false);
                                        formEditTriggerWizard.getItems()[3].clearItems();
                                    }
                                    if (outputItems.length > 0) {
                                        formEditTriggerWizard.getItems()[4].setVisible(true);
                                        formEditTriggerWizard.getItems()[5].setVisible(true);
                                        formEditTriggerWizard.getItems()[6].setVisible(true);
                                        formEditTriggerWizard.getItems()[6].clearItems();
                                        formEditTriggerWizard.getItems()[6].setItems(outputItems);
                                    } else {
                                        formEditTriggerWizard.getItems()[4].setVisible(false);
                                        formEditTriggerWizard.getItems()[5].setVisible(false);
                                        formEditTriggerWizard.getItems()[6].setVisible(false);
                                        formEditTriggerWizard.getItems()[6].clearItems();
                                    }
                                    labelInputs.dom.labelTextContainer.style.display = "none";
                                    labelOutputs.dom.labelTextContainer.style.display = "none";
                                },
                                messageError: "There are problems getting the triggers wizard list, please try again.".translate()
                            });
                            restClient.executeRestClient();
                        }
                    }
                },
                {
                    id: "deleteButton",
                    title: '',
                    dataType: 'button',
                    messageTooltip: "Delete".translate(),
                    buttonLabel: "Delete".translate(),
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        var questionWindow, dataRow = row.getData();

                        questionWindow = new PMUI.ui.MessageWindow({
                            id: "questionDeleteWindow",
                            title: '',
                            windowMessageType: 'error',
                            width: 490,
                            message: "Do you want to delete this Trigger?".translate(),
                            footerItems: [
                                {
                                    id: 'questionDeleteWindowButtonYes',
                                    text: "Delete".translate(),
                                    height: 40,
                                    visible: true,
                                    handler: function () {
                                        questionWindow.close();
                                        restClient = new PMRestClient({
                                            endpoint: "trigger/" + dataRow.tri_uid,
                                            typeRequest: 'remove',
                                            functionSuccess: function (xhr, response) {
                                                grid.removeItem(row);
                                            },
                                            messageSuccess: "Trigger deleted successfully".translate(),
                                            flashContainer: gridListTrigger
                                        });
                                        restClient.executeRestClient();
                                    }
                                },
                                {
                                    pmType: 'label',
                                    text: "or".translate()
                                },
                                {
                                    id: 'questionDeleteWindowButtonNo',
                                    text: "Cancel".translate(),
                                    buttonType: 'link',
                                    visible: true,
                                    height: 40,
                                    handler: function () {
                                        questionWindow.close();
                                    }
                                }
                            ]
                        });

                        questionWindow.open();
                        questionWindow.dom.titleContainer.style.height = "17px";
                        questionWindow.showFooter();
                    }
                }
            ],
            dataItems: listTriggers,
            onRowClick: function (row, data) {

            }
        });

        getListTrigger = function () {
            var restClient = new PMRestClient({
                endpoint: 'triggers',
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    listTriggers = response;
                    gridListTrigger.setDataItems(listTriggers);
                },
                messageError: "There are problems getting the Triggers list, please try again.".translate()
            });
            restClient.executeRestClient();
        };

        newTriggerOptions = function () {

            var acItemCustom = accordionNewTrigger.getItems()[0];
            var acItemCopy = accordionNewTrigger.getItems()[1];
            acItemCustom.setIconClosed('pmcustomtrigger');
            acItemCustom.setIconExpanded('pmcustomtrigger');
            acItemCopy.setIconClosed('pmcopytrigger');
            acItemCopy.setIconExpanded('pmcopytrigger');

            var itemCustom = jQuery("#custom > .pmui-accordion-item-header > span")[1];
            itemCustom.style.width = "0px";
            var itemCopy = jQuery("#copy > .pmui-accordion-item-header > span")[1];
            itemCopy.style.width = "0px";

            var numOfItems = accordionNewTrigger.getItems();
            if (numOfItems.length <= 2) {
                restClient = new PMRestClient({
                    endpoint: "trigger-wizards",
                    typeRequest: 'get',
                    functionSuccess: function (xhr, response) {
                        for (i = 0; i < response.length; i++) {
                            var functTree = response[i].lib_functions;
                            var newTreeItems = [];
                            for (h = 0; h < functTree.length; h++) {
                                newTreeItems.push({
                                    label: functTree[h].fn_label,
                                    id: functTree[h].fn_name,
                                    onClick: function () {
                                        for (s = 0; s < response.length; s++) {
                                            for (p = 0; p < response[s].lib_functions.length; p++) {
                                                if (response[s].lib_functions[p].fn_name == this.id) {
                                                    var fn = response[s].lib_functions[p].fn_params;
                                                    var fnLabel = response[s].lib_functions[p].fn_label;
                                                    var fnName = response[s].lib_functions[p].fn_name;
                                                    var libName = response[s].lib_name;
                                                    var libTitle = response[s].lib_title;
                                                    p = response[s].lib_functions.length;
                                                    s = response.length - 1;
                                                }
                                            }
                                        }
                                        var inputItems = [];
                                        if (fn.input != undefined) {
                                            for (j = 0; j < fn.input.length; j++) {
                                                var val = "";
                                                if (fn.input[j].type == "array") {
                                                    val = "array()";
                                                }
                                                var inp = new CriteriaField({
                                                    id: fn.input[j].name,
                                                    pmType: "text",
                                                    name: fn.input[j].name,
                                                    label: fn.input[j].label,
                                                    controlsWidth: 400,
                                                    labelWidth: '27%',
                                                    value: val,
                                                    helper: fn.input[j].description,
                                                    required: fn.input[j].required,
                                                    height: 45
                                                });

                                                inputItems.push(inp);
                                            }
                                        }

                                        var outputItems = [];
                                        if (fn.output != undefined) {
                                            for (k = 0; k < fn.output.length; k++) {
                                                var out = new CriteriaField({
                                                    id: fn.output[k].name,
                                                    pmType: "text",
                                                    name: fn.output[k].name,
                                                    label: fn.output[k].label,
                                                    controlsWidth: 400,
                                                    labelWidth: '27%',
                                                    helper: fn.output[k].description,
                                                    required: fn.output[k].required,
                                                    height: 45
                                                });

                                                outputItems.push(out);
                                            }
                                        }
                                        formEditTriggerWizard.reset();
                                        formEditTriggerWizard.setTitle(fnLabel + ' (' + fnName + ')');
                                        formEditTriggerWizard.getItems()[0].getItems()[1].setValue(libName);
                                        formEditTriggerWizard.getItems()[0].getItems()[2].setValue(fnName);
                                        formEditTriggerWizard.getItems()[0].getItems()[3].setValue(libTitle + ' (' + fnLabel + ')');

                                        if (inputItems.length > 0) {
                                            formEditTriggerWizard.getItems()[1].setVisible(true);
                                            formEditTriggerWizard.getItems()[2].setVisible(true);
                                            formEditTriggerWizard.getItems()[3].setVisible(true);
                                            formEditTriggerWizard.getItems()[3].clearItems();
                                            formEditTriggerWizard.getItems()[3].setItems(inputItems);
                                        } else {
                                            formEditTriggerWizard.getItems()[1].setVisible(false);
                                            formEditTriggerWizard.getItems()[2].setVisible(false);
                                            formEditTriggerWizard.getItems()[3].setVisible(false);
                                            formEditTriggerWizard.getItems()[3].clearItems();
                                        }
                                        if (outputItems.length > 0) {
                                            formEditTriggerWizard.getItems()[4].setVisible(true);
                                            formEditTriggerWizard.getItems()[5].setVisible(true);
                                            formEditTriggerWizard.getItems()[6].setVisible(true);
                                            formEditTriggerWizard.getItems()[6].clearItems();
                                            formEditTriggerWizard.getItems()[6].setItems(outputItems);
                                        } else {
                                            formEditTriggerWizard.getItems()[4].setVisible(false);
                                            formEditTriggerWizard.getItems()[5].setVisible(false);
                                            formEditTriggerWizard.getItems()[6].setVisible(false);
                                            formEditTriggerWizard.getItems()[6].clearItems();
                                        }
                                        openFormWizard();
                                        $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                                        triggerWindow.setTitle(libTitle);
                                    }
                                });
                            }
                            labelInputs.dom.labelTextContainer.style.display = "none";
                            labelOutputs.dom.labelTextContainer.style.display = "none";
                            allTreesItems[i] = newTreeItems;
                            //Accordion
                            var newAccordionItem = [];
                            newAccordionItem = {
                                iconClass: response[i].lib_name,
                                id: response[i].lib_name,
                                title: response[i].lib_title,
                                height: 'auto'
                            };
                            accordionNewTrigger.addItem(newAccordionItem);
                        }
                    },
                    messageError: "There are problems getting the triggers wizard list, please try again.".translate()
                });
                restClient.executeRestClient();
            }

            openNewTriggerOptions();
            var accordion = triggerWindow.getItems()[5].getItems();
            accordion[0].setVisible(false);
            accordion[1].setVisible(false);
            for (i = 0; i < accordion.length; i++) {
                accordion[i].header.html.style.backgroundColor = "#FFFFFF";
            }
        };

        var allTreesItems = [];
        getListTrigger();

        //Button NEW Trigger
        buttonNew = new PMUI.ui.Button({
            id: 'newTriggerButton',
            text: "Create".translate(),
            height: "36px",
            width: 100,
            handler: function (event) {
                openNewTriggerOptions2();
//                btnCopyImport.style.addProperties({'line-height': 'initial'});
            },
            style: {
                cssClasses: [
                    'mafe-button-create'
                ]
            }
        });

        openNewTriggerOptions2 = function () {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.getItems()[6].setVisible(true);
        }

        var openListTriggers = function ()
        {
            triggerWindow.getItems()[0].setVisible(true);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.getItems()[6].setVisible(false);
            triggerWindow.setTitle("Triggers".translate());
            triggerWindow.hideFooter();
            $(triggerWindow.body).removeClass("pmui-background");
        };

        var openFormCustom = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(true);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.getItems()[6].setVisible(false);
            triggerWindow.footer.getItems()[0].setVisible(false); //button Edit Source Code
            triggerWindow.footer.getItems()[1].setVisible(true); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //button Copy/Import
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(true); //button Cancel
            triggerWindow.footer.getItems()[5].setVisible(true); //button Cancel

            triggerWindow.setTitle("Custom Trigger".translate());
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");
            formEditTriggerCustom.setFocus();

            $('.CodeMirror.cm-s-default')[0].style.border = "1px solid #c0c0c0";
            if (formEditTriggerCustom.getItems()[0].getItems()[1].visible == false) {
                var fields = formEditTriggerCustom.getItems()[0];
                fields.getItems()[1].setVisible(true);
                fields.getItems()[2].setVisible(true);
                formEditTriggerCustom.footer.getItems()[1].setVisible(true);
            }
            formEditTriggerCustom.getFields()[4].dom.labelTextContainer.style.marginLeft = "10px";
            formEditTriggerCustom.setAlignmentButtons('left');
        };

        var openFormWizard = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(true);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.getItems()[6].setVisible(false);
            triggerWindow.footer.getItems()[0].setVisible(false); //button Edit Source Code
            triggerWindow.footer.getItems()[1].setVisible(true); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //button Copy/Import
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(true); //button Cancel
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");
            formEditTriggerWizard.setFocus();
        };

        var openFormWizardEditMode = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(true);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.getItems()[6].setVisible(false);
            triggerWindow.footer.getItems()[0].setVisible(true); //button Edit Source Code
            triggerWindow.footer.getItems()[1].setVisible(true); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //button Copy/Import
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(true); //button Cancel
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");
            formEditTriggerWizard.setFocus();
        };

        var openFormCopy = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(true);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.getItems()[6].setVisible(false);
            triggerWindow.setTitle("Copy Trigger".translate());
            triggerWindow.footer.getItems()[0].setVisible(false); //button Edit Source Code
            triggerWindow.footer.getItems()[1].setVisible(false); //button Save
            triggerWindow.footer.getItems()[2].setVisible(true); //button Copy/Import
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(true); //button Cancel
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");
            formCopyTrigger.setFocus();
        };

        var openFormEditCode = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(true);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.getItems()[6].setVisible(false);
            triggerWindow.setTitle("Editor".translate());
            triggerWindow.footer.getItems()[0].setVisible(false); //button Edit Source Code
            triggerWindow.footer.getItems()[1].setVisible(false); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //button Copy/Import
            triggerWindow.footer.getItems()[3].setVisible(true); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(true); //button Cancel
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");

        };

        var openNewTriggerOptions = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(true);
            triggerWindow.getItems()[6].setVisible(false);
            triggerWindow.setTitle("Create New Trigger".translate());
            triggerWindow.footer.getItems()[0].setVisible(false); //button Edit Source Code
            triggerWindow.footer.getItems()[1].setVisible(false); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //button Copy/Import
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(false); //button Cancel
            triggerWindow.footer.getItems()[5].setVisible(true); //button Cancel
            triggerWindow.showFooter();
            $(triggerWindow.body).removeClass("pmui-background");
        };

        //obtaning the list of process to show it on the copy/import of a trigger dropdown
        var listProjects = [];
        getListProjects = function () {
            restClient = new PMRestClient({
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    listProjects = [];
                    formCopyTrigger.getFields()[0].clearOptions();
                    listProjects[0] = {
                        label: "- Select a process -".translate(),
                        value: "",
                        disabled: true,
                        selected: true
                    };
                    for (i = 0; i < response.length; i++) {
                        listProjects.push({
                            label: response[i].prj_name,
                            value: response[i].prj_uid
                        });
                    }
                    formCopyTrigger.getFields()[0].setOptions(listProjects);
                },
                messageError: "There are problems getting the list of projects.".translate()
            });
            restClient.setBaseEndPoint('projects');
            restClient.executeRestClient();
        };

        //form Copy/Import Trigger
        var triggerSelectedData;
        var formCopyTrigger = new PMUI.form.Form({
            id: "formCopyTriggers",
            border: true,
            width: '890px',
            height: 'auto',
            title: "",
            visibleHeader: false,
            items: [
                {
                    pmType: 'dropdown',
                    id: "processField",
                    label: 'Process'.translate(),
                    name: 'prj_uid',
                    required: true,
                    controlsWidth: 300,
                    value: "",
                    options: listProjects,
                    onChange: function (newValue, prevValue) {
                        var formFields = formCopyTrigger.getFields();
                        formFields[2].setValue("");
                        formFields[3].setValue("");
                        formFields[4].controls[0].cm.setValue("");

                        var uidProj = newValue, myForm = this.form;

                        //obtaning the Trigger list of the process SELECTED
                        restClient = new PMRestClient({
                            typeRequest: 'get',
                            functionSuccess: function (xhr, response) {
                                triggerSelectedData = response;
                                var listTriggersCopy = [];
                                listTriggersCopy[0] = {
                                    label: "- Select a trigger -".translate(),
                                    value: "",
                                    disabled: true,
                                    selected: true
                                };

                                for (i = 0; i < response.length; i++) {
                                    listTriggersCopy.push({
                                        label: response[i].tri_title,
                                        value: response[i].tri_uid
                                    });
                                }
                                formFields[1].setOptions(listTriggersCopy);
                            },
                            messageError: "There are problems getting the list of triggers.".translate()
                        });
                        restClient.setBaseEndPoint("project/" + uidProj + "/triggers");
                        restClient.executeRestClient();
                    }
                },
                {
                    pmType: 'dropdown',
                    id: "triggerField",
                    label: 'Trigger'.translate(),
                    name: 'tri_uid',
                    required: true,
                    controlsWidth: 300,
                    value: "",
                    options: [],
                    onChange: function (newValue, prevValue) {
                        var formFields = formCopyTrigger.getFields();
                        formFields[2].setValue("");
                        formFields[3].setValue("");
                        formFields[4].controls[0].cm.setValue("");

                        var uidTri = newValue;

                        for (i = 0; i < triggerSelectedData.length; i++) {
                            if (triggerSelectedData[i].tri_uid == uidTri) {
                                formFields[2].setValue(triggerSelectedData[i].tri_title);
                                formFields[3].setValue(triggerSelectedData[i].tri_description);
                                formFields[4].controls[0].cm.setValue(triggerSelectedData[i].tri_webbot);
                            }
                        }
                    }
                },
                {
                    pmType: "text",
                    id: "triTitle",
                    label: "Title of the new trigger".translate(),
                    placeholder: "Insert the title of the new trigger".translate(),
                    name: "tri_title",
                    required: true,
                    valueType: 'string',
                    controlsWidth: 300
                },
                {
                    pmType: "textarea",
                    id: "triDescription",
                    rows: 80,
                    name: 'tri_description',
                    label: "Description of the new trigger".translate(),
                    valueType: 'string',
                    controlsWidth: 652,
                    style: {cssClasses: ['mafe-textarea-resize']}
                }
            ]
        });
        var codMirr = new PMCodeMirrorField();
        codMirr.setLabel("Code".translate());
        codMirr.setID("Code");
        codMirr.setName('tri_webbot');
        formCopyTrigger.addItem(codMirr);

        //Form to Edit the trigger with the WIZARD (we used a Form because we need buttons to save the changes)
        var formEditTriggerWizard = new PMUI.form.Form({
            id: "formEditTriggerWizard",
            border: true,
            visibleHeader: false,
            name: "formwizard",
            width: 926,
            title: "New Trigger".translate(),
            items: [
                {
                    id: "panelDetailsWizard",
                    pmType: "panel",
                    layout: 'vbox',
                    fieldset: false,
                    height: 'auto',
                    legend: "DETAILS".translate(),
                    items: [
                        {
                            id: "uid",
                            pmType: "text",
                            label: "ID".translate(),
                            value: "",
                            name: "uid",
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: "libName",
                            pmType: "text",
                            label: "",
                            value: "",
                            name: "libName",
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: "fnName",
                            pmType: "text",
                            label: "",
                            value: "",
                            name: "fnName",
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: "type",
                            pmType: "text",
                            label: "Type".translate(),
                            value: "WIZARD",
                            controlsWidth: 450,
                            labelWidth: '27%',
                            readOnly: true,
                            name: "type",
                            valueType: 'string'
                        },
                        {
                            id: "titleDetailsWiz",
                            pmType: "text",
                            label: "Title".translate(),
                            value: "",
                            controlsWidth: 450,
                            labelWidth: '27%',
                            name: "titleDetails",
                            valueType: 'string',
                            required: true
                        },
                        {
                            id: "descriptionDetailsWiz",
                            pmType: "textarea",
                            label: "Description".translate(),
                            value: "",
                            rows: 90,
                            width: '300px',
                            controlsWidth: 450,
                            labelWidth: '27%',
                            name: "descriptionDetails",
                            valueType: 'string',
                            style: {cssClasses: ['mafe-textarea-resize']}
                        },
                        {
                            id: "webbot",
                            pmType: "text",
                            label: "Webbot".translate(),
                            value: "",
                            name: "webbot",
                            controlsWidth: 300,
                            labelWidth: '27%',
                            visible: false,
                            valueType: 'string'
                        }
                    ]
                }
            ]
        });

        //adding a separator Inputs line
        var sepInputs = new PMSeparatorLineField({
            controlHeight: '1px',
            controlColor: "#CDCDCD",
            controlsWidth: "890px",
            marginLeft: '0%'
        });
        formEditTriggerWizard.addItem(sepInputs);

        //adding a label Inputs
        var labelInputs = new PMLabelField({
            text: "PARAMETERS".translate(),
            textMode: "plain",
            style: {
                cssProperties: {
                    color: "#AEAEAE",
                    'font-weight': 'bold'
                }
            },
            controlsWidth: 885
        });
        formEditTriggerWizard.addItem(labelInputs);

        //adding the Inputs Items (PARAMETERS) Panel
        var paramPanel = new PMUI.form.FormPanel({
            id: "panelParametersWizard",
            layout: 'vbox',
            fieldset: false,
            height: 'auto',
            visible: false,
            legend: "__PARAMETERS__".translate(),
            items: []
        });
        formEditTriggerWizard.addItem(paramPanel);

        //adding a separator Outputs line
        var sepOutputs = new PMSeparatorLineField({
            controlHeight: 1,
            controlColor: "#CDCDCD",
            controlsWidth: "890px",
            marginLeft: '0%'
        });
        formEditTriggerWizard.addItem(sepOutputs);

        //adding a label Outputs
        var labelOutputs = new PMLabelField({
            text: "RETURN VALUE".translate(),
            textMode: "plain",
            style: {
                cssProperties: {
                    color: "#AEAEAE",
                    'font-weight': 'bold'
                }
            },
            controlsWidth: 885
        });

        formEditTriggerWizard.addItem(labelOutputs);

        //adding the Output Items (Returns) Panel
        var returnPanel = new PMUI.form.FormPanel({
            id: "panelReturnValWizard",
            layout: 'vbox',
            fieldset: false,
            height: 'auto',
            visible: false,
            legend: "RETURN VALUE".translate(),
            items: []
        });
        formEditTriggerWizard.addItem(returnPanel);

        var parameterItems, returnItems;

        //treePanel New Trigger PMF
        var treeNewTrigger = new PMUI.panel.TreePanel({
            id: "treeNewTrigger",
            width: 'auto',
            height: 'auto',
            style: {
                cssClasses: ['pmtrigger'],
                cssProperties: {
                    'margin-top': '5px',
                    'margin-bottom': '4px'
                }
            },
            items: []
        });

        //Acordion Panel New Triggers Options
        var accordionNewTrigger = new PMUI.panel.AccordionPanel({
            id: "accordionNewTrigger",
            width: 885,
            height: 'auto',
            borderWidth: "0px",
            hiddenTitle: true,
            style: {
                cssProperties: {
                    'margin-left': '30px'
                }
            },
            items: [
                {
                    iconClass: "",
                    id: 'custom',
                    title: "Custom Trigger".translate(),
                    height: '26px',
                    body: "",
                    style: {
                        cssProperties: {
                            "background-color": "#FDFDFD"
                        }
                    }
                },
                {
                    iconClass: "",
                    id: 'copy',
                    title: "Copy Trigger".translate(),
                    height: '26px',
                    body: "",
                    style: {
                        cssProperties: {
                            "background-color": "#FDFDFD"
                        }
                    }
                }
            ],
            listeners: {
                select: function (obj, event) {

                    if (obj.id == "custom") {
                        openFormCustom();
                        $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                        formEditTriggerCustom.showFooter();

                        var codeMirrorControl, cmControlCopyTrigger;
                        codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;

                        if (codeMirrorControl != undefined) {
                            codeMirrorControl.setSize(595, 166); //CodeMirror Size
                        }
                        formEditTriggerCustom.getItems()[1].setHeight(180);

                        formEditTriggerCustom.reset();

                        fields = formEditTriggerCustom.getItems()[0];
                        fields.getItems()[0].setValue("");
                        fields.getItems()[1].setValue("");
                        fields.getItems()[2].setValue("");
                        formEditTriggerCustom.getItems()[1].setValue("");
                        formEditTriggerCustom.getItems()[1].controls[0].cm.setValue("");

                    } else if (obj.id == "copy") {

                        getListProjects();
                        openFormCopy();
                        $($('#Code .CodeMirror.cm-s-default.CodeMirror-wrap')[1]).css({'border': '1px solid #c0c0c0'});
                        $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                        formCopyTrigger.getItems()[4].setHeight(160);

                        var cmControlCopyTrigger = formCopyTrigger.getFields()[4].controls[0].cm;
                        if (cmControlCopyTrigger != undefined) {
                            cmControlCopyTrigger.setSize(650, 140); //CodeMirror in formCopyTrigger Size
                        }
                    } else {
                        if (treeNewTrigger.getItems() == "" || treeNewTrigger.id != obj.id)
                        {
                            var acItems = accordionNewTrigger.getItems();
                            var accordionActualItem = accordionNewTrigger.getItem(obj.id);

                            for (i = 0; i < acItems.length; i++) {
                                if (acItems[i].id == accordionActualItem.id) {
                                    var positionActualAcItem = i - 2;
                                }
                            }

                            treeNewTrigger.setItems(allTreesItems[positionActualAcItem]);
                            treeNewTrigger.setID(obj.id);

                            accordionActualItem.setBody(treeNewTrigger);
                            treeNewTrigger.defineEvents();
                            applyStyleTreePanel(treeNewTrigger, false);
                        }
                    }
                }
            }
        });

        var updateCustom = function (dataToSend, triggerUid) {
            var restClient = new PMRestClient({
                endpoint: "trigger/" + triggerUid,
                typeRequest: 'update',
                data: dataToSend,
                functionSuccess: function (xhr, response) {
                    formEditTriggerCustom.setDirty(false);
                    getListTrigger();
                    openListTriggers();
                    $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                },
                functionFailure: function (xhr, response) {
                    var msgPost = new PMUI.ui.MessageWindow({
                        id: "messageUpdateWindow",
                        title: "",
                        windowMessageType: 'default',
                        message: response.error.message,
                        showCloseButton: true,
                        width: 490,
                        footerItems: [
                            {
                                text: 'OK'.translate(),
                                height: 40,
                                handler: function () {
                                    msgPost.close();
                                }
                            }
                        ]
                    });
                    msgPost.open();
                    msgPost.showFooter();
                },
                messageSuccess: "Trigger updated successfully".translate(),
                flashContainer: gridListTrigger
            });
            restClient.executeRestClient();
        };

        //Buttons Save and Cancel for the 'formEditTriggerCustom' and 'formEditTriggerWizard'
        var buttonSave = new PMUI.ui.Button({
            id: 'saveTriggerButton',
            text: "Save".translate(),
            handler: function (event) {
                var formcustom = triggerWindow.getItems()[1];
                var formwizard = triggerWindow.getItems()[2];

                if (formcustom.isVisible() == true) {
                    if (formEditTriggerCustom.isValid( )) {
                        var formTriggerData = formEditTriggerCustom.getData();

                        var dataToSend = {
                            tri_title: formTriggerData.title,
                            tri_description: formTriggerData.description,
                            tri_webbot: formTriggerData.code,
                            tri_param: ""
                        };

                        if (formTriggerData.uid === "") {
                            var restClient = new PMRestClient({
                                endpoint: 'trigger',
                                typeRequest: 'post',
                                data: dataToSend,
                                functionSuccess: function (xhr, response) {
                                    formEditTriggerCustom.setDirty(false);
                                    getListTrigger();
                                    formEditTriggerCustom.getItems()[0].getItems()[0].setValue(response.tri_uid);
                                    openListTriggers();
                                    $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                                },
                                functionFailure: function (xhr, response) {
                                    var msgPost = new PMUI.ui.MessageWindow({
                                        id: "messagePostWindow",
                                        title: "",
                                        windowMessageType: 'default',
                                        message: response.error.message,
                                        showCloseButton: true,
                                        width: 490,
                                        footerItems: [
                                            {
                                                text: 'OK'.translate(),
                                                height: 40,
                                                handler: function () {
                                                    msgPost.close();
                                                }
                                            }
                                        ]
                                    });
                                    msgPost.open();
                                    msgPost.showFooter();
                                },
                                messageSuccess: "New Trigger saved successfully".translate(),
                                flashContainer: gridListTrigger
                            });
                            restClient.executeRestClient();
                        } else {
                            if (formTriggerData.wizzard != "") {
                                if (formEditTriggerCustom.isDirty()) {
                                    var message_window = new PMUI.ui.MessageWindow({
                                        id: "wizzardToCustomTriggerWin",
                                        windowMessageType: 'success',
                                        title: 'Confirm'.translate(),
                                        width: 490,
                                        message: 'Do you want to save the changes? This Trigger will be saved like a custom Trigger.'.translate(),
                                        footerItems: [
                                            {
                                                text: "Save".translate(),
                                                handler: function () {
                                                    message_window.close();
                                                    updateCustom(dataToSend, formTriggerData.uid);
                                                },
                                                height: 40
                                            },
                                            {
                                                pmType: 'label',
                                                text: "or".translate()
                                            },
                                            {
                                                text: "Cancel".translate(),
                                                buttonType: 'link',
                                                handler: function () {
                                                    message_window.close();
                                                    openFormWizardEditMode();
                                                    $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                                                    formEditTriggerCustom.reset();
                                                }
                                            }
                                        ]

                                    });
                                    message_window.open();
                                    message_window.showFooter();
                                } else {
                                    openListTriggers();
                                    $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                                }
                            } else {
                                updateCustom(dataToSend, formTriggerData.uid);
                            }
                        }
                    }
                } else if (formwizard.isVisible() == true) {
                    if (formEditTriggerWizard.isValid( )) {
                        var formTriggerData = formEditTriggerWizard.getData();

                        var inputFields = formEditTriggerWizard.getItems()[3];
                        var inputV = {};
                        for (i = 0; i < inputFields.getItems().length; i++) {
                            inputV[inputFields.getItems()[i].name] = inputFields.getItems()[i].value;
                        }

                        var outputFields = formEditTriggerWizard.getItems()[6];
                        var outputV = {};
                        for (j = 0; j < outputFields.getItems().length; j++) {
                            outputV[outputFields.getItems()[j].name] = outputFields.getItems()[j].value;
                        }

                        var dataToSend = {
                            tri_title: formTriggerData.titleDetails,
                            tri_description: formTriggerData.descriptionDetails,
                            tri_type: "SCRIPT",
                            tri_params: {
                                input: inputV,
                                output: outputV
                            }
                        };

                        if (formTriggerData.uid === "") {
                            var restClient = new PMRestClient({
                                endpoint: 'trigger-wizard/' + formTriggerData.libName + '/' + formTriggerData.fnName,
                                typeRequest: 'post',
                                data: dataToSend,
                                functionSuccess: function (xhr, response) {
                                    formEditTriggerWizard.setDirty(false);
                                    getListTrigger();
                                    formEditTriggerWizard.getFields()[0].setValue(response.tri_uid);
                                    openListTriggers();
                                },
                                functionFailure: function (xhr, response) {
                                    var msgPost = new PMUI.ui.MessageWindow({
                                        id: "messagePostWizardWindow",
                                        windowMessageType: 'default',
                                        title: "",
                                        message: response.error.message,
                                        showCloseButton: true,
                                        width: 490,
                                        footerItems: [
                                            {
                                                text: 'OK'.translate(),
                                                height: 40,
                                                handler: function () {
                                                    msgPost.close();
                                                }
                                            }
                                        ]
                                    });
                                    msgPost.open();
                                    msgPost.showFooter();
                                },
                                messageSuccess: "New Trigger saved successfully".translate(),
                                flashContainer: gridListTrigger
                            });
                            restClient.executeRestClient();
                        } else {
                            var restClient = new PMRestClient({
                                endpoint: 'trigger-wizard/' + formTriggerData.libName + '/' + formTriggerData.fnName + '/' + formTriggerData.uid,
                                typeRequest: 'update',
                                data: dataToSend,
                                functionSuccess: function (xhr, response) {
                                    formEditTriggerWizard.setDirty(false);
                                    getListTrigger();
                                    openListTriggers();
                                },
                                functionFailure: function (xhr, response) {
                                    var msgPost = new PMUI.ui.MessageWindow({
                                        id: "messageUpdateWizardWindow",
                                        windowMessageType: 'default',
                                        title: "",
                                        message: response.error.message,
                                        showCloseButton: true,
                                        width: 490,
                                        footerItems: [
                                            {
                                                text: 'OK'.translate(),
                                                height: 40,
                                                handler: function () {
                                                    msgPost.close();
                                                }
                                            }
                                        ]
                                    });
                                    msgPost.open();
                                    msgPost.showFooter();
                                },
                                messageSuccess: "Trigger updated successfully".translate(),
                                flashContainer: gridListTrigger
                            });
                            restClient.executeRestClient();
                        }
                    }
                }
            },
            buttonType: 'success',
            height: 31
        });

        //Buttons Save and Cancel for the 'formEditTriggerCustom' and 'formEditTriggerWizard'
        var copyButton = new PMUI.ui.Button({
            id: 'copyAndSaveButton',
            text: "Copy Trigger".translate(),
            buttonType: 'success',
            height: 31,
            handler: function (event) {
                if (formCopyTrigger.isValid( )) {
                    formCopyTrigger.setDirty(false);

                    var data = formCopyTrigger.getData();

                    var dataToSend = {
                        tri_title: data.tri_title,
                        tri_description: data.tri_description,
                        tri_webbot: data.tri_webbot,
                        tri_param: ""
                    };

                    var restClient = new PMRestClient({
                        endpoint: 'trigger',
                        typeRequest: 'post',
                        data: dataToSend,
                        functionSuccess: function (xhr, response) {
                            getListTrigger();
                            formCopyTrigger.reset();
                            openListTriggers();
                        },
                        functionFailure: function (xhr, response) {
                            var msgPost = new PMUI.ui.MessageWindow({
                                id: "messageCopyTriggerWindow",
                                windowMessageType: 'default',
                                title: "",
                                message: response.error.message,
                                showCloseButton: true,
                                width: 490,
                                footerItems: [
                                    {
                                        text: "OK".translate(),
                                        height: 40,
                                        handler: function () {
                                            msgPost.close();
                                        }
                                    }
                                ]
                            });
                            msgPost.open();
                            msgPost.showFooter();
                        },
                        messageSuccess: "New Trigger saved successfully".translate(),
                        flashContainer: gridListTrigger
                    });
                    restClient.executeRestClient();
                }
            }
        });

        //Buttons Apply for the Code Editor
        var applyButton = new PMUI.ui.Button({
            id: 'applyButton',
            text: "Apply".translate(),
            buttonType: 'success',
            height: 31,
            handler: function (event) {
                if (formEditCode.isValid( )) {

                    openFormCustom();
                    formEditCode.setDirty(false);

                    var editCode = formEditCode.getItems()[0].controls[0].cm;
                    editCodeValue = editCode.getValue();

                    var codeMirrorCustom = formEditTriggerCustom.getItems()[1].controls[0].cm;

                    if (codeMirrorCustom != undefined) {
                        codeMirrorCustom.setSize(595, 166); //CodeMirror Size
                    }
                    codeMirrorCustom.setValue(editCodeValue);
                    formEditTriggerCustom.getItems()[1].setValue(editCodeValue);

                    editCode.setValue("");
                    editCodeValue = "";

                    formEditCode.getItems()[0].setValue("");
                }
            }
        });

        //Button Edit Source Code (this is showed just when the Trigger Wizzard is opened in edition mode)
        var btnEditSourceCode = new PMUI.ui.Button({
            id: 'btnEditSourceCode',
            text: "Edit Source Code".translate(),
            buttonType: 'success',
            height: 31,
            handler: function (event) {

                var data = formEditTriggerWizard.getData();
                var fields;
                openFormCustom();
                formEditTriggerCustom.showFooter();

                var codeMirrorControl;
                codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;

                if (codeMirrorControl != undefined) {
                    codeMirrorControl.setSize(650, 300); //CodeMirror Size
                }
                formEditTriggerCustom.getItems()[1].setHeight(180);

                fields = formEditTriggerCustom.getItems()[0];
                fields.getItems()[0].setValue(data.uid);
                fields.getItems()[1].setValue(data.titleDetails);
                fields.getItems()[2].setValue(data.descriptionDetails);
                fields.getItems()[3].setValue(data.webbot);
                formEditTriggerCustom.getItems()[1].setValue(data.webbot);

                codeMirrorControl.setValue(data.webbot);

                formEditTriggerCustom.getItems()[1].setHeight(300);
                fields.getItems()[1].setVisible(false);
                fields.getItems()[2].setVisible(false);
                formEditTriggerCustom.footer.getItems()[1].setVisible(false);
                formEditTriggerCustom.footer.getItems()[0].style.addProperties({'margin-right': "10px"});
                formEditTriggerCustom.footer.style.addProperties({width: '880px'});
            }
        });

        var buttonCancel = new PMUI.ui.Button({
            id: 'cancelTriggerButton',
            text: "Cancel".translate(),
            buttonType: 'link',
            height: 31,
            handler: function (event) {
                var formcustom = triggerWindow.getItems()[1];
                var formwizard = triggerWindow.getItems()[2];
                var formcopy = triggerWindow.getItems()[3];
                var formeditcode = triggerWindow.getItems()[4];
                var accordionnewtrigger = triggerWindow.getItems()[5];
                var flag = false;

                if (formcustom.isVisible() == true) {
                    flag = formEditTriggerCustom.isDirty();
                } else if (formwizard.isVisible() == true) {
                    flag = formEditTriggerWizard.isDirty();
                } else if (formcopy.isVisible() == true) {
                    flag = formCopyTrigger.isDirty();
                } else if (formeditcode.isVisible() == true) {
                    flag = formeditcode.isDirty();
                }

                if (flag == true) {
                    var message_window = new PMUI.ui.MessageWindow({
                        id: "cancelMessageTriggers",
                        title: 'Confirm'.translate(),
                        windowMessageType: 'warning',
                        width: 490,
                        message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                        footerItems: [
                            {
                                text: "Yes".translate(),
                                height: 40,
                                handler: function () {
                                    var formcustom = triggerWindow.getItems()[1];
                                    var formwizard = triggerWindow.getItems()[2];
                                    var formcopy = triggerWindow.getItems()[3];
                                    var formeditcode = triggerWindow.getItems()[4];

                                    if (formcustom.isVisible() == true) {
                                        var uidInForm = formEditTriggerCustom.getFields()[0].getValue();
                                        formEditTriggerCustom.reset();
                                        openListTriggers();
                                    } else if (formwizard.isVisible() == true) {
                                        var uidInForm = formEditTriggerWizard.getFields()[0].getValue();
                                        formEditTriggerWizard.reset();
                                        openListTriggers();
                                    } else if (formcopy.isVisible() == true) {
                                        formCopyTrigger.reset();
                                        openListTriggers();
                                    } else if (formeditcode.isVisible() == true) {
                                        formeditcode.reset();
                                        openFormCustom();
                                    }
                                    message_window.close();
                                }
                            },
                            {
                                pmType: 'label',
                                text: "or".translate()
                            },
                            {
                                text: "No".translate(),
                                height: 40,
                                buttonType: 'link',
                                handler: function () {
                                    message_window.close();
                                }
                            }
                        ]
                    });
                    message_window.open();
                    message_window.showFooter();
                } else {
                    var formcustom = triggerWindow.getItems()[1];
                    var formwizard = triggerWindow.getItems()[2];
                    var formcopy = triggerWindow.getItems()[3];
                    var formeditcode = triggerWindow.getItems()[4];
                    var accordionnewtrigger = triggerWindow.getItems()[5];

                    if (formcustom.isVisible() == true) {
                        var uidInForm = formEditTriggerCustom.getFields()[0].getValue();
                        formEditTriggerCustom.reset();
                        openListTriggers();
                    } else if (formwizard.isVisible() == true) {
                        var uidInForm = formEditTriggerWizard.getFields()[0].getValue();
                        formEditTriggerWizard.reset();
                        openListTriggers();
                    } else if (formcopy.isVisible() == true) {
                        formCopyTrigger.reset();
                        openListTriggers();
                    } else if (formeditcode.isVisible() == true) {
                        formeditcode.reset();
                        openFormCustom();
                    } else if (accordionnewtrigger.isVisible() == true) {
                        openListTriggers();
                    }
                }
            }
        });

        var editCode;

        //Form to Edit the Custom trigger (we used a Form because we need buttons to save the changes)
        var formEditTriggerCustom = new PMUI.form.Form({
            id: "formEditTriggerCustom",
            border: true,
            visibleHeader: false,
            width: '929px',
            height: "420px",
            name: "formcustom",
            title: "Custom Trigger".translate(),
            items: [
                {
                    id: "panelDetailsCustom",
                    pmType: "panel",
                    layout: 'vbox',
                    fieldset: false,
                    height: '350px',
                    legend: "DETAILS".translate(),
                    items: [
                        {
                            id: "uid",
                            pmType: "text",
                            label: "ID".translate(),
                            value: "",
                            name: "uid",
                            readOnly: true,
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: "title",
                            pmType: "text",
                            label: "Title".translate(),
                            value: "",
                            required: true,
                            name: "title",
                            valueType: 'string'
                        },
                        {
                            id: "description",
                            pmType: "textarea",
                            rows: 70,
                            name: 'description',
                            label: "Description".translate(),
                            valueType: 'string',
                            style: {cssClasses: ['mafe-textarea-resize']}
                        },
                        {
                            id: "wizzard",
                            pmType: "text",
                            label: "Wizzard".translate(),
                            value: "",
                            name: "wizzard",
                            readOnly: true,
                            visible: false,
                            valueType: 'string'
                        }
                    ]
                }
            ],
            buttons: [
                {
                    text: "@@",
                    id: "selectPickerButton",
                    handler: function () {
                        var picker = new VariablePicker();
                        picker.open({
                            success: function (variable) {
                                var codeMirror = formEditTriggerCustom.getItems()[1].controls[0].cm;
                                codeMirror.replaceSelection(variable);
                            }
                        });
                    },
                    style: {
                        cssProperties: {
                            "margin-left": '208px',
                            "background": "rgb(45, 62, 80)",
                            "border": "1px solid rgb(45, 62, 80)"
                        }
                    }
                }, {
                    text: "Open Editor".translate(),
                    id: "openEditorButton",
                    handler: function () {
                        openFormEditCode();
                        formEditCode.showFooter();

                        var codeMirrorCustom = formEditTriggerCustom.getItems()[1].controls[0].cm;
                        var value = codeMirrorCustom.getValue();

                        var codeMirrorCopy = formEditCode.getItems()[0].controls[0].cm;

                        if (codeMirrorCopy != undefined) {
                            codeMirrorCopy.setSize(825, 335); //CodeMirror Size
                            $($('#codeEditor .CodeMirror.cm-s-default.CodeMirror-wrap')[0]).css({'border': '1px solid #c0c0c0'});

                        }

                        formEditCode.getItems()[0].setHeight(325);

                        codeMirrorCopy.setValue(value);
                        formEditCode.getItems()[0].setValue(value);
                        formEditCode.setDirty(false);
                    },
                    style: {
                        cssProperties: {
                            "margin-right": 2
                        }
                    }
                }
            ]
        });
        cd = new PMCodeMirrorField({
            labelWidth: '23%'
        });
        cd.setLabel("Code".translate());
        formEditTriggerCustom.addItem(cd);
        formEditTriggerCustom.getItems()[1].setName('code');
        formEditTriggerCustom.getItems()[1].setID('code');

        var formEditCode = new PMUI.form.Form({
            id: "formEditCode",
            border: true,
            visibleHeader: false,
            width: '925px',
            name: "formeditcode",
            title: "Editor".translate(),
            items: [],
            buttons: [
                {
                    text: "@@",
                    id: "selectPickerButton",
                    handler: function () {
                        var picker = new VariablePicker();
                        picker.open({
                            success: function (variable) {
                                var codeMirror = formEditCode.getItems()[0].controls[0].cm;
                                codeMirror.replaceSelection(variable);
                            }
                        });
                    },
                    style: {
                        cssProperties: {
                            "margin-left": '229px',
                            "background": "rgb(45, 62, 80)",
                            "border": "1px solid rgb(45, 62, 80)"
                        }
                    }
                }
            ]
        });
        editCode = new PMCodeMirrorField({
            labelWidth: '8%'
        });
        editCode.setLabel("Code".translate());
        formEditCode.addItem(editCode);
        formEditCode.getItems()[0].setName('codeEditor');
        formEditCode.getItems()[0].setID('codeEditor');

        var btnCustom = new PMUI.ui.Button({
            id: 'btnCustom',
            text: "Custom Trigger".translate(),
            handler: function () {
                openFormCustom();
                $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                formEditTriggerCustom.showFooter();


                formEditTriggerCustom.showFooter();

                var codeMirrorControl, cmControlCopyTrigger;
                codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;

                if (codeMirrorControl != undefined) {
                    codeMirrorControl.setSize(600, 200); //CodeMirror Size
                }
                formEditTriggerCustom.getItems()[1].setHeight(190);

                formEditTriggerCustom.reset();

                fields = formEditTriggerCustom.getItems()[0];
                fields.getItems()[0].setValue("");
                fields.getItems()[1].setValue("");
                fields.getItems()[2].setValue("");
                formEditTriggerCustom.getItems()[1].setValue("");
                formEditTriggerCustom.getItems()[1].controls[0].cm.setValue("");


            },
            width: 220,
            height: 115,
            style: {
                cssProperties: {
                    "background-color": "#474747",
                    'border-radius': "10px",
                    'font-size': '20px',
                    'margin-left': '135px'
                }
            }
        });

        btnCopyImport = new PMUI.ui.Button({
            id: 'btnCopyImport',
            text: 'Copy Trigger'.translate(),
            iconClass: 'pmMafeButtonsIconPMTable',
            handler: function () {
                getListProjects();
                openFormCopy();
                $($('#Code .CodeMirror.cm-s-default.CodeMirror-wrap')[1]).css({'border': '1px solid #c0c0c0'});
                formCopyTrigger.getItems()[4].setHeight(160);

                var cmControlCopyTrigger = formCopyTrigger.getFields()[4].controls[0].cm;
                if (cmControlCopyTrigger != undefined) {
                    cmControlCopyTrigger.setSize(650, 140); //CodeMirror in formCopyTrigger Size
                }

            },
            width: 220,
            height: 115,
            style: {
                cssProperties: {
                    "background-color": "#474747",
                    'border-radius': "10px",
                    'font-size': '20px',
                    'margin-left': '10px'
                },
                cssClasses: [
                    'mafeButtonCopy'
                ]
            }
        });

        var btnPredefinedFunction = new PMUI.ui.Button({
            id: 'btnPredefinedFunction',
            text: "Predefined Function".translate(),
            iconClass: 'pmMafeButtonsIconCopy',
            handler: function () {
                newTriggerOptions();
            },
            width: 220,
            height: 115,
            style: {
                cssProperties: {
                    "background-color": "#474747",
                    'border-radius': "10px",
                    'font-size': '20px',
                    'margin-left': '10px'
                }
            }
        });

        var panelnewTriggerOptions = new PMUI.core.Panel({
            id: 'panelnewTriggerOptions',
            style: {
                cssProperties: {
                    'margin-top': '155px'
                }
            },
            items: [
                btnCustom,
                btnCopyImport,
                btnPredefinedFunction
            ]
        });

        //Trigger Window
        var triggerWindow = new PMUI.ui.Window({
            id: "triggerWindow",
            title: "Triggers".translate(),
            width: DEFAULT_WINDOW_WIDTH,
            height: DEFAULT_WINDOW_HEIGHT,
            footerItems: [
                btnEditSourceCode,
                buttonSave,
                copyButton,
                applyButton,
                {
                    pmType: 'label',
                    text: "or".translate(),
                    style: {
                        cssProperties: {
                            'fontSize': '14px'
                        }
                    }
                },
                buttonCancel
            ],
            buttonPanelPosition: "top"
        });
        triggerWindow.addItem(gridListTrigger);
        triggerWindow.addItem(formEditTriggerCustom);
        triggerWindow.addItem(formEditTriggerWizard);
        triggerWindow.addItem(formCopyTrigger);
        triggerWindow.addItem(formEditCode);
        triggerWindow.addItem(accordionNewTrigger);
        triggerWindow.addItem(panelnewTriggerOptions);

        if (typeof listTriggers !== "undefined") {
            triggerWindow.open();
            $('#listTriggers .pmui-textcontrol').css({'margin-top': '5px', width: '250px'});
            applyStyleWindowForm(triggerWindow);
            triggerWindow.hideFooter();
            openListTriggers();
            gridListTrigger.dom.toolbar.appendChild(buttonNew.getHTML());
            buttonNew.defineEvents();
            triggerWindow.defineEvents();
            gridListTrigger.sort('tri_title', 'asc');
            formEditTriggerCustom.panel.style.addProperties({'overflow': 'hidden'});
        }
    };

    PMDesigner.trigger.create = function () {
        openNewTriggerOptions2();
        btnCopyImport.style.addProperties({'line-height': 'initial'});
    };
}());
EditTrigger = function (settings, tri_webbot) {
    var that = this;
    that.onSave = new Function();
    that.tri_uid = '';
    that.tri_webbot = tri_webbot;
    Mafe.Window.call(that, settings);
    EditTrigger.prototype.init.call(that);
};
EditTrigger.prototype = new Mafe.Window();
EditTrigger.prototype.init = function () {
    var that = this;

    that.codeMirror = new PMCodeMirror();
    that.codeMirror.setValue(that.tri_webbot);
    that.setButtons([{
            id: 'idFormEditTriggerSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                var restClient = new PMRestClient({
                    endpoint: 'trigger/' + that.tri_uid,
                    typeRequest: 'update',
                    data: {
                        tri_param: '',
                        tri_webbot: that.codeMirror.getValue()
                    },
                    messageError: 'There are problems updating the trigger, please try again.'.translate(),
                    messageSuccess: 'Trigger updated correctly'.translate(),
                    flashContainer: that,
                    functionSuccess: function () {
                        that.close();
                    }
                });
                restClient.executeRestClient();
            }
        }, {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {fontSize: '14px'}}
        }, {
            id: 'idFormEditTriggerCancel',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.close();
            }
        }
    ]);

    that.setTitle('Trigger'.translate());
    that.open();
    that.addItem(that.codeMirror);
    that.codeMirror.cm.setSize(that.getWidth(), that.getHeight() - 85);
};

EditCondition = function (settings) {
    var that = this;
    that.onSave = new Function();
    that.step_uid = 0;
    that.tri_uid = 0;
    that.st_type = 0;
    Mafe.Window.call(that, settings);
    EditCondition.prototype.init.call(that);
};
EditCondition.prototype = new Mafe.Window();
EditCondition.prototype.init = function () {
    var that = this;
    that.form = new Mafe.Form({
        id: 'idFormEditCondition',
        width: 500,
        title: 'Condition Trigger'.translate(),
        items: [
            new CriteriaField({
                id: 'st_condition',
                pmType: 'textarea',
                name: 'st_condition',
                valueType: 'string',
                label: 'Condition'.translate(),
                placeholder: 'Insert a condition'.translate(),
                rows: 150,
                controlsWidth: 250,
                renderType: 'textarea'
            })
        ]
    });
    that.form.onYesConfirmCancellation = function () {
        that.resetView();
        that.close();
    };

    that.setButtons([{
            id: 'idFormEditConditionSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                if (that.form.isValid()) {
                    var data = that.form.getData();
                    data.st_type = that.st_type;
                    var restClient = new PMRestClient({
                        endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + that.step_uid + '/trigger/' + that.tri_uid,
                        typeRequest: 'update',
                        data: data,
                        messageError: 'There are problems update the Step Trigger, please try again.'.translate(),
                        functionSuccess: function (xhr, response) {
                            that.close();
                            that.onSave(response);
                        }
                    });
                    restClient.executeRestClient();
                }
            }
        }, {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {fontSize: '14px'}}
        }, {
            id: 'idFormEditConditionCancel',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.form.loseChanges();
            }
        }
    ]);

    that.setTitle(that.form.title);
    that.setWidth(500);
    that.setHeight(350);
    that.addItem(that.form);
    that.open();
};
EditCondition.prototype.getForm = function () {
    return this.form;
};

EditConditionStep = function (settings) {
    var that = this;
    that.step_uid = 0;
    Mafe.Window.call(that, settings);
    EditConditionStep.prototype.init.call(that);
};
EditConditionStep.prototype = new Mafe.Window();
EditConditionStep.prototype.init = function () {
    var that = this;
    that.form = new Mafe.Form({
        id: 'idFormEditCondition',
        width: 500,
        title: 'Step Properties'.translate(),
        items: [{
                id: 'step_mode',
                pmType: 'radio',
                label: 'Mode'.translate(),
                value: '',
                name: 'step_mode',
                options: [{
                        id: 'modeEdit',
                        label: 'Edit'.translate(),
                        value: 'EDIT',
                        selected: true
                    }, {
                        id: 'modeView',
                        label: 'View'.translate(),
                        value: 'VIEW'
                    }
                ]
            },
            new CriteriaField({
                id: 'step_condition',
                pmType: 'textarea',
                name: 'step_condition',
                valueType: 'string',
                label: 'Condition'.translate(),
                placeholder: 'Insert a condition'.translate(),
                rows: 150,
                controlsWidth: 250,
                renderType: 'textarea'
            })
        ]
    });
    that.form.onYesConfirmCancellation = function () {
        that.resetView();
        that.close();
    };

    that.setButtons([{
            id: 'idFormEditConditionSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                if (that.form.isValid()) {
                    var restClient = new PMRestClient({
                        endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + that.step_uid,
                        typeRequest: 'update',
                        data: that.form.getData(),
                        functionSuccess: function () {
                            that.close();
                        },
                        messageError: 'There are problems update the Step Trigger, please try again.'.translate()
                    });
                    restClient.executeRestClient();
                }
            }
        }, {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {fontSize: '14px'}}
        }, {
            id: 'idFormEditConditionCancel',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.form.loseChanges();
            }
        }
    ]);

    that.setTitle(that.form.title);
    that.setWidth(500);
    that.setHeight(350);
    that.addItem(that.form);
    that.open();
};
EditConditionStep.prototype.getForm = function () {
    return this.form;
};
EditConditionStep.prototype.setStepUid = function (step_uid) {
    this.step_uid = step_uid;
};

AssignGridElement = function (settings) {
    var that = this;
    that.title = settings.title;
    that.data = settings.data;
    that.st_type = settings.st_type;
    that.step_uid = settings.step_uid;
    var defaults = {
        visibleFooter: false,
//        behavior: 'dragdropsort',
        onBeforeDrop: function (container, containerParent, index) {
        }
    };
    jQuery.extend(true, defaults, settings);
    Mafe.Grid.call(this, defaults);
    AssignGridElement.prototype.init.call(this, defaults);
};
AssignGridElement.prototype = new Mafe.Grid();
AssignGridElement.prototype.createHTML = function () {
    Mafe.Grid.prototype.createHTML.call(this);
    $(this.html).find('.pmui-gridpanel-toolbar').css({
        height: '10px',
        fontSize: '12px',
        fontWeight: 'bold'
    });
    $(this.html).find('.pmui-textcontrol').css({display: 'none'});
    this.dom.toolbar.appendChild(document.createTextNode(this.title));
    this.activateSortable();
    this.setNumberPosition();
    return this.html;
};
AssignGridElement.prototype.init = function (defaults) {
    var that = this;
    that.setID('idAssignGridElement');
    that.setColumns([{
            title: '',
            dataType: 'string',
            alignmentCell: 'center',
            columnData: function (data) {
                return '';
            },
            width: 20
        }, {
            title: defaults.title,
            dataType: 'string',
            alignmentCell: 'left',
            columnData: 'tri_title',
            width: 400
        }, {
            title: '',
            dataType: 'button',
            buttonLabel: function (row, data) {
                return data.st_condition === '' ? 'Condition'.translate() : 'Condition *'.translate();
            },
            buttonStyle: {cssClasses: ['mafe-button-edit']},
            onButtonClick: function (row, grid) {
                that.onCondition(row, grid);
            }
        }, {
            title: '',
            dataType: 'button',
            buttonLabel: 'Edit'.translate(),
            buttonStyle: {cssClasses: ['mafe-button-edit']},
            onButtonClick: function (row, grid) {
                that.onEdit(row, grid);
            }
        }, {
            title: '',
            dataType: 'button',
            buttonLabel: 'Remove'.translate(),
            buttonStyle: {cssClasses: ['mafe-button-delete']},
            onButtonClick: function (row, grid) {
                that.onDel(row, grid);
            }
        }
    ]);
    that.hideHeaders();
    that.load();
};
AssignGridElement.prototype.load = function () {
    var that = this;
    that.clearItems();
    var data = that.data;
    for (var i = 0; i < data.length; i++) {
        if (that.st_type === data[i].st_type) {
            that.addDataItem({
                st_condition: data[i].st_condition,
                st_position: data[i].st_position,
                st_type: data[i].st_type,
                tri_description: data[i].tri_description,
                tri_title: data[i].tri_title,
                tri_uid: data[i].tri_uid,
                obj_title: data[i].tri_title,
                obj_uid: data[i].tri_uid
            });
        }
    }
};
AssignGridElement.prototype.isTriggerAssigned = function (tri_uid) {
    var data = this.getData();
    for (var i = 0; i < data.length; i++)
        if (data[i].tri_uid === tri_uid)
            return true;
    return false;
};
AssignGridElement.prototype.onCondition = function (row, grid) {
    var that = this;
    var data = row.getData();
    var a = new EditCondition();
    a.step_uid = that.step_uid;
    a.tri_uid = data.tri_uid;
    a.st_type = data.st_type;
    a.getForm().getField('st_condition').setValue(data.st_condition);
    a.onSave = function (xhr, response) {
        data.st_condition = a.getForm().getField('st_condition').getValue();
        row.setData(data);
    };
};
AssignGridElement.prototype.onEdit = function (row, grid) {
    var that = this;
    var data = row.getData();
    var restClient = new PMRestClient({
        endpoint: 'trigger/' + data.tri_uid,
        typeRequest: 'get',
        functionSuccess: function (xhr, response) {
            var a = new EditTrigger({}, response.tri_webbot);
            a.tri_uid = response.tri_uid;
        }
    });
    restClient.executeRestClient();
};
AssignGridElement.prototype.activateSortable = function () {
    var that = this;
    $(that.dom.tbody).sortable({
        placeholder: 'pmui-containeritembehavior-placeholder',
        connectWith: '.pmui-gridpanel-tbody',
        change: function (event, ui) {
            ui.item[0].indexPlaceHolder = ui.placeholder.index();
        },
        receive: function (event, ui) {
            that.onDrop(that, PMUI.getPMUIObject(ui.item[0]), ui.item[0].indexPlaceHolder);
        },
        update: function (event, ui) {
            if (that.dom.tbody === ui.item[0].parentNode) {
                that.onSort(that, PMUI.getPMUIObject(ui.item[0]), ui.item[0].indexPlaceHolder);
            }
        },
        remove: function (event, ui) {
            $(this).sortable('cancel');
        }
    });
};
AssignGridElement.prototype.setNumberPosition = function () {
    var that = this;
    var a = that.dom.tbody.childNodes;
    for (var i = 0; i < a.length; i++) {
        a[i].cells[0].childNodes[0].innerHTML = i + 1;
    }
};

AssignTree = function () {
    this.response = null;
    this.groupType = ['DYNAFORM', 'INPUT_DOCUMENT', 'OUTPUT_DOCUMENT', 'EXTERNAL'];
    this.groupLabel = ['Dynaform (s)', 'Input Document (s)', 'OutPut Document (s)', 'External (s)'];
    var defaults = {
        id: 'idAssignTree',
        style: {cssProperties: {margin: '0px 0px 0px 5px'}, cssClasses: ['mafe-border-panel']},
        nodeDefaultSettings: {
            labelDataBind: 'obj_title',
            itemsDataBind: 'items',
            childrenDefaultSettings: {
                labelDataBind: 'obj_title'
            }
        }
    };
    Mafe.Tree.call(this, defaults);
    AssignTree.prototype.init.call(this, defaults);
};
AssignTree.prototype = new Mafe.Tree();
AssignTree.prototype.createHTML = function () {
    Mafe.Tree.prototype.createHTML.call(this);
    this.activateSortable();

    return this.html;
};
AssignTree.prototype.init = function (defaults) {
    var that = this;
    that.load();
};
AssignTree.prototype.load = function () {
    var that = this;
    if (that.response !== null) {
        that.createItems(that.response);
        return;
    }
    var restClient = new PMRestClient({
        typeRequest: 'post',
        multipart: true,
        data: {
            calls: [{
                    url: 'activity/' + PMDesigner.act_uid + '/available-steps',
                    method: 'GET'
                }, {
                    url: 'triggers',
                    method: 'GET'
                }
            ]
        },
        functionSuccess: function (xhr, response) {
            that.response = response;
            that.createItems(that.response);
        }
    });
    restClient.executeRestClient();
};
AssignTree.prototype.createItems = function (response) {
    var that = this;
    var data;
    var dataTree = [];
    data = response[1].response;
    var labelTrigger = 'Trigger (s)'.translate();
    if (data.length === 0) {
        dataTree.push({
            obj_title: labelTrigger,
            items: [{obj_title: 'N/A'.translate(), obj_uid: ''}]
        });
    } else {
        items = [];
        for (var i = 0; i < data.length; i++) {
            items.push({
                obj_title: data[i]['tri_title'],
                obj_type: data[i]['tri_type'],
                obj_uid: data[i]['tri_uid']
            });
        }
        dataTree.push({
            obj_title: labelTrigger,
            items: items
        });
    }
    data = response[0].response;
    var type = that.groupType;
    var label = that.groupLabel;
    var items = [];
    for (var i = 0; i < type.length; i++) {
        items = [];
        for (var j = 0; j < data.length; j++) {
            if (type[i] === data[j].obj_type) {
                items.push({
                    obj_title: data[j]['obj_title'],
                    obj_type: data[j]['obj_type'],
                    obj_uid: data[j]['obj_uid']
                });
            }
        }
        if (items.length === 0) {
            dataTree.push({
                obj_title: label[i].translate(),
                items: [{obj_title: 'N/A'.translate(), obj_uid: ''}]
            });
        } else {
            dataTree.push({
                obj_title: label[i].translate(),
                items: items
            });
        }
    }
    that.clearItems();
    that.setDataItems(dataTree);
    applyStyleTreePanel(that);
};
AssignTree.prototype.addII = function (item) {
    var that = this;
    var index = that.groupType.indexOf(item.obj_type);
    var node = that.items.get(index + 1);
    //sort
    var data = node.getItems();
    var aux = [item.obj_title];
    for (var i = 0; i < data.length; i++) {
        aux.push(data[i].label);
    }
    aux = aux.sort();
    var indexSort = aux.indexOf(item.obj_title) - 1;
    node.addDataItem(item);
};
AssignTree.prototype.activateSortable = function () {
    var that = this;
    var items = this.getItems();
    for (var i = 0; i < items.length; i++) {
        $(items[i].html).find('ul').sortable({
            items: '>li',
            connectWith: '#listnode, .pmui-gridpanel-tbody',
            placeholder: 'pmui-containeritembehavior-placeholder',
            change: function (event, ui) {
                ui.item[0].indexPlaceHolder = ui.placeholder.index();
            },
            beforeStop: function (event, ui) {
                if ($(ui.placeholder).parent()[0] === this) {
//                    $(this).sortable('cancel');
                }
            },
            remove: function (event, ui) {
                $(this).sortable('cancel');
            }
        });
    }
};

AssignGrid = function () {
    var that = this;
    that.onCondition = new Function();
    that.onEdit = new Function();
    that.onRemove = new Function();
    that.onSortAssignGridElement = new Function();
    that.onDropAssignGridElement = new Function();
    that.onDel = new Function();
    that.onDrop = new Function();
    Mafe.Accordion.call(this, {
        id: 'idAssignGrid',
        width: 720,
        style: {cssProperties: {margin: '0px 0px 0px 4px'}, cssClasses: ['mafe-border-panel']},
        listeners: {
            select: function (accordionItem, event) {
            }
        }
    });
    AssignGrid.prototype.init.call(this);
};
AssignGrid.prototype = new Mafe.Accordion();
AssignGrid.prototype.createHTML = function () {
    Mafe.Accordion.prototype.createHTML.call(this);
    var that = this;
    this.body.id = 'listnode';//important!
    that.activateSortable();
    return this.html;
};
AssignGrid.prototype.addItem = function (item, position) {
    var that = this;
    var itemToBeAdded, tagPrevious;
    if (this.factory) {
        itemToBeAdded = this.factory.make(item);
    }
    if (itemToBeAdded && !this.isDirectParentOf(itemToBeAdded)) {
        itemToBeAdded.parent = this;
        if (position === undefined) {
            this.items.insert(itemToBeAdded);
        } else {
            tagPrevious = this.getItems()[position].html;
            this.items.insertAt(itemToBeAdded, position);
        }
        if (this.body) {
            if (position === undefined) {
                this.body.appendChild(itemToBeAdded.getHTML());
            } else {
                this.body.insertBefore(itemToBeAdded.getHTML(), tagPrevious);
            }
            if (this.selfAdjusting) {
                this.adjustHeightItems();
            }
            if (!itemToBeAdded.eventsDefined) {
                itemToBeAdded.defineEvents();
            }
        }
    }

    //custom view
    $(itemToBeAdded.getHTML()).droppable({
        over: function (event, ui) {
            if (ui.draggable[0].nodeName === 'TR') {
                PMUI.getPMUIObject(this).expand();
            }
            if (ui.draggable[0].nodeName === 'LI' && PMUI.getPMUIObject(ui.draggable[0]).getData().obj_type === 'SCRIPT') {
                PMUI.getPMUIObject(this).expand();
            }
        },
        out: function (event, ui) {
//            if (ui.draggable[0].nodeName === 'TR') {
//                PMUI.getPMUIObject(this).collapse();
//            }
//            if (ui.draggable[0].nodeName === 'LI' && PMUI.getPMUIObject(ui.draggable[0]).getData().obj_type === 'SCRIPT') {
//                PMUI.getPMUIObject(this).collapse();
//            }
        }
    });
    if (item.dataStep) {
        itemToBeAdded.dataStep = item.dataStep;
    }

    var a = itemToBeAdded.title;
    //itemToBeAdded.setID(a.replace(/\s/g, '').replace(/:/g, ''));
    itemToBeAdded.setTitle('');

    var that = this;
    var title = $(itemToBeAdded.getHTML()).find('.pmui-accordion-item-title');
    title.css({
        fontWeight: 'bold',
        fontSize: '14px',
        color: 'white'
    });

    var labelNumber = document.createTextNode('');
    itemToBeAdded.labelNumber = labelNumber;
    title.append(labelNumber);
    title.append($('<a>' + a + '</a>'));

    if (item.closeable === true) {
        var style = 'style="float:right;font-weight:bold;margin-top:5px;" class="pmui pmui-button pmui-window-close button-icon"';

        var arrowUp = $('<div class="mafe-step-arrow-up"></div>');
        arrowUp[0].onclick = function (e) {
            that.onUp(e, itemToBeAdded);
            e.stopPropagation();
            return false;
        };

        var arrowDown = $('<div class="mafe-step-arrow-down"></div>');
        arrowDown[0].onclick = function (e) {
            that.onDown(e, itemToBeAdded);
            e.stopPropagation();
            return false;
        };

        var buttonClose = $('<a ' + style + '>Remove</a>');
        buttonClose[0].onclick = function (e) {
            that.onRemove(e, itemToBeAdded);
            e.stopPropagation();
            return false;
        };

        var buttonEdit = $('<a ' + style + '>Edit</a>');
        buttonEdit[0].onclick = function (e) {
            that.onEdit(e, itemToBeAdded);
            e.stopPropagation();
            return false;
        };

        var buttonCondition = $('<a ' + style + '>Properties</a>');
        buttonCondition[0].onclick = function (e) {
            that.onCondition(e, itemToBeAdded);
            e.stopPropagation();
            return false;
        };

        title.append($('<div style="float:right;margin-top:-1px;"></div>').append(arrowUp).append(arrowDown));
        title.append(buttonClose);
        title.append(buttonEdit);
        title.append(buttonCondition);
    }
    return this;
};
AssignGrid.prototype.init = function () {
    var that = this;
    that.setBehavior('drop');
    that.load();
};
AssignGrid.prototype.load = function () {
    var that = this;
    var restClient = new PMRestClient({
        typeRequest: 'post',
        multipart: true,
        data: {
            calls: [{
                    url: 'activity/' + PMDesigner.act_uid + '/steps',
                    method: 'GET'
                }, {
                    url: 'activity/' + PMDesigner.act_uid + '/step/triggers',
                    method: 'GET'
                }
            ]
        },
        functionSuccess: function (xhr, response) {
            var data = response[0].response;
            for (var i = 0; i < data.length; i++) {
                that.addItem(that.createItemStep(data[i], true, true));
            }
            data = response[1].response;
            that.addItem({
                id: 'idAssignment',
                title: 'Assignment'.translate(),
                selected: true,
                body: new PMUI.core.Panel({
                    layout: 'vbox',
                    items: [
                        that.createAssignGridElement({
                            title: 'Before Assignment'.translate(),
                            data: data,
                            st_type: 'BEFORE_ASSIGNMENT'
                        })
                    ]
                })
            });
            that.addItem({
                id: 'idRouting',
                title: 'Routing'.translate(),
                selected: true,
                body: new PMUI.core.Panel({
                    layout: 'vbox',
                    items: [
                        that.createAssignGridElement({
                            title: 'Before Routing'.translate(),
                            data: data,
                            st_type: 'BEFORE_ROUTING'
                        }),
                        that.createAssignGridElement({
                            title: 'After Routing'.translate(),
                            data: data,
                            st_type: 'AFTER_ROUTING'
                        })
                    ]
                })
            });
            that.setNumberPosition();
        },
        messageError: 'There are problems getting the Steps, please try again.'.translate()
    });
    restClient.executeRestClient();
};
AssignGrid.prototype.createItemStep = function (data, selected, closeable) {
    var that = this;
    return {
        id: 'id' + data.step_uid_obj,
        title: that.getTitleStep(data.step_type_obj) + ': ' + data.obj_title,
        dataStep: data,
        selected: selected,
        closeable: closeable,
        body: new PMUI.core.Panel({
            layout: 'vbox',
            items: [
                that.createAssignGridElement({
                    title: 'Before'.translate() + ' ' + that.getTitleStep(data.step_type_obj),
                    data: data.triggers,
                    st_type: 'BEFORE',
                    step_uid: data.step_uid
                }),
                that.createAssignGridElement({
                    title: 'After'.translate() + ' ' + that.getTitleStep(data.step_type_obj),
                    data: data.triggers,
                    st_type: 'AFTER',
                    step_uid: data.step_uid
                })
            ]
        })
    };
};
AssignGrid.prototype.createAssignGridElement = function (config) {
    var that = this;
    var assignGridElement = new AssignGridElement(config);
    assignGridElement.onSort = function (grid, item, index) {
        that.onSortAssignGridElement(grid, item, index);
    };
    assignGridElement.onDrop = function (grid, item, index) {
        if (that.onDropAssignGridElement(grid, item, index) === false) {
            return false;
        }
    };
    assignGridElement.onDel = function (row, grid) {
        that.onDel(row, grid);
    };
    return assignGridElement;
};
AssignGrid.prototype.getTitleStep = function (type) {
    switch (type) {
        case 'DYNAFORM':
            return 'Dynaform'.translate();
        case 'OUTPUT_DOCUMENT':
            return 'Output Document'.translate();
        case 'INPUT_DOCUMENT':
            return 'Input Document'.translate();
    }
};
AssignGrid.prototype.getStepType = function (st_type) {
    switch (st_type) {
        case 'BEFORE_ASSIGNMENT':
            return 'before-assignment';
        case 'BEFORE_ROUTING':
            return 'before-routing';
        case 'AFTER_ROUTING':
            return 'after-routing';
        case 'BEFORE':
            return 'before';
        case 'AFTER':
            return 'after';
    }
};
AssignGrid.prototype.setNumberPosition = function () {
    var that = this;
    var dt = that.getItems();
    for (var i = 0; i < dt.length; i++) {
        dt[i].labelNumber.data = (i + 1) + ' ';
    }
};
AssignGrid.prototype.onUpdate = function (event, ui, el) {
    var that = this;
    var index = this.getItemIndex(el);
    el.dataStep.step_position = index + 1;
    var restClientMultipart = new PMRestClient({
        typeRequest: 'post',
        multipart: true,
        data: {
            calls: [{
                    url: 'activity/' + PMDesigner.act_uid + '/step/' + el.dataStep.step_uid,
                    method: 'PUT',
                    data: el.dataStep
                }
            ]
        },
        functionSuccess: function (xhr, response) {
            that.setNumberPosition();
        },
        flashContainer: that.getParent().getParent(),
        messageError: [
            'An unexpected error while editing the step, please try again later.'.translate()
        ],
        messageSuccess: [
            'Step editing successfully.'.translate()
        ]
    });
    restClientMultipart.executeRestClient();
};
AssignGrid.prototype.onUp = function (e, object) {
    var parent = object.html.parentNode;
    var previus = object.html.previousSibling;
    if (previus !== null) {
        var that = this;
        var index = this.getItemIndex(object);
        object.dataStep.step_position = index;
        var restClientMultipart = new PMRestClient({
            typeRequest: 'post',
            multipart: true,
            data: {
                calls: [{
                        url: 'activity/' + PMDesigner.act_uid + '/step/' + object.dataStep.step_uid,
                        method: 'PUT',
                        data: object.dataStep
                    }
                ]
            },
            functionSuccess: function (xhr, response) {
                parent.insertBefore(object.html, previus);
                that.reIndexItems(parent);
                that.setNumberPosition();
            },
            flashContainer: that.getParent().getParent(),
            messageError: [
                'An unexpected error while move up the step, please try again later.'.translate()
            ],
            messageSuccess: [
                'Step move up successfully.'.translate()
            ]
        });
        restClientMultipart.executeRestClient();
    }
};
AssignGrid.prototype.onDown = function (e, object) {
    var parent = object.html.parentNode;
    var next = object.html.nextSibling.nextSibling;
    if (next !== null && next.id !== 'idRouting') {
        var that = this;
        var index = this.getItemIndex(object);
        object.dataStep.step_position = index + 2;
        var restClientMultipart = new PMRestClient({
            typeRequest: 'post',
            multipart: true,
            data: {
                calls: [{
                        url: 'activity/' + PMDesigner.act_uid + '/step/' + object.dataStep.step_uid,
                        method: 'PUT',
                        data: object.dataStep
                    }
                ]
            },
            functionSuccess: function (xhr, response) {
                parent.insertBefore(object.html, next);
                that.reIndexItems(parent);
                that.setNumberPosition();
            },
            flashContainer: that.getParent().getParent(),
            messageError: [
                'An unexpected error while move down the step, please try again later.'.translate()
            ],
            messageSuccess: [
                'Step move down successfully.'.translate()
            ]
        });
        restClientMultipart.executeRestClient();
    }
};
AssignGrid.prototype.reIndexItems = function (parent) {
    var that = this;
    var item = null;
    var n = that.items.getSize();
    var dt = parent.childNodes;
    for (var i = 0; i < dt.length; i++) {
        for (var j = 0; j < n; j++) {
            item = that.items.get(j);
            if (dt[i] === item.html) {
                that.items.remove(item);
                break;
            }
        }
        that.items.insertAt(item, i);
    }
};
AssignGrid.prototype.activateSortable = function () {
    var that = this;
    $(that.body).sortable({
        items: '>div:not(#idAssignment,#idRouting)',
        placeholder: 'pmui-containeritembehavior-placeholder',
        receive: function (event, ui) {
            that.onDrop(that, PMUI.getPMUIObject(ui.item[0]), ui.item[0].indexPlaceHolder);
        },
        update: function (event, ui) {
            if (ui.placeholder[0].nodeName === 'DIV') {
                //sort element items
                that.reIndexItems(ui.item[0].parentNode);
                //get change element
                var n = that.items.getSize();
                var el = ui.item[0];
                for (var i = 0; i < n; i++) {
                    if (that.items.get(i).html === el) {
                        el = that.items.get(i);
                        break;
                    }
                }
                that.onUpdate(event, ui, el);
            }
        }
    });
    $(that.body).disableSelection();
};

Assign = function () {
    var that = this;
    that.superTitle = '';
    that.assignTree = null;
    that.assignGrid = null;
    var defaults = {
        border: false,
        layout: 'hbox',
        height: 402
    };
    PMUI.core.Panel.call(this, defaults);
    Assign.prototype.init.call(this);
};
Assign.prototype = new PMUI.core.Panel();
Assign.prototype.init = function () {
    var that = this;
    that.assignTree = new AssignTree();
    that.assignGrid = new AssignGrid();
    that.assignGrid.onCondition = function (e, object) {
        var restClient = new PMRestClient({
            endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + object.dataStep.step_uid,
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                var a = new EditConditionStep();
                a.setStepUid(response.step_uid);
                var form = a.getForm();
                form.getField('step_mode').setValue(response.step_mode);
                form.getField('step_condition').setValue(response.step_condition);
            }
        });
        restClient.executeRestClient();
    };
    that.assignGrid.onEdit = function (e, object) {
        switch (object.dataStep.step_type_obj) {
            case 'DYNAFORM':
                var restProxy = new PMRestClient({
                    endpoint: 'dynaform/' + object.dataStep.step_uid_obj,
                    typeRequest: 'get',
                    functionSuccess: function (xhr, response) {
                        PMDesigner.dynaformDesigner(response);
                    }
                });
                restProxy.executeRestClient();
                break;
            case 'OUTPUT_DOCUMENT':
                PMDesigner.output();
                PMDesigner.output.showTiny(object.dataStep.step_uid_obj);
                break;
            case 'INPUT_DOCUMENT':
                PMDesigner.input();
                PMDesigner.input.showFormEdit(object.dataStep.step_uid_obj);
                break;
        }
    };
    that.assignGrid.onRemove = function (e, object) {
        var confirmDeletion = new Mafe.ConfirmDeletion();
        confirmDeletion.setMessage('Do you want to remove the step "' + object.dataStep.obj_title + '"?'.translate());
        confirmDeletion.onDelete = function () {
            var restClient = new PMRestClient({
                endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + object.dataStep.step_uid,
                typeRequest: 'remove',
                functionSuccess: function (xhr, response) {
                    that.assignGrid.removeItem(object);
                    that.assignGrid.setNumberPosition();
                    that.assignGrid.activateSortable();
                    that.assignTree.addII({
                        obj_description: object.dataStep.obj_description,
                        obj_title: object.dataStep.obj_title,
                        obj_type: object.dataStep.step_type_obj,
                        obj_uid: object.dataStep.step_uid_obj
                    });
                    that.assignTree.activateSortable();
                },
                messageError: 'An unexpected error while deleting the step, please try again later.'.translate(),
                messageSuccess: 'Step removed successfully'.translate(),
                flashContainer: that.getParent()
            });
            restClient.executeRestClient();
        };
    };
    that.assignGrid.onDrop = function (grid, item, index) {
        var data = item.getData();
        var sw = data.obj_type && (data.obj_type === 'DYNAFORM' || data.obj_type === 'INPUT_DOCUMENT' || data.obj_type === 'OUTPUT_DOCUMENT');
        if (sw) {
            var restClient = new PMRestClient({
                endpoint: 'activity/' + PMDesigner.act_uid + '/step',
                typeRequest: 'post',
                data: {
                    step_type_obj: data.obj_type,
                    step_uid_obj: data.obj_uid,
                    step_condition: '',
                    step_position: index + 1,
                    step_mode: 'EDIT'
                },
                functionSuccess: function (xhr, response) {
                    response.obj_description = '';
                    response.obj_title = data.obj_title;
                    response.triggers = [];
                    that.assignGrid.addItem(that.assignGrid.createItemStep(response, true, true), index);
                    that.assignGrid.setNumberPosition();
                    that.assignTree.removeItem(item);
                },
                messageError: 'An unexpected error while assigning the step, please try again later.'.translate(),
                messageSuccess: 'Step assigned successfully.'.translate(),
                flashContainer: that.getParent()
            });
            restClient.executeRestClient();
        }
        return false;
    };
    that.assignGrid.onSortAssignGridElement = function (grid, item, index) {
        var data = item.getData();
        if (grid.step_uid === undefined) {
            (new PMRestClient({
                endpoint: 'activity/' + PMDesigner.act_uid + "/step/trigger/" + data.tri_uid,
                typeRequest: 'update',
                data: {
                    st_type: data.st_type,
                    st_condition: data.st_condition,
                    st_position: index + 1
                },
                functionSuccess: function () {
                    grid.setNumberPosition();
                },
                messageError: "There are problems update the Step Trigger, please try again.".translate()
            })).executeRestClient();
        } else {
            (new PMRestClient({
                endpoint: 'activity/' + PMDesigner.act_uid + "/step/" + grid.step_uid + "/trigger/" + data.tri_uid,
                typeRequest: 'update',
                data: {
                    st_type: data.st_type,
                    st_condition: data.st_condition,
                    st_position: index + 1
                },
                functionSuccess: function () {
                    grid.setNumberPosition();
                },
                messageError: "There are problems update the Step Trigger, please try again.".translate()
            })).executeRestClient();
        }
    };
    that.assignGrid.onDropAssignGridElement = function (grid, item, index) {
        var data = item.getData();
        if (item.type === 'TreeNode' && data.obj_type === 'SCRIPT') {
            if (grid.isTriggerAssigned(data.obj_uid)) {
                var message = new PMUI.ui.FlashMessage({
                    message: 'Trigger is assigned.'.translate(),
                    duration: 3000,
                    severity: 'error',
                    appendTo: that.getParent()
                });
                message.show();
                return false;
            }
            (new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [{
                            url: grid.step_uid === undefined ?
                                    'activity/' + PMDesigner.act_uid + '/step/trigger' :
                                    'activity/' + PMDesigner.act_uid + '/step/' + grid.step_uid + '/trigger',
                            method: 'POST',
                            data: {
                                tri_uid: data.obj_uid,
                                st_type: grid.st_type,
                                st_condition: '',
                                st_position: index + 1
                            }
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    grid.addDataItem({
                        st_condition: '',
                        st_position: index + 1,
                        st_type: grid.st_type,
                        tri_description: '',
                        tri_title: data.obj_title,
                        tri_uid: data.obj_uid,
                        obj_title: data.obj_title,
                        obj_uid: data.obj_uid
                    }, index);
                    grid.setNumberPosition();
                    grid.activateSortable();//important!
                },
                flashContainer: that.getParent(),
                messageError: [
                    'An unexpected error while assigning the trigger, please try again later.'.translate()
                ],
                messageSuccess: [
                    'Trigger assigned successfully.'.translate()
                ]
            })).executeRestClient();
        }
        if (item.type === 'GridPanelRow') {
            if (grid.isTriggerAssigned(data.tri_uid)) {
                var message = new PMUI.ui.FlashMessage({
                    message: 'Trigger is assigned.'.translate(),
                    duration: 3000,
                    severity: 'error',
                    appendTo: that.getParent()
                });
                message.show();
                return false;
            }
            (new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [{
                            url: grid.step_uid === undefined ?
                                    'activity/' + PMDesigner.act_uid + '/step/trigger' :
                                    'activity/' + PMDesigner.act_uid + '/step/' + grid.step_uid + '/trigger',
                            method: 'POST',
                            data: {
                                tri_uid: data.obj_uid,
                                st_type: grid.st_type,
                                st_condition: '',
                                st_position: index + 1
                            }
                        }, {
                            url: item.getParent().step_uid === undefined ?
                                    'activity/' + PMDesigner.act_uid + '/step/trigger/' + data.obj_uid + '/' + that.assignGrid.getStepType(data.st_type) :
                                    'activity/' + PMDesigner.act_uid + '/step/' + item.getParent().step_uid + '/trigger/' + data.obj_uid + '/' + that.assignGrid.getStepType(data.st_type),
                            method: 'DELETE'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    grid.addDataItem({
                        st_condition: '',
                        st_position: index + 1,
                        st_type: grid.st_type,
                        tri_description: '',
                        tri_title: data.obj_title,
                        tri_uid: data.obj_uid,
                        obj_title: data.obj_title,
                        obj_uid: data.obj_uid
                    }, index);
                    grid.setNumberPosition();
                    grid.activateSortable();//important!
                    var gridItemParent = item.getParent();
                    gridItemParent.removeItem(item);
                    gridItemParent.setNumberPosition();
                    gridItemParent.activateSortable();//important!
                },
                flashContainer: that.getParent(),
                messageError: [
                    'An unexpected error while assigning the trigger, please try again later.'.translate()
                ],
                messageSuccess: [
                    'Trigger assigned successfully.'.translate()
                ]
            })).executeRestClient();
        }
        return false;
    };
    that.assignGrid.onDel = function (row, grid) {
        var confirmDeletion = new Mafe.ConfirmDeletion();
        confirmDeletion.setMessage('Do you want to remove the trigger "' + row.getData().tri_title + '"?'.translate());
        confirmDeletion.onDelete = function () {
            var restClient = new PMRestClient({
                endpoint: grid.step_uid === undefined ?
                        'activity/' + PMDesigner.act_uid + '/step/trigger/' + row.getData().tri_uid + '/' + that.assignGrid.getStepType(row.getData().st_type) :
                        'activity/' + PMDesigner.act_uid + '/step/' + grid.step_uid + '/trigger/' + row.getData().tri_uid + '/' + that.assignGrid.getStepType(row.getData().st_type),
                typeRequest: 'remove',
                functionSuccess: function (xhr, response) {
                    grid.removeItem(row);
                    grid.activateSortable();
                },
                flashContainer: that.getParent(),
                messageError: 'An unexpected error while deleting the trigger, please try again later.'.translate(),
                messageSuccess: 'Trigger removed successfully'.translate()
            });
            restClient.executeRestClient();
        };
    };
    that.addItem(that.assignTree);
    that.addItem(that.assignGrid);
};

StepsTask = function (settings) {
    var that = this;
    that.assign = null;
    Mafe.Window.call(that, settings);
    StepsTask.prototype.init.call(that);
};
StepsTask.prototype = new Mafe.Window();
StepsTask.prototype.init = function () {
    var that = this;
    that.assign = new Assign();
    that.addItem(new PMUI.core.Panel({
        layout: 'hbox',
        items: [
            new PMUI.ui.TextLabel({
                textMode: 'plain',
                text: 'Available Elements'.translate(),
                style: {
                    cssClasses: ['mafe-designer-steps-tree'],
                    cssProperties: {
                        margin: '8px 0px 5px 13px'
                    }
                }
            }),
            new PMUI.ui.TextLabel({
                textMode: 'plain',
                text: 'Assigned Elements'.translate(),
                style: {
                    cssClasses: ['mafe-designer-steps-tree'],
                    cssProperties: {
                        margin: '8px 0px 5px 93px'
                    }
                }
            })
        ]
    }));
    that.addItem(that.assign);
    that.open();
    that.setTitle('Steps for task: '.translate() + PMDesigner.act_name);
    that.setButtons([
        new PMUI.ui.Button({
            id: 'windowDynaformInformationSaveOpen',
            text: 'Apply'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                var message = new PMUI.ui.FlashMessage({
                    message: 'All changes are saved correctly.'.translate(),
                    duration: 3000,
                    severity: 'info',
                    appendTo: that
                });
                message.show();
            }
        }),
        {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {'fontSize': '14px'}}
        },
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.close();
            }
        })
    ]);
};

(
    function ()
    {
        PMDesigner.processPermissions = function (event)
        {
            var PROCESS_PERMISSIONS_OPTION = "",
                PROCESS_PERMISSIONS_UID = "",
                arrayCboGroup = [],
                arrayCboUser = [],
                winGrdpnlProcessPermissions,
                grdpnlProcessPermissions,
                frmProcessPermissions,
                processPermissionsData,
                btnCreate,btnSave,btnCancel;
        
            var loadDataFromServerToFields = function () {
                var restClient = new PMRestClient({
                    typeRequest: 'post',
                    multipart: true,
                    data: {
                        calls: [
                            {
                                url: 'groups',
                                method: 'GET'
                            }, {
                                url: 'users',
                                method: 'GET'
                            }, {
                                url: 'project/' + PMDesigner.project.id + '/',
                                method: 'GET'
                            }, {
                                url: 'project/' + PMDesigner.project.id + '/dynaforms',
                                method: 'GET'
                            }, {
                                url: 'project/' + PMDesigner.project.id + '/input-documents',
                                method: 'GET'
                            }, {
                                url: 'project/' + PMDesigner.project.id + '/output-documents',
                                method: 'GET'
                            }
                        ]
                    },
                    functionSuccess: function (xhr, response) {
                        var i, data,
                                groups = [],
                                users = [];
                        //groups
                        data = response[0].response;
                        for (i = 0; i <= data.length - 1; i++) {
                            groups.push({value: '2' + '|' + data[i].grp_uid, label: data[i].grp_title});
                        }
                        //users
                        data = response[1].response;
                        for (i = 0; i <= data.length - 1; i++) {
                            users.push({value: '1' + '|' + data[i].usr_uid, label: data[i].usr_firstname + ((data[i].usr_lastname != '') ? ' ' + data[i].usr_lastname : '') + ' (' + data[i].usr_username + ')'});
                        }
                        cboGroupOrUser.clearOptions();
                        cboGroupOrUser.setOptions([
                            {
                                label: 'Groups'.translate(),
                                options: groups
                            }, {
                                label: 'Users'.translate(),
                                options: users
                            }
                        ]);
                        //project
                        data = response[2].response;
                        cboTargetTask.clearOptions();
                        cboOriginTask.clearOptions();
                        cboTargetTask.addOption({value: '', label: 'All Tasks'.translate()});
                        cboOriginTask.addOption({value: '', label: 'All Tasks'.translate()});
                        for (i = 0; i <= data.diagrams[0].activities.length - 1; i++) {
                            cboTargetTask.addOption({value: data.diagrams[0].activities[i].act_uid, label: data.diagrams[0].activities[i].act_name});
                            cboOriginTask.addOption({value: data.diagrams[0].activities[i].act_uid, label: data.diagrams[0].activities[i].act_name});
                        }
                        //project/dynaforms
                        data = response[3].response;
                        cboDynaForm.clearOptions();
                        cboDynaForm.addOption({value: '', label: 'All'.translate()});
                        for (i = 0; i <= data.length - 1; i++) {
                            cboDynaForm.addOption({value: data[i].dyn_uid, label: data[i].dyn_title});
                        }
                        //project/input-documents
                        data = response[4].response;
                        cboInputDocument.clearOptions();
                        cboInputDocument.addOption({value: '', label: 'All'.translate()});
                        for (i = 0; i <= data.length - 1; i++) {
                            cboInputDocument.addOption({value: data[i].inp_doc_uid, label: data[i].inp_doc_title});
                        }
                        //project/output-documents
                        data = response[5].response;
                        cboOutputDocument.clearOptions();
                        cboOutputDocument.addOption({value: '', label: 'All'.translate()});
                        for (i = 0; i <= data.length - 1; i++) {
                            cboOutputDocument.addOption({value: data[i].out_doc_uid, label: data[i].out_doc_title});
                        }
                    }
                });
                restClient.setBaseEndPoint('');
                restClient.executeRestClient();
            };

            disableAllItems = function ()
            {
                winGrdpnlProcessPermissions.getItems()[0].setVisible(false);
                winGrdpnlProcessPermissions.getItems()[1].setVisible(false);

                btnSave.setVisible(false);
                btnCancel.setVisible(false);
                winGrdpnlProcessPermissions.hideFooter();

            }

            var refreshGridPanelInMainWindow = function (load)
            {
                disableAllItems();
                PROCESS_PERMISSIONS_OPTION = "";
                PROCESS_PERMISSIONS_UID = "";
                winGrdpnlProcessPermissions.getItems()[0].setVisible(true);
                winGrdpnlProcessPermissions.setTitle("Process Permissions".translate());
                load = load != null ? load : true;
                if (load) {
                    processPermissionsGetRestProxy(grdpnlProcessPermissions);
                }
            };

            var listProcessPermissions;
            var processPermissionsGetRestProxy = function (grdpnl)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permissions",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        listProcessPermissions = response;
                        grdpnl.setDataItems(listProcessPermissions);
                        grdpnl.sort('group_user', 'asc');
                    }
                });

                restProxy.executeRestClient();
            };

            var processPermissionsPostRestProxy = function (data)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permission",
                    typeRequest: "post",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    messageSuccess : 'Permission saved successfully'.translate(),
                    flashContainer: grdpnlProcessPermissions
                });
                restProxy.executeRestClient();
            };

            var processPermissionGetRestProxy = function (processPermissionsUid)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permission/" + processPermissionsUid,
                    typeRequest: "get",
                    functionSuccess : function (xhr, response)
                    {
                        var data = response;
                        processPermissionsSetForm("PUT", data);
                    }
                });
                restProxy.executeRestClient();
            };

            var processPermissionsPutRestProxy = function (processPermissionsUid, data)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permission/" + processPermissionsUid,
                    typeRequest: "update",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    messageSuccess : 'Permission updated successfully'.translate(),
                    flashContainer: grdpnlProcessPermissions
                });
                restProxy.executeRestClient();
            };

            var cboGroupOrUserSetOptionsRestProxy = function (cboGroupOrUser)
            {
                //Groups
                arrayCboGroup = [];
                arrayCboUser = [];
                var arrayOptions = [];
                var restProxy = new PMRestClient({
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        for (var i = 0; i <= data.length - 1; i++) {
                            arrayCboGroup.push({value: "2" + "|" + data[i].grp_uid, label: data[i].grp_title});
                        }
                    }
                });
                restProxy.setBaseEndPoint("groups");
                restProxy.executeRestClient();

                //Users
                var restProxy = new PMRestClient({
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        for (var i = 0; i <= data.length - 1; i++) {
                            arrayCboUser.push({value: "1" + "|" + data[i].usr_uid, label: data[i].usr_firstname + ((data[i].usr_lastname != "")? " " + data[i].usr_lastname : "") + " (" + data[i].usr_username + ")"});
                        }
                    }
                });

                restProxy.setBaseEndPoint("users");
                restProxy.executeRestClient();
                arrayOptions = [
                    {
                        label: "Groups".translate(),
                        options: arrayCboGroup
                    },
                    {
                        label: "Users".translate(),
                        options: arrayCboUser
                    }
                ]
                cboGroupOrUser.clearOptions();
                cboGroupOrUser.setOptions(arrayOptions);
            };

            var cboTargetCboOriginTaskSetOptionsRestProxy = function (cboTargetTask, cboOriginTask)
            {
                cboTargetTask.clearOptions();
                cboOriginTask.clearOptions();
                var restProxy = new PMRestClient({
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        cboTargetTask.addOption({value: "", label: "All Tasks".translate()});
                        cboOriginTask.addOption({value: "", label: "All Tasks".translate()});
                        for (var i = 0; i <= data.diagrams[0].activities.length - 1; i++) {
                            cboTargetTask.addOption({value: data.diagrams[0].activities[i].act_uid, label: data.diagrams[0].activities[i].act_name});
                            cboOriginTask.addOption({value: data.diagrams[0].activities[i].act_uid, label: data.diagrams[0].activities[i].act_name});
                        }
                    }
                });

                restProxy.executeRestClient();
            };

            var cboDynaFormSetOptionsRestProxy = function (cboDynaForm)
            {
                cboDynaForm.clearOptions();
                var restProxy = new PMRestClient({
                    endpoint: "dynaforms",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        cboDynaForm.addOption({value: "", label: "All".translate()});
                        for (var i = 0; i <= data.length - 1; i++) {
                            cboDynaForm.addOption({value: data[i].dyn_uid , label: data[i].dyn_title});
                        }
                    }
                });
                restProxy.executeRestClient();
            };

            var cboInputDocumentSetOptionsRestProxy = function (cboInputDocument)
            {
                cboInputDocument.clearOptions();
                var restProxy = new PMRestClient({
                    endpoint: "input-documents",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        cboInputDocument.addOption({value: "", label: "All".translate()});
                        for (var i = 0; i <= data.length - 1; i++) {
                            cboInputDocument.addOption({value: data[i].inp_doc_uid, label: data[i].inp_doc_title});
                        }
                    }
                });
                restProxy.executeRestClient();
            };

            var cboOutputDocumentSetOptionsRestProxy = function (cboOutputDocument)
            {
                cboOutputDocument.clearOptions();
                var restProxy = new PMRestClient({
                    endpoint: "output-documents",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        cboOutputDocument.addOption({value: "", label: "All".translate()});
                        for (var i = 0; i <= data.length - 1; i++) {
                            cboOutputDocument.addOption({value: data[i].out_doc_uid, label: data[i].out_doc_title});
                        }
                    }
                });
                restProxy.executeRestClient();
            };

            var processPermissionsSetFormByType = function (type)
            {
                cboPermission.removeOption("DELETE");
                cboPermission.removeOption("RESEND");

                cboDynaForm.setVisible(false);
                cboInputDocument.setVisible(false);
                cboOutputDocument.setVisible(false);
                cboPermission.setVisible(false);

                switch (type) {
                    case "DYNAFORM":
                        cboDynaForm.setVisible(true);
                        cboPermission.setVisible(true);
                        break;
                    case "INPUT":
                        cboPermission.addOption({value: "DELETE", label: "Delete".translate()});

                        cboInputDocument.setVisible(true);
                        cboPermission.setVisible(true);
                        break;
                    case "OUTPUT":
                        cboPermission.addOption({value: "DELETE", label: "Delete".translate()});

                        cboOutputDocument.setVisible(true);
                        cboPermission.setVisible(true);
                        break;
                    case "CASES_NOTES":
                        break;
                    case "MSGS_HISTORY":
                        cboPermission.addOption({value: "RESEND", label: "Resend".translate()});

                        cboPermission.setVisible(true);
                        break;
                    case "ANY":
                        cboPermission.setVisible(true);
                        break;
                }
            };

            var processPermissionsDeleteRestProxy = function (processPermissionsUid)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permission/" + processPermissionsUid,
                    typeRequest: "remove",
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    messageSuccess : 'Permission deleted successfully'.translate(),
                    flashContainer: grdpnlProcessPermissions
                });
                restProxy.executeRestClient();
            };

            var processPermissionsSetForm = function (option, data)
            {
                processPermissionsData = data
                PROCESS_PERMISSIONS_OPTION = option;
                PROCESS_PERMISSIONS_UID = (typeof(processPermissionsData.op_uid) != "undefined")? processPermissionsData.op_uid : "";

                disableAllItems();
                winGrdpnlProcessPermissions.showFooter();
                btnSave.setVisible(true);
                btnCancel.setVisible(true);
                winGrdpnlProcessPermissions.getItems()[1].setVisible(true);
                
                loadDataFromServerToFields();

                switch (option) {
                    case "POST":
                        winGrdpnlProcessPermissions.setTitle("Create Process Permissions".translate());
                        frmProcessPermissions.reset();
                        processPermissionsSetFormByType(cboType.getValue());
                        break;
                    case "PUT":
                        winGrdpnlProcessPermissions.setTitle("Edit Process Permissions".translate());
                        cboStatusCase.setValue(processPermissionsData.op_case_status);
                        cboTargetTask.setValue(processPermissionsData.tas_uid);
                        cboGroupOrUser.setValue(processPermissionsData.op_user_relation + "|" + processPermissionsData.usr_uid);
                        cboParticipationRequired.setValue(processPermissionsData.op_participate);
                        cboType.setValue(processPermissionsData.op_obj_type);
                        cboOriginTask.setValue(processPermissionsData.op_task_source);
                        processPermissionsSetFormByType(processPermissionsData.op_obj_type);
                        switch (processPermissionsData.op_obj_type) {
                            case "ANY":
                                break;
                            case "DYNAFORM":
                                cboDynaForm.setValue(processPermissionsData.op_obj_uid);
                                cboPermission.setValue(processPermissionsData.op_action);
                                break;
                            case "INPUT":
                                cboInputDocument.setValue(processPermissionsData.op_obj_uid);
                                cboPermission.setValue(processPermissionsData.op_action);
                                break;
                            case "OUTPUT":
                                cboOutputDocument.setValue(processPermissionsData.op_obj_uid);
                                cboPermission.setValue(processPermissionsData.op_action);
                                break;
                            case "CASES_NOTES":
                                break;
                            case "MSGS_HISTORY":
                                cboPermission.setValue(processPermissionsData.op_action);
                                break;
                        }
                        break;
                }
                frmProcessPermissions.setFocus();
            };

            var cboStatusCase = new PMUI.field.DropDownListField({
                id: "cboStatusCase",
                name: "cboStatusCase",
                controlsWidth:"120px",
                label: "Status Case".translate(),
                value: "ALL",
                options: [
                    {
                        value: "ALL",
                        label: "All".translate()
                    },
                    {
                        value: "DRAFT",
                        label: "DRAFT".translate()
                    },
                    {
                        value: "TO_DO",
                        label: "TO DO".translate()
                    },
                    {
                        value: "PAUSED",
                        label: "PAUSED".translate()
                    },
                    {
                        value: "COMPLETED",
                        label: "COMPLETED".translate()
                    }
                ]
            });

            var cboTargetTask = new PMUI.field.DropDownListField({
                id: "cboTargetTask",
                name: "cboTargetTask",
                controlsWidth:"300px",
                label: "Target Task".translate(),
                options: null
            });

            
            var cboGroupOrUser = new PMUI.field.DropDownListField({
                id: "cboGroupOrUser",
                name: "cboGroupOrUser",
                required: true,
                controlsWidth:"300px",
                label: "Group or User".translate(),
                options: [
                    {
                        label: "Groups".translate(),
                        options: arrayCboGroup
                    },
                    {
                        label: "Users".translate(),
                        options: arrayCboUser
                    }
                ]
            });

            var cboOriginTask = new PMUI.field.DropDownListField({
                id: "cboOriginTask",
                name: "cboOriginTask",
                controlsWidth: "300px",
                label: "Origin Task".translate(),
                options: null
            });

            var cboParticipationRequired = new PMUI.field.DropDownListField({
                id: "cboParticipationRequired",
                name: "cboParticipationRequired",
                controlsWidth:"70px",
                label: "Participation required?".translate(),
                value: "0",
                options: [
                    {
                        value: "0",
                        label: "No".translate()
                    },
                    {
                        value: "1",
                        label: "Yes".translate()
                    }
                ]
            });

            var cboType = new PMUI.field.DropDownListField({
                id: "cboType",
                name: "cboType",
                controlsWidth: "180px",
                label: "Type".translate(),
                value: "ANY",
                options: [
                    {
                        value: "ANY",
                        label: "All".translate()
                    },
                    {
                        value: "DYNAFORM",
                        label: "Dynaform".translate()
                    },
                    {
                        value: "INPUT",
                        label: "Input Document".translate()
                    },
                    {
                        value: "OUTPUT",
                        label: "Output Document".translate()
                    },
                    {
                        value: "CASES_NOTES",
                        label: "Cases Notes".translate()
                    },
                    {
                        value: "MSGS_HISTORY",
                        label: "Messages History".translate()
                    }
                ],
                onChange: function (newValue, prevValue)
                {
                    processPermissionsSetFormByType(cboType.getValue());
                }
            });

            var cboDynaForm = new PMUI.field.DropDownListField({
                id: "cboDynaForm",
                name: "cboDynaForm",
                 controlsWidth: "300px",
                label: "DynaForm".translate(),
                options: null,
                visible: false
            });

            var cboInputDocument = new PMUI.field.DropDownListField({
                id: "cboInputDocument",
                name: "cboInputDocument",
                controlsWidth: "300px",
                label: "Input Document".translate(),
                options: null,
                visible: false
            });

            var cboOutputDocument = new PMUI.field.DropDownListField({
                id: "cboOutputDocument",
                name: "cboOutputDocument",
                controlsWidth: "300px",
                label: "Output Document".translate(),
                options: null,
                visible: false
            });

            var cboPermission = new PMUI.field.DropDownListField({
                id: "cboPermission",
                name: "cboPermission",
                controlsWidth: "100px",
                label: "Permission".translate(),
                value: "VIEW",
                options: [
                    {
                        value: "VIEW",
                        label: "View".translate()
                    },
                    {
                        value: "BLOCK",
                        label: "Block".translate()
                    }
                ],
                visible: true
            });

            var btnSave = new PMUI.ui.Button({
                id: "btnSave",
                text: "Save".translate(),
                buttonType:"success",
                height: 31,
                handler: function ()
                {
                    if (frmProcessPermissions.isValid()) {
                        var cboGroupOrUserValue = cboGroupOrUser.getValue();
                        var groupOrUser = cboGroupOrUserValue.split("|");

                        var data = {
                            op_case_status: cboStatusCase.getValue(),
                            tas_uid: cboTargetTask.getValue() === '0' ? '' : cboTargetTask.getValue(),
                            op_user_relation: groupOrUser[0],
                            usr_uid: groupOrUser[1],
                            op_task_source: cboOriginTask.getValue() === '0' ? '' : cboOriginTask.getValue(),
                            op_participate: cboParticipationRequired.getValue()
                        };

                        switch (cboType.getValue()) {
                            case "DYNAFORM":
                                data["op_obj_type"] = cboType.getValue();
                                data["dynaforms"] = cboDynaForm.getValue();
                                data["op_action"] = cboPermission.getValue();
                                break;
                            case "INPUT":
                                data["op_obj_type"] = cboType.getValue();
                                data["inputs"] = cboInputDocument.getValue();
                                data["op_action"] = cboPermission.getValue();
                                break;
                            case "OUTPUT":
                                data["op_obj_type"] = cboType.getValue();
                                data["outputs"] = cboOutputDocument.getValue();
                                data["op_action"] = cboPermission.getValue();
                                break;
                            case "CASES_NOTES":
                                data["op_obj_type"] = cboType.getValue();
                                data["op_action"] = cboPermission.getValue();
                                break;
                            default:
                                data["op_obj_type"] = cboType.getValue();
                                data["op_action"] = cboPermission.getValue();
                                break;
                        }

                        switch (PROCESS_PERMISSIONS_OPTION) {
                            case "POST":
                                processPermissionsPostRestProxy(data);
                                break;
                            case "PUT":
                                processPermissionsPutRestProxy(PROCESS_PERMISSIONS_UID, data);
                                break;
                        }
                    }
                }
            });

            var btnCancel = new PMUI.ui.Button({
                id: "btnCancel",
                text: "Cancel".translate(),
                buttonType:"link",
                height: 31,
                handler: function ()
                {
                    if (frmProcessPermissions.isDirty()){
                        var message_window = new PMUI.ui.MessageWindow({
                            id: "cancelMessageTriggers",
                            windowMessageType: 'warning',
                            width: 490,
                            title: 'Confirm'.translate(),
                            message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                            footerItems: [
                                {
                                    text: "Yes".translate(),
                                    height: 40,
                                    handler: function() {
                                         message_window.close();
                                         PROCESS_PERMISSIONS_OPTION = "";
                                         PROCESS_PERMISSIONS_UID = "";

                                         refreshGridPanelInMainWindow(false);
                                     }
                                },
                                {
                                    pmType: 'label',
                                    text: "or".translate()
                                },
                                {
                                    text: "No".translate(),
                                    height: 40,
                                    buttonType: 'link',
                                    handler: function() {
                                         message_window.close();
                                     }
                                }
                            ]
                        });
                        message_window.open();
                        message_window.showFooter();
                    } else {
                        PROCESS_PERMISSIONS_OPTION = "";
                        PROCESS_PERMISSIONS_UID = "";

                        refreshGridPanelInMainWindow(false);
                    }
                }
            });

            frmProcessPermissions = new PMUI.form.Form({
                id: "frmProcessPermissions",

                title: "",
                width: "890px",
                height: "375px",
                items: [
                    cboStatusCase,
                    cboTargetTask,
                    cboGroupOrUser,
                    cboOriginTask,
                    cboParticipationRequired,
                    cboType,
                    cboDynaForm,
                    cboInputDocument,
                    cboOutputDocument,
                    cboPermission
                ]
            });

            btnCreate = new PMUI.ui.Button({
                id: "btnCreate",
                text: "Create".translate(),
                height:"36px",
                width : 100,
                style: {
                    cssClasses: [
                        "mafe-button-create"
                    ]
                },

                handler: function ()
                {
                    processPermissionsSetForm("POST", {});
                }
            });

            grdpnlProcessPermissions = new PMUI.grid.GridPanel({
                id: "grdpnlProcessPermissions",
                filterPlaceholder: "Text to Search".translate(),
                emptyMessage : 'No records found'.translate(),
                nextLabel: 'Next'.translate(),
                previousLabel: 'Previous'.translate(),
                customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                    return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
                },
                pageSize:10,
                width: "96%",
                //height: DEFAULT_WINDOW_HEIGHT - 60,
                style:{
                     cssClasses:["mafe-gridPanel"]                     
                },
                filterable: true,
                columns: [
                    {
                        columnData: "group_user",
                        title: "Group or User".translate(),
                        alignmentCell: 'left',
                        width: "190px",
                        sortable: true
                    },
                    {
                        columnData: "participated",
                        title: "Participation".translate(),
                        alignmentCell: 'left',
                        width: "115px",
                        sortable: true
                    },
                    {
                        columnData: "op_obj_type",
                        title: "Type".translate(),
                        alignmentCell: 'left',
                        width: "100px",
                        sortable: true
                    },
                    {
                        columnData: "object",
                        title: "Object".translate(),
                        alignmentCell: 'left',
                        width: "158px",
                        sortable: true
                    },
                    {
                        columnData: "op_action",
                        title: "Permission".translate(),
                        alignmentCell: 'left',
                        width: "100px",
                        sortable: true
                    },
                    {
                        columnData: "op_case_status",
                        title: "Status".translate(),
                        alignmentCell: 'left',
                        width: "70px",
                        sortable: true
                    },
                    {
                        id: 'grdpnlProcessPermissionsButtonEdit',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Edit".translate(),
                        width: "70px",
                        buttonStyle: {
                            cssClasses: [
                                "mafe-button-edit"
                            ]
                        },

                        onButtonClick: function(row, grid)
                        {
                            var data = row.getData();
                            processPermissionGetRestProxy(data.op_uid);
                        }
                    },
                    {
                        id: 'grdpnlProcessPermissionsButtonDelete',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Delete".translate(),
                        width: "80px",
                        buttonStyle: {
                            cssClasses: [
                                "mafe-button-delete"
                            ]
                        },

                        onButtonClick: function(row, grid)
                        {
                            var data = row.getData();

                            var msgWarning = new PMUI.ui.MessageWindow({
                                id: "msgWarning",
                                windowMessageType: 'error',
                                width: 490,
                                message: "Do you want to delete this permission?".translate(),
                                footerItems: [
                                    {
                                        id: 'msgWarningButtonYes',
                                        text: "Accept".translate(),
                                        height: 40,
                                        handler: function ()
                                        {
                                            processPermissionsDeleteRestProxy(data.op_uid);
                                            msgWarning.close();
                                        }
                                    },
                                    {
                                        text: "or".translate(),
                                        pmType: 'label'
                                    },
                                    {
                                        id: 'msgWarningButtonNo',
                                        text: "Cancel".translate(),
                                        buttonType: 'link',
                                        height: 40,
                                        handler: function ()
                                        {
                                            msgWarning.close();
                                        }
                                    }
                                ]
                            });

                            msgWarning.open();
                            msgWarning.dom.titleContainer.style.height = '17px';
                            msgWarning.showFooter();
                        }
                    }
                ],
                dataItems: null
            });

            winGrdpnlProcessPermissions = new PMUI.ui.Window({
                id: "winGrdpnlProcessPermissions",
                title: "Process Permissions".translate(),
                width: DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT,
                buttonPanelPosition : "top",
                buttons: [
                          btnSave,
                           {
                            pmType: 'label',
                            text: "or".translate(),
                            style : {
                                cssProperties :{
                                    'fontSize': '14px'
                                }
                            }
                          },
                          btnCancel
                          ]
            });

            winGrdpnlProcessPermissions.addItem(grdpnlProcessPermissions);
            winGrdpnlProcessPermissions.addItem(frmProcessPermissions);

            refreshGridPanelInMainWindow();
            if (typeof listProcessPermissions !== "undefined") {
                winGrdpnlProcessPermissions.open();
                $('#grdpnlProcessPermissions .pmui-textcontrol').css({'margin-top':'5px', width:'250px'});
                winGrdpnlProcessPermissions.defineEvents();
                applyStyleWindowForm(winGrdpnlProcessPermissions);

                grdpnlProcessPermissions.dom.toolbar.appendChild(btnCreate.getHTML());
                btnCreate.defineEvents();
                disableAllItems();
                refreshGridPanelInMainWindow();
            }
            
        };
    }()
);

(function () {
    var winHtmlShow, loadValuesStartMessage;

    PMDesigner.startMessage = function (element) {
        var winGrdpnlStartMessage,
                btnNew,
                cboUser,
                cboDynaForm,
                btnGenerateStartMessagePage,
                frmDataStartMessage,
                frmHtml,
                winFrmDataStartMessage,
                restProxy,
                listUsers = [],
                listDynaforms = [],
                dataForm = [],
                startMessage = element;

        disableAllItems = function () {
            winGrdpnlStartMessage.getItems()[0].setVisible(false);
            winGrdpnlStartMessage.getItems()[1].setVisible(false);
            btnGenerateStartMessagePage.setVisible(false);
            btnStartMessageCancel.setVisible(false);
            btnClose.setVisible(false);
            winGrdpnlStartMessage.hideFooter();
        }

        winFrmStartMessageShow = function () {
            disableAllItems();
            frmDataStartMessage.reset();
            winGrdpnlStartMessage.showFooter();
            winGrdpnlStartMessage.getItems()[0].setVisible(true);
            btnGenerateStartMessagePage.setVisible(true);
            btnStartMessageCancel.setVisible(true);
            loadDataUsers();
            loadDataDynaform();
            loadDataForm();
            frmDataStartMessage.setFocus();
        };

        winHtmlShow = function (msgHtml) {
            if (typeof msgHtml == 'undefined') {
                msgHtml = dataForm.we_data;
                if (dataForm.we_method == "WS") {
                    window.open(msgHtml);
                    winGrdpnlStartMessage.close();
                    return false;
                }
            }
            disableAllItems();
            winGrdpnlStartMessage.showFooter();
            winGrdpnlStartMessage.footer.getItems()[1].setVisible(false);
            btnClose.setVisible(true);
            winGrdpnlStartMessage.getItems()[1].setVisible(true);
            winGrdpnlStartMessage.getItems()[1].setWidth(925);
            winGrdpnlStartMessage.getItems()[1].setHeight(440);
            winGrdpnlStartMessage.getItems()[1].hideHeader();
            frmHtml.getFields()[0].setHeight(396);
            frmHtml.getItems()[0].setValue(msgHtml);
            frmHtml.panel.style.addProperties({'box-sizing': 'initial'});
            frmHtml.style.addProperties({marginLeft: '16px'});
            frmHtml.setFocus();
            return true;
        };

        loadValuesStartMessage = function (flag) {
            listUsers = [];
            listDynaforms = [];
            dataForm = [];
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'activity/' + startMessage.ports.get(0).connection.flo_element_dest + '/assignee/all',
                            method: 'GET'
                        },
                        {
                            url: "activity/" + startMessage.ports.get(0).connection.flo_element_dest + "/steps",
                            method: 'GET'
                        }, {
                            url: 'web-entry/' + startMessage.evn_uid,
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    listUsers = response[0].response;
                    listDynaforms = response[1].response;
                    dataForm = response[2].response;
                }
            });
            restClient.executeRestClient();
            if (flag) {
                var viewFlagForm = false;
                if (typeof dataForm == 'object' && dataForm.we_data != null) {
                    viewFlagForm = true;
                }
                var response = [listUsers.length, listDynaforms.length, viewFlagForm];
                return response;
            }
            return true;
        }

        var updateStartMessage = function (data) {
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: "web-entry/" + startMessage.evn_uid,
                            method: 'PUT',
                            data: data
                        },
                        {
                            url: 'web-entry/' + startMessage.evn_uid,
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    dataForm = response[1].response;
                    if (data.we_method == "HTML") {
                        winHtmlShow(response.we_data);
                    }
                    btnGenerateStartMessagePage.setVisible(false);
                    btnStartMessageCancel.setVisible(false);
                    btnClose.setVisible(true);
                    winGrdpnlStartMessage.footer.getItems()[1].setVisible(false);
                },
                messageError: ["There are problems updating the Web Entry, please try again.".translate()],
                messageSuccess: ['Web Entry updated successfully'.translate()],
                flashContainer: frmDataStartMessage
            });
            restClient.executeRestClient();
        };

        var loadDataDynaform = function () {
            cboDynaForm.clearOptions();
            for (var i = 0; i <= listDynaforms.length - 1; i++) {
                if (listDynaforms[i].step_type_obj == "DYNAFORM") {
                    cboDynaForm.addOption({
                        value: listDynaforms[i].step_uid_obj,
                        label: listDynaforms[i].obj_title
                    });
                }
            }
        };

        var loadDataUsers = function () {
            cboUser.clearOptions();
            for (var i = 0; i <= listUsers.length - 1; i++) {
                cboUser.addOption({
                    value: listUsers[i].aas_uid,
                    label: listUsers[i].aas_name + ' ' + listUsers[i].aas_lastname
                });
            }
        };

        loadDataForm = function () {
            cboUser.setValue(dataForm.usr_uid);
            cboDynaForm.setValue(dataForm.dyn_uid);
            cboMethod.setValue(dataForm.we_method);
        };

        enableGenerateWebEntry = function () {
            btnGenerateStartMessagePage.setVisible(true);
            btnStartMessageCancel.setVisible(true);
            btnClose.setVisible(false);
            winGrdpnlStartMessage.footer.getItems()[1].setVisible(true);
        };
        cboUser = new PMUI.field.DropDownListField({
            id: "cboUser",
            name: "cboUser",
            label: "User".translate(),
            required: true,
            options: null,
            onChange: function (newVal, oldVal) {
                enableGenerateWebEntry();
            },
            controlsWidth: 350
        });

        cboDynaForm = new PMUI.field.DropDownListField({
            id: "cboDynaForm",
            name: "cboDynaForm",
            label: "Initial Dynaform".translate(),
            options: null,
            required: true,
            onChange: function (newVal, oldVal) {
                enableGenerateWebEntry();
            },
            controlsWidth: 350
        });

        var cboMethod = new PMUI.field.DropDownListField({
            id: "cboMethod",
            name: "cboMethod",
            label: "Method".translate(),
            value: "WS",
            options: [
                {
                    value: "WS",
                    label: "PHP pages with Web Services".translate()
                },
                {
                    value: "HTML",
                    label: "Single HTML".translate()
                }
            ],
            onChange: function (newVal, oldVal) {
                enableGenerateWebEntry();
            },
            controlsWidth: 350
        });

        btnGenerateStartMessagePage = new PMUI.ui.Button({
            id: "btnGenerateStartMessagePage",
            text: "Generate Web Entry Page".translate(),
            handler: function ()
            {
                var flagGenerateStartMessage = 0;

                var data = {
                    tas_uid: startMessage.ports.get(0).connection.flo_element_dest,
                    dyn_uid: cboDynaForm.getValue(),
                    usr_uid: cboUser.getValue(),
                    we_title: startMessage.evn_name,
                    we_description: '',
                    we_method: cboMethod.getValue(),
                    we_input_document_access: 1
                };

                if (frmDataStartMessage.isValid()) {
                    updateStartMessage(data);
                }
            },
            buttonType: 'success',
            height: 31,
            visible: true
        });

        frmDataStartMessage = new PMUI.form.Form({
            id: "frmDataStartMessage",
            title: "",
            width: DEFAULT_WINDOW_WIDTH - 70,
            items: [
                cboUser,
                cboDynaForm,
                cboMethod
            ],
            visibleHeader: false
        });

        btnClose = new PMUI.ui.Button({
            id: "btnClose",
            text: "Close".translate(),
            handler: function ()
            {
                winGrdpnlStartMessage.close();
            },
            buttonType: 'success',
            height: 31
        });

        btnStartMessageCancel = new PMUI.ui.Button({
            id: "btnStartMessageCancel",
            text: "Cancel".translate(),
            handler: function ()
            {
                if (frmDataStartMessage.isDirty()) {
                    var message_window = new PMUI.ui.MessageWindow({
                        windowMessageType: 'warning',
                        id: "cancelMessageStartTimer",
                        title: 'Confirm'.translate(),
                        message: 'Do you want to cancel this action? Your changes will be lost if you cancel it.'.translate(),
                        bodyHeight: 'auto',
                        width: 490,
                        footerItems: [
                            {
                                text: 'Yes'.translate(),
                                height: 40,
                                handler: function () {
                                    message_window.close();
                                    winGrdpnlStartMessage.close();
                                }
                            }, {
                                pmType: 'label',
                                text: 'or'
                            }, {
                                text: 'No'.translate(),
                                buttonType: 'link',
                                handler: function () {
                                    message_window.close();
                                }
                            }
                        ]
                    });
                    message_window.open();
                    message_window.showFooter();
                } else {
                    frmDataStartMessage.reset();
                    winGrdpnlStartMessage.close();
                }
            },
            buttonType: 'link'
        });

        frmHtml = new PMUI.form.Form({
            id: "frmHtml",
            title: "",
            width: DEFAULT_WINDOW_WIDTH - 43,
            items: [
                {
                    id: "txtHtml",
                    name: "txtHtml",
                    pmType: "textarea",
                    valueType: "string",
                    rows: 400,
                    value: '',
                    controlsWidth: DEFAULT_WINDOW_WIDTH - 50,
                    labelVisible: false,
                    style: {cssClasses: ['mafe-textarea-resize']}
                }
            ]
        });

        winGrdpnlStartMessage = new PMUI.ui.Window({
            id: "winGrdpnlStartMessage",
            title: "Start Message Event".translate(),
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            buttonPanelPosition: "top",
            buttons: [btnGenerateStartMessagePage, {pmType: 'label', text: 'or'}, btnStartMessageCancel, btnClose]
        });

        winGrdpnlStartMessage.addItem(frmDataStartMessage);
        winGrdpnlStartMessage.addItem(frmHtml);

        openForm = function () {
            winGrdpnlStartMessage.open();
            winGrdpnlStartMessage.defineEvents();
            applyStyleWindowForm(winGrdpnlStartMessage);

            winGrdpnlStartMessage.footer.html.style.textAlign = 'right';

            winFrmStartMessageShow();
        }
    };

    PMDesigner.startMessage.openForm = function (element) {
        openForm();
    };

    PMDesigner.startMessage.viewForm = function (element) {
        openForm();
        winHtmlShow();
    };

    PMDesigner.startMessage.validate = function (starMessageEvent) {
        if (starMessageEvent.ports.isEmpty()) {
            PMDesigner.msgFlash('Must connect to a Task'.translate(), document.body, 'error', 4000, 5);
            return [false, false];
        }
        PMDesigner.startMessage(starMessageEvent);
        response = loadValuesStartMessage(true);
        if (response[0] == 0) {
            PMDesigner.msgFlash('The task doesn\'t have assigned users'.translate(), document.body, 'info', 4000);
            return [false, false];
        }
        if (response[1] == 0) {
            PMDesigner.msgFlash('The task doesn\'t have assigned Dynaforms'.translate(), document.body, 'info', 4000);
            return [false, false];
        }
        return [true, response[2]];
    }

}());

(function () {
    var windowPropSub;

    PMDesigner.propertiesSubProcess = function (activity) {
        var typeVariables = ['@@', '@#', '@='];

        restClient = new PMRestClient({
            endpoint: 'projects',
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                for (var i = 0; i < response.length; i++) {
                    if (response[i].prj_uid != PMDesigner.project.projectId) {
                        formProperties.getField('out_doc_process').addOption({label: response[i].prj_name, value: response[i].prj_uid});
                    }
                }
            },
            messageError: "There are problems getting the output documents, please try again.".translate()
        });

        var getSubProcess = function () {
            var restProxy = new PMRestClient({
                endpoint: "subprocess/" + activity.act_uid,
                typeRequest: "get",
                functionSuccess: function (xhr, response)
                {
                    formProperties.getField('out_doc_title').setValue(response.spr_name);
                    formProperties.getField('out_doc_process').setValue(response.spr_pro);
                    formProperties.getField('out_doc_type').setValue(response.spr_synchronous);

                    if (response.spr_variables_out != false) {
                        var xout = JSON.stringify(response.spr_variables_out);
                        var yout = xout.substring(1, xout.length - 1);
                        var oout = yout.replace(/"/g, '');
                        var jout = oout.split(',');

                        var itemsOut = [];
                        for (i = 0; i < jout.length; i++) {
                            var dout = jout[i].split(':');
                            itemsOut.push({
                                origin: dout[0],
                                target: dout[1]
                            });
                        }
                        gridVariablesOut.setDataItems(itemsOut);

                        gridVariablesIn.setVisible(false);
                        formVariablesPanelIn.setVisible(false);
                    }

                    if (response.spr_variables_in != false && response.spr_variables_in != undefined) {
                        var xin = JSON.stringify(response.spr_variables_in);
                        var yin = xin.substring(1, xin.length - 1);
                        var oin = yin.replace(/"/g, '');
                        var jin = oin.split(',');

                        var itemsIn = [];
                        for (i = 0; i < jin.length; i++) {
                            var din = jin[i].split(':');
                            itemsIn.push({
                                origin: din[0],
                                target: din[1]
                            });
                        }
                        gridVariablesIn.setDataItems(itemsIn);
                    }

                    if (response.spr_synchronous == "1") {
                        gridVariablesIn.setVisible(true);
                        formVariablesPanelIn.setVisible(true);
                    }
                },
                functionFailure: function (xhr, response) {
                    var msgPost = new PMUI.ui.InfoMessageWindow({
                        id: "messagePostWindow",
                        title: "",
                        message: response.error.message,
                        showCloseButton: true
                    });
                    msgPost.open();
                    msgPost.showFooter();
                }
            });
            restProxy.executeRestClient();
        };

        var updateSubProcess = function (data) {
            var restProxy = new PMRestClient({
                endpoint: "subprocess/" + activity.act_uid,
                typeRequest: "update",
                data: data,
                functionSuccess: function (xhr, response)
                {
                    var name = formProperties.getData().out_doc_title;
                    activity.setName(name);
                    activity.setActName(name);
                    PMDesigner.project.dirty = true;

                    formProperties.reset();
                    gridVariablesOut.setDataItems("");
                    gridVariablesIn.setDataItems("");
                    formProperties.setDirty(false);
                    windowPropertiesSub.close();
                },
                functionFailure: function (xhr, response) {
                    var msgPost = new PMUI.ui.InfoMessageWindow({
                        id: "messagePostWindow",
                        title: "",
                        message: response.error.message,
                        showCloseButton: true
                    });
                    msgPost.open();
                    msgPost.showFooter();
                }
            });
            restProxy.executeRestClient();
        };

        var formVarTexOriginOut = new CriteriaField({
            id: 'idformVarTexOriginOut',
            pmType: "text",
            name: 'nmformVarTexOriginOut',
            placeholder: 'Origin'.translate(),
            labelVisible: false,
            controlsWidth: 150
        });

        var formVarTexOriginIn = new CriteriaField({
            id: 'idformVarTexOriginIn',
            pmType: "text",
            name: 'nmformVarTexOriginIn',
            placeholder: 'Origin'.translate(),
            labelVisible: false,
            controlsWidth: 150
        });

        var formVarTexTargetOut = new CriteriaField({
            id: 'idformVarTexTargetOut',
            pmType: "text",
            name: 'nmformVarTexTargetOut',
            placeholder: 'Target'.translate(),
            labelVisible: false,
            controlsWidth: 150
        });

        var formVarTexTargetIn = new CriteriaField({
            id: 'idformVarTexTargetIn',
            pmType: "text",
            name: 'nmformVarTexTargetIn',
            placeholder: 'Target'.translate(),
            labelVisible: false,
            controlsWidth: 150
        });

        var windowPropertiesSub = new PMUI.ui.Window({
            id: 'propSubWindow',
            title: "Subprocess Properties".translate(),
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            bodyHeight: '465px',
            bodyWidth: '900px',
            buttons: [
                {
                    id: 'propSubButtonSave',
                    text: "Save".translate(),
                    buttonType: 'success',
                    height: 31,
                    handler: function () {
                        if (!formProperties.isValid()) {
                            return;
                        }
                        var propertiesData = formProperties.getData();
                        var variablesOutData = gridVariablesOut.getData();
                        var variablesOut = {};
                        if (variablesOutData.length > "0") {
                            for (i = 0; i < variablesOutData.length; i++) {
                                variablesOut[variablesOutData[i].origin] = variablesOutData[i].target;
                            }
                        }
                        var variablesIn = {};
                        if (propertiesData.out_doc_type == "1") {
                            var variablesInData = gridVariablesIn.getData();
                            if (variablesInData.length > "0") {
                                for (j = 0; j < variablesInData.length; j++) {
                                    variablesIn[variablesInData[j].origin] = variablesInData[j].target;
                                }
                            }
                        }

                        var dataToSend = {
                            spr_pro: propertiesData.out_doc_process,
                            spr_tas: propertiesData.spr_tas,
                            spr_name: propertiesData.out_doc_title,
                            spr_synchronous: propertiesData.out_doc_type,
                            spr_variables_out: variablesOut,
                            spr_variables_in: variablesIn
                        };

                        updateSubProcess(dataToSend);
                    }
                },
                {
                    pmType: 'label',
                    text: "or".translate(),
                    style: {
                        cssProperties: {
                            'fontSize': '14px'
                        }
                    }
                },
                {
                    id: 'propSubButtonClose',
                    text: "Close".translate(),
                    buttonType: 'link',
                    height: 31,
                    handler: function () {
                        if (formProperties.isDirty()) {
                            var message_window = new PMUI.ui.MessageWindow({
                                windowMessageType: 'warning',
                                width: 490,
                                bodyHeight: 'auto',
                                id: "cancelSaveSubprocPropertiesWin",
                                title: 'Confirm'.translate(),
                                message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                                footerItems: [
                                    {
                                        text: "Yes".translate(),
                                        height: 40,
                                        handler: function () {
                                            message_window.close();
                                            formProperties.reset();
                                            gridVariablesOut.setDataItems("");
                                            gridVariablesIn.setDataItems("");
                                            formProperties.setDirty(false);
                                            windowPropertiesSub.close();
                                        }
                                    }, {
                                        pmType: 'label',
                                        text: "or".translate()
                                    }, {
                                        text: "No".translate(),
                                        handler: function () {
                                            message_window.close();
                                        },
                                        buttonType: 'link'
                                    }
                                ]
                            });
                            message_window.open();
                            message_window.showFooter();
                        } else {
                            windowPropertiesSub.close();
                        }
                    }
                }
            ],
            buttonPanelPosition: 'top',
            buttonsPosition: 'center'
        });

        var formProperties = new PMUI.form.Form({
            id: 'propSubForm',
            title: "",
            fieldset: true,
            visibleHeader: false,
            width: 926,
            height: 'auto',
            items: [
                {
                    id: 'propSubFormTitle',
                    pmType: "text",
                    name: 'out_doc_title',
                    label: "SubProcess name".translate(),
                    required: true,
                    controlsWidth: 300
                },
                {
                    id: 'propSubFormProcess',
                    pmType: "dropdown",
                    name: 'out_doc_process',
                    label: "Process".translate(),
                    controlsWidth: 300,
                    required: true,
                    options: [
                        {
                            label: "- Select a process -".translate(),
                            value: "",
                            disabled: true,
                            selected: true
                        }
                    ],
                    value: "",
                    onChange: function (a, b) {
                        formVarTexTargetOut.setProcess(a);
                        formVarTexTargetIn.setProcess(a);
                        loadActivity(a);
                    }
                },
                {
                    id: 'propSubFormActivity',
                    pmType: "dropdown",
                    name: 'spr_tas',
                    label: "Starting task".translate(),
                    controlsWidth: 300,
                    required: true,
                    options: [
                        {
                            label: "- Select a starting task -".translate(),
                            value: "",
                            disabled: true,
                            selected: true
                        }
                    ],
                    value: "",
                    onChange: function (a, b) {
                    }
                },
                {
                    id: 'propSubFormType',
                    pmType: "dropdown",
                    name: 'out_doc_type',
                    label: "Type".translate(),
                    controlsWidth: 150,
                    options: [
                        {
                            label: "Asynchronous".translate(),
                            value: "0"
                        },
                        {
                            label: "Synchronous".translate(),
                            value: "1"
                        }
                    ],
                    value: "0"
                }
            ],
            onChange: function (newValue, prevValue) {
                switch (newValue.value) {
                    case "1" :
                        gridVariablesIn.setVisible(true);
                        gridVariablesIn.style.addProperties({marginLeft: '45px'});
                        formVariablesPanelIn.setVisible(true);
                        formVariablesPanelIn.getItems()[2].setWidth(80);
                        formVariablesPanelIn.getItems()[2].setHeight(31);
                        $(formVariablesPanelIn.html).css({width: '850px', marginLeft: '45px'});
                        windowPropertiesSub.getItems()[4].setVisible(true);
                        break;
                    case "0":
                        gridVariablesIn.setVisible(false);
                        formVariablesPanelIn.setVisible(false);
                        windowPropertiesSub.getItems()[4].setVisible(false);
                        break;
                    default :
                        break;
                }
            }
        });

        var sepInputs = new PMSeparatorLineField({
            controlHeight: '1px',
            controlColor: "#CDCDCD",
            controlsWidth: "890px",
            marginLeft: '0%'
        });

        formProperties.addItem(sepInputs);

        var gridVariablesOut = new PMUI.grid.GridPanel({
            id: 'propSubGridVariablesOut',
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            pageSize: 10,
            width: 850,
            style: {
                cssClasses: ["mafe-gridPanel"]
            },
            columns: [
                {
                    title: 'Origin'.translate(),
                    dataType: 'string',
                    width: '385px',
                    alignmentCell: 'left',
                    columnData: "origin"
                },
                {
                    title: 'Target'.translate(),
                    dataType: 'string',
                    width: '385px',
                    alignmentCell: 'left',
                    columnData: "target"
                },
                {
                    id: 'propSubGridVariablesOutButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: '70px',
                    buttonLabel: 'Delete'.translate(),
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                    }
                }
            ]
        });

        var gridVariablesIn = new PMUI.grid.GridPanel({
            id: 'propSubGridVariablesIn',
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            pageSize: 10,
            width: 850,
            columns: [
                {
                    title: 'Origin'.translate(),
                    dataType: 'string',
                    width: '385px',
                    alignmentCell: 'left',
                    columnData: "origin"
                },
                {
                    title: 'Target'.translate(),
                    dataType: 'string',
                    width: '385px',
                    alignmentCell: 'left',
                    columnData: "target"
                },
                {
                    id: 'propSubGridVariablesInButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: '70px',
                    buttonLabel: 'Delete'.translate(),
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                    }
                }
            ]
        });

        var formVariablesPanelOut = new PMUI.core.Panel({
            id: "formVariablesPanelOut",
            layout: "hbox",
            fieldset: true,
            //label: "Variables Out".translate(),
            //legend: "Variables Out".translate(),
            width: DEFAULT_WINDOW_WIDTH - 70
                    //width: 880,
        });

        var formVariablesPanelIn = new PMUI.core.Panel({
            id: "formVariablesPanelIn",
            layout: "hbox",
            fieldset: true,
            legend: "Variables In".translate(),
            width: DEFAULT_WINDOW_WIDTH - 70
        });

        var validateVariable = function (field) {
            field.controls[0].style.removeClasses(['error'])
            var value = field.getValue();
            if (value == '') {
                PMDesigner.msgWinWarning('Please insert variable before adding to the list.'.translate());
                field.controls[0].style.addClasses(['error'])
                return false;
            }
            if (typeVariables.indexOf(String(value.substring(0, 2))) != -1) {
                return true;
            }
            PMDesigner.msgWinWarning("The value introduced doesn\'t have the correct format with a vallid prefix (@@, @#, @=)".translate());
            field.controls[0].style.addClasses(['error'])
            return false;
        };

        var formVarButtonAddOut = new PMUI.ui.Button({
            id: 'formVarButtonAddOut',
            text: 'Add'.translate(),
            width: 60,
            height: 31,
            visible: false,
            buttonType: "success",
            buttonStyle: {
                cssClasses: [
                    'mafe-button-properties'
                ]
            },
            handler: function () {
                if (validateVariable(formVarTexOriginOut) && validateVariable(formVarTexTargetOut)) {
                    a = formVarTexOriginOut.getValue();
                    b = formVarTexTargetOut.getValue();
                    gridVariablesOut.addDataItem({origin: a, target: b});
                    formVarTexOriginOut.setValue("");
                    formVarTexTargetOut.setValue("");
                }
            }
        });

        var formVarButtonAddIn = new PMUI.ui.Button({
            id: 'formVarButtonAddIn',
            text: 'Add'.translate(),
            width: 60,
            height: 31,
            buttonType: 'success',
            handler: function () {
                if (validateVariable(formVarTexOriginIn) && validateVariable(formVarTexTargetIn)) {
                    a = formVarTexOriginIn.getValue();
                    b = formVarTexTargetIn.getValue();
                    gridVariablesIn.addDataItem({origin: a, target: b});
                    formVarTexOriginIn.setValue("");
                    formVarTexTargetIn.setValue("");
                }
            }
        });

        var labelVariablesOut = new PMUI.ui.TextLabel({
            textMode: 'plain',
            text: 'Variables Out'.translate()
        });

        var labelVariablesIn = new PMUI.ui.TextLabel({
            textMode: 'plain',
            text: 'Variables In'.translate()
        });

        var loadDropProcess = function () {
            formProperties.getField('out_doc_process').clearOptions();
            formProperties.getField('out_doc_process').addOption({label: "- Select a process -".translate(), value: "", disabled: true, selected: true});
        };
        var loadDataServer = function () {
            var restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'projects',
                            method: 'GET'
                        },
                        {
                            url: 'project/' + PMDesigner.project.id + '/subprocess/' + activity.act_uid,
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    var dt;
                    //projects
                    dt = response[0].response;
                    for (var i = 0; i < dt.length; i++) {
                        if (dt[i].prj_uid !== PMDesigner.project.projectId) {
                            formProperties.getField('out_doc_process').addOption({label: dt[i].prj_name, value: dt[i].prj_uid});
                        }
                    }
                    //subprocess
                    dt = response[1].response;
                    formProperties.getField('out_doc_title').setValue(dt.spr_name);
                    formProperties.getField('out_doc_process').setValue(dt.spr_pro === '0' ? '' : dt.spr_pro);
                    formProperties.getField('out_doc_type').setValue(dt.spr_synchronous);

                    if (dt.spr_variables_out !== false) { //Asynchronous
                        var xout = JSON.stringify(dt.spr_variables_out);
                        var itemsOut = [];
                        if (xout != "[]") {
                            var yout = xout.substring(1, xout.length - 1);
                            var oout = yout.replace(/"/g, '');
                            var jout = oout.split(',');
                            for (i = 0; i < jout.length; i++) {
                                var dout = jout[i].split(':');
                                itemsOut.push({
                                    origin: dout[0],
                                    target: dout[1]
                                });
                            }
                        }
                        gridVariablesOut.setDataItems(itemsOut);
                        gridVariablesIn.setVisible(false);
                        formVariablesPanelIn.setVisible(false);
                    }

                    if (dt.spr_variables_in !== false && dt.spr_variables_in !== undefined) { //Synchronous
                        var xin = JSON.stringify(dt.spr_variables_in);
                        var itemsIn = [];
                        if (xin != "[]") {
                            var yin = xin.substring(1, xin.length - 1);
                            var oin = yin.replace(/"/g, '');
                            var jin = oin.split(',');
                            for (i = 0; i < jin.length; i++) {
                                var din = jin[i].split(':');
                                itemsIn.push({
                                    origin: din[0],
                                    target: din[1]
                                });
                            }
                        }
                        gridVariablesIn.setDataItems(itemsIn);
                    }

                    if (dt.spr_synchronous === "1") {
                        gridVariablesIn.setVisible(true);
                        formVariablesPanelIn.setVisible(true);
                    }
                    if (formProperties.getField('out_doc_process').getValue() !== '') {
                        loadActivity(formProperties.getField('out_doc_process').getValue());
                    }
                    formProperties.getField('spr_tas').setValue(dt.spr_tas === '0' ? '' : dt.spr_tas);
                }
            });
            restClient.setBaseEndPoint('');
            restClient.executeRestClient();
        };
        var loadActivity = function (value) {
            var restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'project/' + value + '/starting-tasks',
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    var dt = response[0].response;
                    dt = dt.sort(function (a, b) {
                        return a.act_name.toString().toLowerCase() > b.act_name.toString().toLowerCase();
                    });
                    var dropdown = formProperties.getField('spr_tas');
                    dropdown.clearOptions();
                    dropdown.addOption({
                        value: '',
                        label: '- Select an activity initiated -'.translate()
                    });
                    for (var i = 0; i < dt.length; i++) {
                        dropdown.addOption({
                            value: dt[i].act_uid,
                            label: dt[i].act_name
                        });
                    }
                }
            });
            restClient.setBaseEndPoint('');
            restClient.executeRestClient();
        };

        formVariablesPanelOut.addItem(formVarTexOriginOut);
        formVariablesPanelOut.addItem(formVarTexTargetOut);
        formVariablesPanelOut.addItem(formVarButtonAddOut);

        formVariablesPanelIn.addItem(formVarTexOriginIn);
        formVariablesPanelIn.addItem(formVarTexTargetIn);
        formVariablesPanelIn.addItem(formVarButtonAddIn);

        gridVariablesIn.setVisible(false);
        formVariablesPanelIn.setVisible(false);

        windowPropertiesSub.addItem(formProperties);
        windowPropertiesSub.addItem(new PMUI.ui.TextLabel({
            width: 890,
            text: 'Variables Out'.translate(),
            style: {
                cssProperties: {
                    background: '#aaaaaa',
                    margin: '-15px 10px 10px 15px',
                    color: 'white',
                    padding: '6px',
                    'font-weight': 'bold'
                }
            },
            display: 'block'
        }));
        windowPropertiesSub.addItem(formVariablesPanelOut);
        windowPropertiesSub.addItem(gridVariablesOut);

        windowPropertiesSub.addItem(new PMUI.ui.TextLabel({
            width: 890,
            text: 'Variables In'.translate(),
            style: {
                cssProperties: {
                    background: '#aaaaaa',
                    margin: '-15px 10px 10px 15px',
                    color: 'white',
                    padding: '6px',
                    'font-weight': 'bold'
                }
            },
            display: 'block',
            visible: false
        }));

        windowPropertiesSub.addItem(formVariablesPanelIn);
        windowPropertiesSub.addItem(gridVariablesIn);

        loadDropProcess();
        gridVariablesOut.setDataItems("");
        gridVariablesIn.setDataItems("");
        loadDataServer();

        if (formProperties.getItems()[1].getValue() != "0") {
            formVarTexTargetOut.setProcess(formProperties.getItems()[1].getValue());
            formVarTexTargetIn.setProcess(formProperties.getItems()[1].getValue());
        }
        windowPropertiesSub.open();
        windowPropertiesSub.showFooter();
        applyStyleWindowForm(windowPropertiesSub);
        formVariablesPanelIn.getItems()[0].dom.labelTextContainer.style.display = "none";
        formVariablesPanelIn.getItems()[1].dom.labelTextContainer.style.display = "none";
        formVariablesPanelOut.getItems()[0].dom.labelTextContainer.style.display = "none";
        formVariablesPanelOut.getItems()[1].dom.labelTextContainer.style.display = "none";
        formVariablesPanelOut.style.addProperties({marginLeft: '45px'});
        gridVariablesOut.style.addProperties({marginLeft: '45px'});
        if (formVariablesPanelIn.visible == true) {
            formVariablesPanelIn.style.addProperties({display: "inline-flex", left: '20px', width: '870px', 'margin-top': '15px'});
            formVariablesPanelIn.getItems()[0].style.addProperties({width: "267px"});
            formVariablesPanelIn.getItems()[3].style.addProperties({width: '90px', height: '21px', 'margin-left': '11px', 'text-align': 'center'});
        }

        formVariablesPanelOut.style.addProperties({width: '870px'});

        windowPropertiesSub.defineEvents();
        gridVariablesOut.html.children[0].style.display = "none";
        gridVariablesIn.html.children[0].style.display = "none";
        formProperties.getField('out_doc_title').setFocus();
        formVarButtonAddOut.setHeight(31);
        formVarButtonAddOut.setWidth(80);
        formVarButtonAddOut.setVisible(true);

    };
}());
PMDesigner.activityProperties = function (activity) {
    var formDefinitions;
    var formCaseLabels;
    var dataProperties;
    var formTimingControl;
    var formNotifications;
    var warningChanges = new PMUI.ui.MessageWindow({
        id: 'warningChanges',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title: 'Warning'.translate(),
        message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
        footerItems: [{
                id: 'warningChangesButtonYes',
                text: "Yes".translate(),
                handler: function () {
                    windowProperties.close();
                    warningChanges.close();
                },
                height: 40
            }, {
                pmType: 'label',
                text: "or".translate()
            }, {
                id: 'warningChangesButtonNo',
                text: "No".translate(),
                handler: function () {
                    warningChanges.close();
                },
                height: 40,
                buttonType: 'link'
            }
        ]
    });
    var windowProperties = new PMUI.ui.Window({
        id: 'windowProperties',
        title: 'Activity Properties'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        items: [
            new PMUI.panel.TabPanel({
                id: 'windowPropertiesTabPanel',
                height: 435,
                width: DEFAULT_WINDOW_WIDTH - 50,
                style: {
                    cssProperties: {
                        'margin-left': '10px'
                    }
                },
                items: [
                    {
                        id: 'windowPropertiesTabPanelDefinitions',
                        icon: '',
                        title: 'Definitions'.translate(),
                        panel: formDefinitions = new PMUI.form.Form({
                            id: 'formDefinitions',
                            visibleHeader: false,
                            width: DEFAULT_WINDOW_WIDTH - 250,
                            items: [{
                                    id: 'formDefinitionsUID',
                                    pmType: 'text',
                                    name: 'UID',
                                    valueType: 'string',
                                    label: 'UID'.translate(),
                                    controlsWidth: 300
                                }, {
                                    id: 'formDefinitionsTitle',
                                    pmType: 'text',
                                    name: 'tas_title',
                                    valueType: 'string',
                                    label: 'Title'.translate(),
                                    placeholder: 'Insert a title'.translate(),
                                    required: true,
                                    controlsWidth: 300
                                }, {
                                    id: 'formDefinitionsDescription',
                                    pmType: 'textarea',
                                    name: 'tas_description',
                                    valueType: 'string',
                                    label: 'Description'.translate(),
                                    placeholder: 'Insert a description'.translate(),
                                    rows: 100,
                                    controlsWidth: 300,
                                    style: {cssClasses: ['mafe-textarea-resize']}
                                }, new CriteriaField({
                                    id: 'formDefinitionsVariable',
                                    pmType: 'text',
                                    name: 'tas_priority_variable',
                                    valueType: 'string',
                                    label: 'Variable for Case priority'.translate(),
                                    controlsWidth: 300
                                }), {
                                    id: 'formDefinitionsRouting',
                                    pmType: 'dropdown',
                                    name: 'tas_derivation_screen_tpl',
                                    valueType: 'string',
                                    label: 'Routing Screen Template'.translate(),
                                    controlsWidth: 150
                                }
                            ]
                        })
                    },
                    {
                        id: 'windowPropertiesTabPanelCaseLabels',
                        icon: '',
                        title: 'Case Labels'.translate(),
                        panel: formCaseLabels = new PMUI.form.Form({
                            id: 'formCaseLabels',
                            visibleHeader: false,
                            width: DEFAULT_WINDOW_WIDTH - 250,
                            items: [new CriteriaField({
                                    id: 'formCaseLabelsTitle',
                                    pmType: 'text',
                                    name: 'tas_def_title',
                                    valueType: 'string',
                                    label: 'Title'.translate(),
                                    placeholder: 'Insert a title'.translate(),
                                    controlsWidth: DEFAULT_WINDOW_WIDTH - 527
                                }), new CriteriaField({
                                    id: 'formCaseLabelsDescription',
                                    pmType: 'textarea',
                                    name: 'tas_def_description',
                                    valueType: 'string',
                                    label: 'Description'.translate(),
                                    placeholder: 'Insert a description'.translate(),
                                    rows: 100,
                                    controlsWidth: DEFAULT_WINDOW_WIDTH - 527,
                                    renderType: 'textarea'
                                })
                            ]
                        })
                    },
                    {
                        id: 'windowPropertiesTabPanelTimingControl',
                        icon: '',
                        title: 'Timing Control'.translate(),
                        panel: formTimingControl = new PMUI.form.Form({
                            id: 'formTimingControl',
                            visibleHeader: false,
                            width: DEFAULT_WINDOW_WIDTH - 250,
                            items: [{
                                    id: 'formTimingControlFly',
                                    pmType: 'checkbox',
                                    name: 'tas_transfer_fly',
                                    labelVisible: false,
                                    options: [{
                                            id: 'formTimingControlOption',
                                            label: 'Allow user defined timing control'.translate(),
                                            value: '1'
                                        }
                                    ],
                                    onChange: function (val) {
                                        changeTimingControl(this.controls[0].selected);
                                    }
                                }, {
                                    id: 'formTimingControlTask',
                                    pmType: 'text',
                                    name: 'tas_duration',
                                    valueType: 'string',
                                    label: 'Task duration'.translate(),
                                    required: true,
                                    maxLength: 3,
                                    controlsWidth: 300
                                }, {
                                    id: 'formTimingControlTime',
                                    pmType: 'dropdown',
                                    name: 'tas_timeunit',
                                    label: 'Time unit'.translate(),
                                    controlsWidth: 100,
                                    options: [{
                                            id: 'formTimingControlTime1',
                                            label: 'Hours'.translate(),
                                            value: 'HOURS'
                                        }, {
                                            id: 'formTimingControlTime2',
                                            label: 'Days'.translate(),
                                            value: 'DAYS'
                                        }
                                    ]
                                }, {
                                    id: 'formTimingControlCount',
                                    pmType: 'dropdown',
                                    name: 'tas_type_day',
                                    label: 'Count days by'.translate(),
                                    controlsWidth: 150,
                                    options: [{
                                            id: 'formTimingControlCount1',
                                            label: 'Work Days'.translate(),
                                            value: 1
                                        }, {
                                            id: 'formTimingControlCount2',
                                            label: 'Calendar Days'.translate(),
                                            value: 2
                                        }
                                    ]
                                }, {
                                    id: 'formTimingControlCalendar',
                                    pmType: 'dropdown',
                                    name: 'tas_calendar',
                                    label: 'Calendar'.translate(),
                                    options: [],
                                    controlsWidth: 150
                                }
                            ]
                        })
                    },
                    {
                        id: 'windowPropertiesTabPanelNotifications',
                        icon: '',
                        title: 'Notifications'.translate(),
                        panel: formNotifications = new PMUI.form.Form({
                            id: 'formNotifications',
                            visibleHeader: false,
                            width: DEFAULT_WINDOW_WIDTH - 250,
                            items: [{
                                    id: 'formNotificationsTasSend',
                                    pmType: 'checkbox',
                                    name: 'tas_send_last_email',
                                    labelVisible: false,
                                    options: [{
                                            id: 'formNotificationsTasSend1',
                                            label: 'After routing notify the next assigned user(s)'.translate(),
                                            value: '1'
                                        }
                                    ],
                                    onChange: function (val) {
                                        changeFormNotifications(this.controls[0].selected, 'text');
                                    }
                                }, new CriteriaField({
                                    id: 'formNotificationsSubject',
                                    pmType: 'text',
                                    name: 'tas_def_subject_message',
                                    valueType: 'string',
                                    label: 'Subject'.translate(),
                                    placeholder: 'Insert a title'.translate(),
                                    required: true,
                                    controlsWidth: 300
                                }), {
                                    id: 'formNotificationsContent',
                                    pmType: 'dropdown',
                                    name: 'tas_def_message_type',
                                    label: 'Content Type'.translate(),
                                    controlsWidth: 150,
                                    options: [{
                                            id: 'formNotificationsContent1',
                                            value: 'text',
                                            label: 'Plain Text'.translate()
                                        }, {
                                            id: 'formNotificationsContent2',
                                            value: 'template',
                                            label: 'Html Template'.translate()
                                        }
                                    ],
                                    onChange: function (value) {
                                        visibleContentType(value);
                                    }
                                }, new CriteriaField({
                                    id: 'formNotificationsMessage',
                                    pmType: 'textarea',
                                    name: 'tas_def_message',
                                    valueType: 'string',
                                    label: 'Message'.translate(),
                                    placeholder: 'Insert a message'.translate(),
                                    rows: 100,
                                    width: 10,
                                    required: true,
                                    controlsWidth: 300,
                                    renderType: 'textarea'
                                }), {
                                    id: 'formNotificationsTemplate',
                                    pmType: 'dropdown',
                                    name: 'tas_def_message_template',
                                    label: 'Template'.translate(),
                                    options: [{
                                            value: '',
                                            label: ''.translate()
                                        }
                                    ]
                                }
                            ]
                        })
                    }
                ],
                itemsPosition: {
                    position: 'left'
                },
                onTabClick: function (tab) {
                    setFocusTab(tab);
                }
            })
        ],
        buttonPanelPosition: 'top',
        buttonsPosition: 'center',
        buttons: [{
                id: 'windowPropertiesButtonSave',
                text: 'Save'.translate(),
                handler: function () {
                    saveData();
                },
                buttonType: 'success',
                height: 31
            },
            {
                pmType: 'label',
                text: "or".translate(),
                style: {
                    cssProperties: {
                        'fontSize': '14px'
                    }
                }
            },
            {
                id: 'windowPropertiesButtonCancel',
                text: 'Cancel'.translate(),
                handler: function () {
                    if (isDirty()) {
                        warningChanges.open();
                        warningChanges.showFooter();
                    } else {
                        windowProperties.close();
                    }
                },
                buttonType: "link",
                height: 31
            }
        ]
    });
    function changeTimingControl (value) {
        formTimingControl.getField('tas_duration').setFocus();
        formTimingControl.getField('tas_transfer_fly').setValue(value ? '["1"]' : '[]');
        var b = formTimingControl.getFields();
        for (var j = 1; j < b.length; j++) {
            b[j].setVisible(!value);
        }
    }
    function changeFormNotifications (value, valueTwo) {
        var b = formNotifications.getFields();
        for (var j = 1; j < b.length; j++) {
            b[j].setVisible(value);
        }
        if (value) {
            formNotifications.getField('tas_def_message_type').setValue(valueTwo);
            visibleContentType(valueTwo);
        }
        formNotifications.getField('tas_send_last_email').setValue(value ? '["1"]' : '[]');
        formNotifications.getField('tas_def_subject_message').setFocus();
    }
    function loadFormData (response) {
        dataProperties = response.properties;
        formDefinitions.getField('UID').disable();
        formDefinitions.getField('UID').setValue(activity.id);
        formDefinitions.getField('tas_title').setValue(dataProperties.tas_title);
        formDefinitions.getField('tas_title').setFocus();
        formDefinitions.getField('tas_description').setValue(dataProperties.tas_description);
        formDefinitions.getField('tas_priority_variable').setValue(dataProperties.tas_priority_variable);
        formDefinitions.getField('tas_derivation_screen_tpl').setValue(dataProperties.tas_derivation_screen_tpl);

        formCaseLabels.getField('tas_def_title').setValue(dataProperties.tas_def_title);
        formCaseLabels.getField('tas_def_description').setValue(dataProperties.tas_def_description);

        changeTimingControl(dataProperties.tas_transfer_fly === 'TRUE');
        formTimingControl.getField('tas_duration').setValue(dataProperties.tas_duration);
        formTimingControl.getField('tas_timeunit').setValue(dataProperties.tas_timeunit);
        formTimingControl.getField('tas_type_day').setValue(dataProperties.tas_type_day);
        formTimingControl.getField('tas_calendar').setValue(dataProperties.tas_calendar);

        changeFormNotifications(dataProperties.tas_send_last_email === 'TRUE', dataProperties.tas_def_message_type);
        formNotifications.getField('tas_def_subject_message').setValue(dataProperties.tas_def_subject_message);
        formNotifications.getField('tas_def_message_type').setValue(dataProperties.tas_def_message_type);
        formNotifications.getField('tas_def_message').setValue(dataProperties.tas_def_message);
        formNotifications.getField('tas_def_message_template').setValue(dataProperties.tas_def_message_template);
    }
    function loadCalendar (response) {
        var field = formTimingControl.getField('tas_calendar');
        field.clearOptions();
        field.addOption({
            value: '',
            label: '- None -'.translate()
        });
        for (var i = 0; i < response.length; i++) {
            field.addOption({
                value: response[i].cal_uid,
                label: response[i].cal_name
            });
        }
    }
    function loadTemplate (response) {
        var field = formNotifications.getField('tas_def_message_template');
        field.clearOptions();
        field.addOption({
            value: 'alert_message.html',
            label: '-- Default --'.translate()
        });
        for (var i = 0; i < response.length; i++) {
            field.addOption({
                value: response[i].prf_filename,
                label: response[i].prf_filename
            });
        }
        var field2 = formDefinitions.getField('tas_derivation_screen_tpl');
        field2.clearOptions();
        field2.addOption({
            value: '',
            label: '-- Default --'.translate()
        });
        for (var i = 0; i < response.length; i++) {
            if (response[i].prf_filename !== 'alert_message.html') {
                field2.addOption({
                    value: response[i].prf_filename,
                    label: response[i].prf_filename
                });
            }
        }
    }
    function loadServerData () {
        var restClient = new PMRestClient({
            typeRequest: 'post',
            multipart: true,
            data: {
                calls: [
                    {
                        url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id,
                        method: 'GET'
                    }, {
                        url: 'calendar',
                        method: 'GET'
                    }, {
                        url: 'project/' + PMDesigner.project.id + '/file-manager?path=templates',
                        method: 'GET'
                    }
                ]
            },
            functionSuccess: function (xhr, response) {
                loadCalendar(response[1].response);
                loadTemplate(response[2].response);
                loadFormData(response[0].response);
            }
        });
        restClient.setBaseEndPoint('');
        restClient.executeRestClient();
    }
    function visibleContentType (value) {
        formNotifications.getField('tas_def_message_template').disable();
        formNotifications.getField('tas_def_message').disable();
        if (value === 'text') {
            formNotifications.getField('tas_def_message').enable();
            formNotifications.getField('tas_def_message').setVisible(true);
            formNotifications.getField('tas_def_message_template').setVisible(false);
        }
        if (value === 'template') {
            formNotifications.getField('tas_def_message_template').enable();
            formNotifications.getField('tas_def_message').setVisible(false);
            formNotifications.getField('tas_def_message_template').setVisible(true);
        }
    }
    function saveData () {
        if (!formDefinitions.isValid()) {
            return;
        }
        var tas_transfer_fly = formTimingControl.getField('tas_transfer_fly').getValue() === '["1"]';
        var tas_send_last_email = formNotifications.getField('tas_send_last_email').getValue() === '["1"]';

        if (tas_transfer_fly === false) {
            if (!formTimingControl.isValid()) {
                return;
            }
        } else {
            var a = formTimingControl.getField('tas_transfer_fly').getValue();
            formTimingControl.reset();
            formTimingControl.getField('tas_transfer_fly').setValue(a);
            formTimingControl.getField('tas_duration').setValue('1');
            formTimingControl.getField('tas_timeunit').setValue('DAYS');
            formTimingControl.getField('tas_type_day').setValue('');
            formTimingControl.getField('tas_calendar').setValue('');
        }

        if (tas_send_last_email) {
            if (!formNotifications.isValid()) {
                return;
            }
        } else {
            formNotifications.reset();
        }

        dataProperties.tas_title = formDefinitions.getField('tas_title').getValue();
        dataProperties.tas_description = formDefinitions.getField('tas_description').getValue();
        dataProperties.tas_priority_variable = formDefinitions.getField('tas_priority_variable').getValue();
        dataProperties.tas_derivation_screen_tpl = formDefinitions.getField('tas_derivation_screen_tpl').getValue();
        dataProperties.tas_def_title = formCaseLabels.getField('tas_def_title').getValue();
        dataProperties.tas_def_description = formCaseLabels.getField('tas_def_description').getValue();
        dataProperties.tas_transfer_fly = tas_transfer_fly ? 'TRUE' : 'FALSE';
        dataProperties.tas_duration = formTimingControl.getField('tas_duration').getValue();
        dataProperties.tas_timeunit = formTimingControl.getField('tas_timeunit').getValue();
        dataProperties.tas_type_day = formTimingControl.getField('tas_type_day').getValue();
        dataProperties.tas_calendar = formTimingControl.getField('tas_calendar').getValue();
        dataProperties.tas_send_last_email = tas_send_last_email ? 'TRUE' : 'FALSE';
        dataProperties.tas_def_subject_message = formNotifications.getField('tas_def_subject_message').getValue();
        dataProperties.tas_def_message_type = formNotifications.getField('tas_def_message_type').getValue();
        dataProperties.tas_def_message = formNotifications.getField('tas_def_message').getValue();
        dataProperties.tas_def_message_template = formNotifications.getField('tas_def_message_template').getValue();

        (new PMRestClient({
            endpoint: 'activity/' + activity.id,
            typeRequest: 'update',
            messageError: ''.translate(),
            data: {
                definition: {},
                properties: dataProperties
            },
            functionSuccess: function (xhr, response) {
                setNameActivity(dataProperties.tas_title);
                windowProperties.close();
            },
            messageSuccess: 'Task properties saved successfully'.translate(),
            flashContainer: document.body
        })).executeRestClient();
    }
    function setFocusTab (tab) {
        var style;
        if (tab.getTitle() === 'Definitions') {
            formDefinitions.getField('tas_title').setFocus();
        }
        if (tab.getTitle() === 'Case Labels') {
            formCaseLabels.getField('tas_def_title').setFocus();
            style = $('#formCaseLabelsDescription .pmui-field-label').attr("style");
            style = style + ' float: left;';
            $('#formCaseLabelsDescription .pmui-field-label').attr("style", style);
        }
        if (tab.getTitle() === 'Timing Control') {
            formTimingControl.getField('tas_duration').setFocus();
        }
        if (tab.getTitle() === 'Notifications') {
            formNotifications.getField('tas_def_subject_message').setFocus();
            style = $('#formNotificationsMessage .pmui-field-label').attr("style");
            style = style + ' float: left;';
            $('#formNotificationsMessage .pmui-field-label').attr("style", style);
        }
    }
    function isDirty () {
        return formDefinitions.isDirty() ||
                formCaseLabels.isDirty() ||
                formTimingControl.isDirty() ||
                formNotifications.isDirty();
    }
    function setNameActivity (name) {
        activity.setName(name);
        activity.setActName(name);
        PMDesigner.project.dirty = true;
    }
    windowProperties.open();
    windowProperties.showFooter();
    applyStyleWindowForm(windowProperties);
    changeTimingControl(true);
    changeFormNotifications(false, 'text');
    loadServerData();
};

PMDesigner.ProcessFilesManager = function () {
    var rowselected = {};
    var rowselectedFile = {};
    var typeSave = '';
    var gridFilesManager;
    var gridTemplate;
    var gridPublic;
    var formEdit;
    var windowEdit;
    var formUpload;
    var formUploadField;
    var initTinyMCE = null;
    var flagGridTemplate = true;
    var flagGridPublic = true;

    var warningTemplate = new PMUI.ui.MessageWindow({
        id: 'warningTemplate',
        windowMessageType: 'error',
        width: 490,
        title: '',
        message: 'Do you want to delete this file?'.translate(),
        footerItems: [{
                id: 'warningTemplateButtonYes',
                text: 'Delete'.translate(),
                height: 40,
                handler: function () {
                    (new PMRestClient({
                        endpoint: 'file-manager/' + rowselectedFile.getData().prf_uid,
                        typeRequest: 'remove',
                        messageError: ''.translate(),
                        functionSuccess: function (xhr, response) {
                            PMDesigner.msgFlash('File deleted successfully'.translate(), gridTemplate);
                            loadTemplate();
                        },
                        messageSuccess: 'File deleted successfully'.translate(),
                        flashContainer: gridTemplate
                    })).executeRestClient();
                    warningTemplate.close();
                }
            }, {
                pmType: 'label',
                text: "or".translate()
            }, {
                id: 'warningTemplateButtonNo',
                text: 'Cancel'.translate(),
                buttonType: 'link',
                height: 40,
                handler: function () {
                    warningTemplate.close();
                }
            }
        ]
    });
    var warningPublic = new PMUI.ui.MessageWindow({
        id: 'warningPublic',
        title: '',
        windowMessageType: 'error',
        width: 490,
        message: 'Do you want to delete this file?'.translate(),
        footerItems: [{
                id: 'warningPublicButtonYes',
                text: 'Delete'.translate(),
                height: 40,
                handler: function () {
                    (new PMRestClient({
                        endpoint: 'file-manager/' + rowselectedFile.getData().prf_uid,
                        typeRequest: 'remove',
                        messageError: ''.translate(),
                        functionSuccess: function (xhr, response) {
                            loadPublic();
                        },
                        messageSuccess: 'File deleted successfully'.translate(),
                        flashContainer: gridPublic
                    })).executeRestClient();
                    warningPublic.close();
                }
            }, {
                pmType: 'label',
                text: "or".translate()
            }, {
                id: 'warningPublicButtonNo',
                text: 'Cancel'.translate(),
                height: 40,
                buttonType: 'link',
                handler: function () {
                    warningPublic.close();
                }
            }
        ]
    });
    var windowFilesManager = new PMUI.ui.Window({
        id: 'windowFilesManager',
        title: 'Process Files Manager'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        items: [
            gridFilesManager = new PMUI.grid.GridPanel({
                id: 'gridFilesManager',
                pageSize: 10,
                width: "96%",
                style: {
                    cssClasses: ["mafe-gridPanel"]
                },
                emptyMessage: 'No records found'.translate(),
                nextLabel: 'Next'.translate(),
                previousLabel: 'Previous'.translate(),
                customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                    return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
                },
                dataItems: {},
                columns: [
                    {
                        title: 'Main Folders'.translate(),
                        dataType: 'string',
                        columnData: 'prf_path',
                        width: DEFAULT_WINDOW_WIDTH - 200,
                        alignmentCell: 'left',
                        sortable: true
                    },
                    {
                        id: 'filesGridViewCol',
                        title: '',
                        dataType: 'button',
                        buttonLabel: 'View'.translate(),
                        buttonStyle: {cssClasses: ['mafe-button-show']},
                        onButtonClick: function (row, grid) {
                            rowselected = row;
                            openFolder();
                        }
                    }
                ],
                onRowClick: function (row, grid) {
                    rowselected = row;
                    openFolder();
                }
            })
        ]
    });
    var buttonNew = new PMUI.ui.Button({
        id: 'createBtn',
        text: 'Create'.translate(),
        height: "40px",
        width: 100,
        style: {cssClasses: ['mafe-button-create']},
        handler: function (event) {
            newfile();
        }
    });
    var buttonUpload = new PMUI.ui.Button({
        id: 'uploadBtn',
        text: 'Upload'.translate(),
        height: "40px",
        style: {
            cssClasses: ['mafe-button-upload'],
            cssProperties: {'margin-left': '5px'}
        },
        handler: function (event) {
            windowUpload.open();
            formUpload.setFocus();
            applyStyleWindowForm(windowUpload);

        }
    });
    var gridTemplate = new PMUI.grid.GridPanel({
        id: 'gridTemplate',
        filterPlaceholder: 'Text to Search'.translate(),
        pageSize: 10,
        width: '96%',
        style: {
            cssClasses: ["mafe-gridPanel"]
        },
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
        },
        dataItems: {},
        columns: [{
                title: 'Templates'.translate(),
                dataType: 'string',
                columnData: 'prf_filename',
                width: '622px',
                alignmentCell: 'left',
                sortable: true
            }, {
                dataType: 'string',
                columnData: 'prf_uid',
                alignmentCell: 'left',
                visible: false
            }, {
                dataType: 'string',
                columnData: 'prf_content',
                alignmentCell: 'left',
                visible: false
            }, {
                id: 'gridTemplateButtonEdit',
                title: '',
                dataType: 'button',
                buttonLabel: 'Edit'.translate(),
                width: '82px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    editfile();
                },
                buttonStyle: {cssClasses: ['mafe-button-edit']}
            }, {
                id: 'gridTemplateButtonDownload',
                title: '',
                dataType: 'button',
                buttonLabel: 'Download'.translate(),
                width: '109px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    download();
                },
                buttonStyle: {cssClasses: ['mafe-button-properties']}
            }, {
                id: 'gridTemplateButtonDelete',
                title: '',
                dataType: 'button',
                buttonLabel: 'Delete'.translate(),
                width: '82px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    warningTemplate.open();
                    warningTemplate.showFooter();
                },
                buttonStyle: {cssClasses: ['mafe-button-delete']}
            }
        ]
    });
    var buttonPublicCreate = new PMUI.ui.Button({
        id: 'buttonPublicCreate',
        text: 'Create'.translate(),
        height: "40px",
        width: 100,
        style: {cssClasses: ['mafe-button-create']},
        handler: function (event) {
            newfile();
        }

    });
    var buttonBack = new PMUI.ui.Button({
        id: 'buttonBack',
        text: 'Back'.translate(),
        height: "40px",
        style: {cssClasses: ['mafe-button-upload'], cssProperties: {'margin-right': '5px', 'float': 'right'}},
        handler: function (event) {
            gridTemplate.setVisible(false);
            gridPublic.setVisible(false);
            gridFilesManager.setVisible(true);
            loadFileManager();
            windowFilesManager.setTitle('Process Files Manager'.translate());
        }
    });
    var gridPublic = new PMUI.grid.GridPanel({
        id: 'gridPublic',
        pageSize: 10,
        width: '96%',
        style: {
            cssClasses: ["mafe-gridPanel"]
        },
        emptyMessage: 'No records found'.translate(),
        filterPlaceholder: 'Text to Search'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
        },
        dataItems: {},
        columns: [{
                title: 'Public'.translate(),
                dataType: 'string',
                columnData: 'prf_filename',
                width: '704px',
                alignmentCell: 'left',
                sortable: true
            }, {
                dataType: 'string',
                columnData: 'prf_uid',
                alignmentCell: 'left',
                visible: false
            }, {
                id: 'gridPublicButtonDownload',
                title: '',
                dataType: 'button',
                buttonLabel: 'Download'.translate(),
                width: '111px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    download();
                },
                buttonStyle: {cssClasses: ['mafe-button-properties']}
            }, {
                id: 'gridPublicButtonDelete',
                title: '',
                dataType: 'button',
                buttonLabel: 'Delete'.translate(),
                width: '82px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    warningPublic.open();
                    warningPublic.showFooter();
                },
                buttonStyle: {cssClasses: ['mafe-button-delete']}
            }
        ]
    });
    var windowUpload = new PMUI.ui.Window({
        id: 'windowUpload',
        title: 'Upload File'.translate(),
        height: 150,
        width: DEFAULT_WINDOW_WIDTH,
        items: [
            formUpload = new PMUI.form.Form({
                id: 'formUpload',
                visibleHeader: false,
                items: [
                    formUploadField = new PMUI.field.UploadField({
                        id: 'formUploadField',
                        label: 'File'.translate(),
                        name: 'prf_file',
                        multiple: false,
                        labelWidth: '25%',
                        accept: 'application/octet-stream',
                        controlsWidth: 300
                    })
                ]
            })
        ],
        visibleFooter: true,
        buttonPanelPosition: 'top',
        buttonsPosition: 'center',
        buttons: [{
                id: 'windowUploadButtonUpload',
                text: 'Upload'.translate(),
                handler: function () {
                    uploadFile();
                }
            }, {
                id: 'windowUploadButtonCancel',
                text: 'Cancel'.translate(),
                handler: function () {

                    formUploadField.reset();
                    windowUpload.close();
                }
            }
        ]
    });

    function createWindowTinyMCE () {
        windowEdit = new PMUI.ui.Window({
            id: 'windowEdit',
            title: ''.translate(),
            height: DEFAULT_WINDOW_HEIGHT - 80,
            width: DEFAULT_WINDOW_WIDTH,
            items: [
                formEdit = new PMUI.form.Form({
                    id: 'formEdit',
                    visibleHeader: false,
                    width: 900,
                    items: [
                        new PMUI.field.TextField({
                            id: 'filename',
                            name: 'filename',
                            label: 'Filename'.translate(),
                            placeholder: 'Insert file name'.translate(),
                            required: true,
                            valueType: 'string',
                            labelWidth: '25%',
                            controlsWidth: 300
                        }),
                        new PMUI.field.TextAreaField({
                            id: 'filecontent',
                            name: 'filecontent',
                            label: 'Content'.translate(),
                            value: '',
                            rows: 210,
                            labelWidth: '25%',
                            controlsWidth: 300,
                            onChange: function (currentValue, previousValue) {
                            },
                            style: {cssClasses: ['mafe-textarea-resize']}
                        })
                    ]
                })
            ],
            buttonPanelPosition: 'top',
            buttonsPosition: 'center',
            buttons: [{
                    id: 'windowEditButtonSave',
                    text: "Save".translate(),
                    height: 31,
                    buttonType: 'success',
                    handler: function () {
                        save();
                    }
                },
                {
                    pmType: 'label',
                    text: "or".translate(),
                    style: {
                        cssProperties: {
                            'fontSize': '14px'
                        }
                    }
                },
                {
                    id: 'windowEditButtonCancel',
                    text: 'Cancel'.translate(),
                    buttonType: 'link',
                    handler: function () {
                        if (formEdit.isDirty()) {
                            var message_window = new PMUI.ui.MessageWindow({
                                id: "cancelMessageTriggers",
                                width: 490,
                                windowMessageType: 'warning',
                                title: 'Confirm'.translate(),
                                message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                                footerItems: [
                                    {
                                        text: "Yes".translate(),
                                        height: 40,
                                        handler: function () {
                                            message_window.close();
                                            windowEdit.close();
                                        }
                                    },
                                    {
                                        pmType: 'label',
                                        text: "or".translate()
                                    },
                                    {
                                        text: "No".translate(),
                                        buttonType: 'link',
                                        height: 40,
                                        handler: function () {
                                            message_window.close();
                                        }
                                    }
                                ]
                            });
                            message_window.open();
                            message_window.showFooter();
                        } else {
                            windowEdit.close();
                        }
                    }
                }
            ]
        });
        formEdit.getField('filename').enable();
        formEdit.getField('filecontent').getControls()[0].getHTML().className = 'tmceEditor';
        windowEdit.open();
        windowEdit.showFooter();
        applyStyleWindowForm(windowEdit);
        tinyMCE.init({
            editor_selector: 'tmceEditor',
            mode: 'specific_textareas',
            directionality: 'ltr',
            verify_html: false,
            skin: 'o2k7',
            theme: 'advanced',
            skin_variant: 'silver',
            plugins: 'advhr,advimage,advlink,advlist,autolink,autoresize,contextmenu,directionality,emotions,example,example_dependency,fullpage,fullscreen,iespell,inlinepopups,insertdatetime,layer,legacyoutput,lists,media,nonbreaking,noneditable,pagebreak,paste,preview,print,save,searchreplace,style,tabfocus,table,template,visualblocks,visualchars,wordcount,xhtmlxtras,pmSimpleUploader,pmVariablePicker,pmGrids,style',
            theme_advanced_buttons1: 'pmSimpleUploader,|,pmVariablePicker,|,pmGrids,|,bold,italic,underline,|,justifyleft,justifycenter,justifyright,justifyfull,|,fontselect,fontsizeselect,|,cut,copy,paste',
            theme_advanced_buttons2: 'bullist,numlist,|,outdent,indent,blockquote,|,tablecontrols,|,undo,redo,|,link,unlink,image,|,forecolor,backcolor,styleprops',
            theme_advanced_buttons3: 'hr,removeformat,visualaid,|,sub,sup,|,ltr,rtl,|,code',
            popup_css: "/js/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/dialog.css",
            oninit: initTinyMCE,
            onchange_callback: function (inst) {
                formEdit.getField('filecontent').setValue(tinyMCE.activeEditor.getContent({format: 'raw'}));
            },
            handle_event_callback: function (e) {
            },
            setup: function (ed) {
                ed.onSetContent.add(function (ed, l) {
                    formEdit.getField('filecontent').setValue(tinyMCE.activeEditor.getContent({format: 'raw'}));
                });
            }
        });
        validateKeysField(formEdit.getField('filename').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'isletter', 'isunderscore', 'ishyphen', 'isparenthesisopening', 'isparenthesisclosing']);
        windowEdit.footer.getItems()[0].setHeight(31);
        windowEdit.footer.getItems()[2].setHeight(31);
    }
    function newfile () {
        initTinyMCE = function () {
            tinyMCE.activeEditor.domainURL = "/sys" + WORKSPACE + "/" + LANG + "/" + SKIN + "/";
            tinyMCE.activeEditor.processID = PMDesigner.project.id;
        };
        createWindowTinyMCE();
        typeSave = 'new';
        var title = "Create File in".translate() + " " + rowselected.getData().prf_path;
        windowEdit.setTitle(title.translate());
        formEdit.setFocus();
    }
    function editfile () {
        initTinyMCE = function () {
            tinyMCE.activeEditor.domainURL = "/sys" + WORKSPACE + "/" + LANG + "/" + SKIN + "/";
            tinyMCE.activeEditor.processID = PMDesigner.project.id;
            tinyMCE.activeEditor.dom.doc.activeElement.focus();
        };
        createWindowTinyMCE();
        typeSave = 'update';
        var title = "Edit File".translate() + " " + rowselectedFile.getData().prf_filename + " " + "in".translate() + rowselected.getData().prf_path;
        windowEdit.setTitle(title.translate());
        formEdit.getField('filename').disable();
        formEdit.getField('filename').setValue(rowselectedFile.getData().prf_filename);
        var a = rowselectedFile.getData().prf_content;
        formEdit.getField('filecontent').setValue(a);
        if (tinyMCE.activeEditor)
            tinyMCE.activeEditor.setContent(a);
    }
    function save () {
        if (!formEdit.isValid()) {
            //.replace(/\s/g, '')
            return;
        }
        if (typeSave === 'new') {
            (new PMRestClient({
                endpoint: 'file-manager',
                typeRequest: 'post',
                messageError: ''.translate(),
                data: {
                    prf_filename: formEdit.getField('filename').getValue() + '.html',
                    prf_path: rowselected.getData().prf_path,
                    prf_content: formEdit.getField('filecontent').getValue()
                },
                functionSuccess: function (xhr, response) {
                    windowEdit.close();
                    if (rowselected.getData().prf_path === 'templates') {
                        PMDesigner.msgFlash('File saved successfully'.translate(), gridTemplate);
                        loadTemplate();
                    }
                    if (rowselected.getData().prf_path === 'public') {
                        PMDesigner.msgFlash('File saved successfully'.translate(), gridPublic);
                        loadPublic();
                    }
                    formEdit.getField('filename').setValue('');
                }
            })).executeRestClient();
        }
        if (typeSave === 'update') {
            (new PMRestClient({
                endpoint: 'file-manager/' + rowselectedFile.getData().prf_uid,
                typeRequest: 'update',
                messageError: ''.translate(),
                data: {
                    prf_content: formEdit.getField('filecontent').getValue()
                },
                functionSuccess: function (xhr, response) {
                    windowEdit.close();
                    if (rowselected.getData().prf_path === 'templates') {
                        PMDesigner.msgFlash('File updated successfully'.translate(), gridTemplate);
                        loadTemplate();
                    }
                    if (rowselected.getData().prf_path === 'public') {
                        PMDesigner.msgFlash('File updated successfully'.translate(), gridPublic);
                        loadPublic();
                    }
                    formEdit.getField('filename').setValue('');
                }
            })).executeRestClient();
        }
    }
    function loadFileManager () {
        (new PMRestClient({
            endpoint: 'file-manager',
            typeRequest: 'get',
            messageError: ''.translate(),
            functionSuccess: function (xhr, response) {
                gridFilesManager.clearItems();
                for (var i = 0; i < response.length; i++) {
                    gridFilesManager.addDataItem({prf_path: response[i].name});
                }
            }
        })).executeRestClient();
    }
    function loadTemplate () {
        (new PMRestClient({
            endpoint: 'file-manager',
            typeRequest: 'get',
            messageError: ''.translate(),
            data: {
                path: rowselected.getData().prf_path
            },
            functionSuccess: function (xhr, response) {
                gridTemplate.clearItems();
                for (var i = 0; i < response.length; i++) {
                    gridTemplate.addDataItem({
                        prf_filename: response[i].prf_filename,
                        prf_content: response[i].prf_content,
                        prf_uid: response[i].prf_uid
                    });
                }
                gridTemplate.sort('prf_filename', 'asc');
            }
        })).executeRestClient();
    }
    function loadPublic () {
        (new PMRestClient({
            endpoint: 'file-manager',
            typeRequest: 'get',
            messageError: ''.translate(),
            data: {
                path: rowselected.getData().prf_path
            },
            functionSuccess: function (xhr, response) {
                gridPublic.clearItems();
                for (var i = 0; i < response.length; i++) {
                    gridPublic.addDataItem({
                        prf_filename: response[i].prf_filename,
                        prf_uid: response[i].prf_uid
                    });
                }
                gridPublic.sort('prf_filename', 'asc');
            }
        })).executeRestClient();
    }
    function download () {
        var xhr, win = window, value = 'blob';
        if (win.XMLHttpRequest)
            xhr = new XMLHttpRequest();
        else if (win.ActiveXObject)
            xhr = new ActiveXObject('Microsoft.XMLHTTP');
        win.URL = win.URL || win.webkitURL;
        xhr.open('GET', '/api/1.0/' + WORKSPACE + '/project/' + PMDesigner.project.id + '/file-manager/' + rowselectedFile.getData().prf_uid + '/download', true);
        xhr.responseType = value;
        xhr.setRequestHeader('Authorization', 'Bearer ' + PMDesigner.project.keys.access_token);
        xhr.onload = function () {
            if (this.status === 200) {
                if (rowselected.getData().prf_path === 'templates') {
                    PMDesigner.msgFlash('Start file download successfully'.translate(), gridTemplate);
                }
                if (rowselected.getData().prf_path === 'public') {
                    PMDesigner.msgFlash('Start file download successfully'.translate(), gridPublic);
                }
                var doc = win.document, a = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'), event = doc.createEvent('MouseEvents');
                event.initMouseEvent('click', true, false, win, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
                a.href = win.URL.createObjectURL(this.response);
                a.download = rowselectedFile.getData().prf_filename;
                a.dispatchEvent(event);
            }
        };
        xhr.send();
    }
    function uploadFile () {
        var fileSelector = formUploadField.getHTML().getElementsByTagName('input')[0];
        if (fileSelector.files.length === 0) {
            PMDesigner.msgFlash('Please select a file to upload'.translate(), windowUpload.footer, "info");
            return;
        }
        (new PMRestClient({
            endpoint: 'file-manager',
            typeRequest: 'post',
            messageError: ''.translate(),
            data: {
                prf_filename: fileSelector.files[0].name,
                prf_path: rowselected.getData().prf_path,
                prf_content: null
            },
            functionSuccess: function (xhr, response) {
                var win = window, fd = new FormData(), xhr, val = 'prf_file';
                fd.append(val, fileSelector.files[0]);
                if (win.XMLHttpRequest)
                    xhr = new XMLHttpRequest();
                else if (win.ActiveXObject)
                    xhr = new ActiveXObject('Microsoft.XMLHTTP');
                xhr.open('POST', '/api/1.0/' + WORKSPACE + '/project/' + PMDesigner.project.id + '/file-manager/' + response.prf_uid + '/upload', true);
                xhr.setRequestHeader('Authorization', 'Bearer ' + PMDesigner.project.keys.access_token);
                xhr.onload = function () {
                    if (this.status === 200) {
                        formUploadField.reset();
                        windowUpload.close();
                        if (rowselected.getData().prf_path === 'templates') {
                            PMDesigner.msgFlash('File uploaded successfully'.translate(), gridTemplate);
                            loadTemplate();
                        }
                        if (rowselected.getData().prf_path === 'public') {
                            PMDesigner.msgFlash('File uploaded successfully'.translate(), gridPublic);
                            loadPublic();
                        }
                    }
                };
                xhr.send(fd);
            }
        })).executeRestClient();
    }
    function styleApp () {
        try {
            gridFilesManager.dom.toolbar.style.display = 'none';
            gridTemplate.dom.toolbar.getElementsByTagName('input')[0].style.visibility = 'hidden';
            gridPublic.dom.toolbar.getElementsByTagName('input')[0].style.visibility = 'hidden';

        } catch (e) {
        }
    }
    function disableAllFields () {
        windowFilesManager.getItems()[0].setVisible(false);

    }
    function openFolder () {
        disableAllFields();
        styleApp();

        if (rowselected.getData().prf_path === 'templates') {
            windowFilesManager.setTitle("Template".translate());
            loadTemplate();
            if (flagGridTemplate) {
                windowFilesManager.addItem(gridTemplate);
                flagGridTemplate = false;
            }
            gridTemplate.dom.toolbar.appendChild(buttonUpload.getHTML());
            buttonUpload.defineEvents();

            gridTemplate.dom.toolbar.appendChild(buttonNew.getHTML());
            gridTemplate.dom.toolbar.appendChild(buttonBack.getHTML());
            buttonNew.defineEvents();
            buttonBack.defineEvents();
            gridTemplate.setVisible(true);
            gridTemplate.dom.toolbar.getElementsByTagName('input')[0].style.visibility = 'visible';
            buttonNew.getHTML().style.top = '-3px';
        }
        if (rowselected.getData().prf_path === 'public') {
            windowFilesManager.setTitle("Public".translate());
            loadPublic();
            if (flagGridPublic) {
                windowFilesManager.addItem(gridPublic);
                flagGridPublic = false;
            }
            gridPublic.dom.toolbar.appendChild(buttonUpload.getHTML());
            buttonUpload.defineEvents();
            gridPublic.dom.toolbar.appendChild(buttonPublicCreate.getHTML());
            gridPublic.dom.toolbar.appendChild(buttonBack.getHTML());
            buttonPublicCreate.defineEvents();
            buttonBack.defineEvents();
            gridPublic.dom.toolbar.getElementsByTagName('input')[0].style.visibility = 'visible';
            gridPublic.setVisible(true);
            buttonPublicCreate.getHTML().style.top = '-3px';
        }
    }

    windowFilesManager.open();
    applyStyleWindowForm(windowFilesManager);
    loadFileManager();
    styleApp();
};


(function () {
    PMDesigner.assigmentRules = function (event) {
        var formAssignmentRules,
                tabPanelAssignmentRules,
                windowAssignmentRules,
                dataProperties,
                activity = event,
                pageSizeAssignment = 10,
                pageSizeAssignmentAD = 10,
                quickMessageWindow = new QuickMessageWindow();

        var formAssignmentRules = new PMUI.form.Form({
            id: 'formAssignmentRules',
            visibleHeader: false,
            buttonPanelPosition: 'top',
            width: 910,
            height: 350,
            items: [
                new PMUI.field.RadioButtonGroupField({
                    id: 'formTasAssignRuleType',
                    name: 'tas_type',
                    label: 'Case can be reassigned to ad hoc users'.translate(),
                    required: true,
                    controlPositioning: 'vertical',
                    options: [
                        {
                            id: 'formTasAssignRuleNORMAL',
                            label: 'No'.translate(),
                            value: 'NORMAL',
                            selected: true
                        }, {
                            id: 'formTasAssignRuleADHOC',
                            label: 'Yes'.translate(),
                            value: 'ADHOC'
                        }
                    ],
                    onChange: function (newVal, oldVal) {
                        hiddenTab(newVal);
                    }

                }),
                new PMUI.field.RadioButtonGroupField({
                    id: 'formTasAssignType',
                    name: 'tas_assign_type',
                    label: 'Case to be assigned by'.translate(),
                    required: true,
                    controlPositioning: 'horizontal',
                    options: [
                        {
                            id: 'formTasAssignTypeCyclical',
                            label: 'Cyclical Assignment'.translate(),
                            value: 'BALANCED',
                            selected: true
                        }, {
                            id: 'formTasAssignTypeManual',
                            label: 'Manual Assignment'.translate(),
                            value: 'MANUAL'
                        }, {
                            id: 'formTasAssignTypeValue',
                            label: 'Value Based Assignment'.translate(),
                            value: 'EVALUATE'
                        }, {
                            id: 'formTasAssignTypeReports',
                            label: 'Reports to'.translate(),
                            value: 'REPORT_TO'
                        }, {
                            id: 'formTasAssignTypeSelf',
                            label: 'Self Service'.translate(),
                            value: 'SELF_SERVICE'
                        }, {
                            id: 'formTasAssignTypeSelfValue',
                            label: 'Self Service Value Based Assignment'.translate(),
                            value: 'SELF_SERVICE_EVALUATE'
                        }
                    ],
                    onChange: function (newVal, oldVal) {
                        changeRadioButtons(newVal);
                    }
                }), new CriteriaField({
                    id: 'formAssignmentRulesVariable',
                    pmType: 'text',
                    name: 'tas_assign_variable',
                    valueType: 'string',
                    label: 'Variable for Value Based Assignment'.translate(),
                    controlsWidth: DEFAULT_WINDOW_WIDTH - 527
                }), new CriteriaField({
                    id: 'formAssignmentRulesVariableSelf',
                    pmType: 'text',
                    name: 'tas_group_variable',
                    valueType: 'string',
                    label: 'Variable for Self Service Value Based Assignment'.translate(),
                    controlsWidth: DEFAULT_WINDOW_WIDTH - 527
                }), {
                    id: 'formAssignmentRulesSetTimeout',
                    pmType: 'checkbox',
                    name: 'tas_selfservice_timeout',
                    label: 'Set a timeout'.translate(),
                    options: [{
                            id: 'formAssignmentRulesSetTimeoutOption',
                            label: '',
                            value: '1'
                        }
                    ],
                    onChange: function (val) {
                        visibleService(this.controls[0].selected);
                    }
                }, {
                    id: 'formAssignmentRulesTime',
                    pmType: 'text',
                    name: 'tas_selfservice_time',
                    valueType: 'number',
                    label: 'Time'.translate(),
                    required: true
                }, {
                    id: 'formAssignmentRulesTimeUnit',
                    pmType: 'dropdown',
                    name: 'tas_selfservice_time_unit',
                    label: 'Time unit'.translate(),
                    options: [{
                            id: 'formAssignmentRulesTimeUnitOption1',
                            label: 'Hours'.translate(),
                            value: 'HOURS'
                        }, {
                            id: 'formAssignmentRulesTimeUnitOption2',
                            label: 'Days'.translate(),
                            value: 'DAYS'
                        }
                    ]
                }, {
                    id: 'formAssignmentRulesTrigger',
                    pmType: 'dropdown',
                    name: 'tas_selfservice_trigger_uid',
                    label: 'Trigger to execute'.translate(),
                    required: true,
                    options: [{
                            id: 'formAssignmentRulesTriggerOption1',
                            value: '',
                            label: ''.translate()
                        }
                    ]
                }
            ],
            footerItems: [
                {
                    buttonType: 'success',
                    id: 'windowPropertiesButtonSave',
                    text: "Save".translate(),
                    handler: function () {
                        saveData();
                    }
                },
                {
                    pmType: 'label',
                    text: " or  ",
                    style: {
                        cssProperties: {
                            'fontSize': '14px'
                        }
                    }
                },
                {
                    id: 'windowConnectionsButtonCancel',
                    text: 'Cancel'.translate(),
                    handler: function () {
                        windowAssignmentRules.close();
                    },
                    buttonType: 'link',
                    style: {
                        cssProperties: {
                            'background': 'white',
                            'color': '#383838',
                            'border': 'initial',
                            'font-size': '16px'
                        }
                    }
                }

            ]
        });
        var restClient = new PMRestClient({
            endpoint: 'projects',
            typeRequest: 'get',
            messageError: "There are problems, please try again.".translate()
        });

        var assigmentPanelGlobal = new PMUI.core.Panel({
            id: "assigmentPanelGlobal",
            layout: "hbox",
            width: DEFAULT_WINDOW_WIDTH
        });

        var assigmentPanelUser = new PMUI.core.Panel({
            id: "assigmentPanelUser",
            layout: "vbox",
            width: "60%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            }
        });
        var panelTitleUser = new PMUI.core.Panel({
            id: "panelTitleUser",
            layout: "hbox"
        });
        var titleUser = new PMUI.ui.TextLabel({
            id: "titleUser",
            label: " ",
            textMode: 'plain',
            text: 'AVAILABLE USERS LIST'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelGridUser = new PMUI.core.Panel({
            id: "panelGridUser",
            layout: "hbox",
            style: {
                cssClasses: ["mafe-panel"]
            }
        });
        var buttonsUsers = new PMUI.field.OptionsSelectorField({
            id: "buttonsUsers",
            orientation: "horizontal",
            items: [{
                    id: "buttonsUsersAll",
                    text: "All".translate(),
                    selected: true,
                    value: "all",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                }, {
                    id: "buttonsUsersUsers",
                    text: "Users".translate(),
                    value: "user",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                }, {
                    id: "buttonsUsersGroups",
                    text: "Groups".translate(),
                    value: "group",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }
            ],
            listeners: {
                select: function (item, event) {
                    quickMessageWindow.close();
                    groupRows(gridUsers, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUsers = new PMUI.grid.GridPanel({
            id: "gridUsers",
            pageSize: pageSizeAssignment - 1,
            behavior: 'dragdropsort',
            filterable: true,
            filterPlaceholder: 'Text to Search'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            columns: [
                {
                    id: 'gridUsersButtonLabel',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonLabel: function (row, data) {
                        return data.fullName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        if (row.data.customKeys.ass_type === 'group') {
                            restClient.setTypeRequest('get');
                            restClient.functionSuccess = function (xhr, response) {
                                var stringUsers = '';
                                for (var i = 0; i < response.length; i++) {
                                    stringUsers = stringUsers + response[i].usr_firstname + ' ' + response[i].usr_lastname + ', ';
                                }
                                stringUsers = stringUsers.substring(1, stringUsers.length - 2);
                                if (stringUsers === '') {
                                    stringUsers = 'No users';
                                }
                                quickMessageWindow.show($(row.html).find('a')[0], stringUsers);
                            };
                            restClient.setBaseEndPoint('group/' + row.data.customKeys.ass_uid + '/users');
                            restClient.executeRestClient();
                        }
                    }
                },
                {
                    title: "",
                    dataType: 'string',
                    columnData: "fullName",
                    alignmentCell: "left",
                    width: "80%"
                },
                {
                    id: 'gridUsersButtonAssign',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        var sw = row.data.customKeys.ass_type === 'user';
                        row.getCells()[0].content.style.addClasses([sw ? 'button-icon-user' : 'button-icon-group']);
                        return "ASSIGN".translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        grid.sort('fullName', 'asc');
                        gridUserList.addItem(row);
                        buttonsUserList.setValue(buttonsUsers.getValue());
                        groupRows(gridUserList, buttonsUsers.getValue());
                        assignee(row);
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                assignee(item);
            },
            onDrop: function (a, row) {
                buttonsUsers.setValue(buttonsUserList.getValue());
                groupRows(gridUsers, buttonsUserList.getValue());
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });

        var assigmentPanelUserList = new PMUI.core.Panel({
            id: "assigmentPanelUserList",
            layout: "vbox",
            width: "60%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-smooth'
                ]
            }
        });
        var panelTitleUserList = new PMUI.core.Panel({
            id: "panelTitleUserList",
            layout: "hbox"
        });
        var titleUserList = new PMUI.ui.TextLabel({
            id: "titleUserList",
            textMode: 'plain',
            text: 'ASSIGNED USERS LIST'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelGridUserList = new PMUI.core.Panel({
            id: "panelGridUserList",
            layout: "hbox",
            style: {
                cssClasses: ["mafe-panel"]
            }
        });
        var buttonsUserList = new PMUI.field.OptionsSelectorField({
            id: "buttonsUserList",
            orientation: "horizontal",
            items: [
                {
                    text: "All".translate(),
                    value: "all",
                    selected: true,
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                },
                {
                    text: "Users".translate(),
                    value: "user",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                },
                {
                    text: "Groups".translate(),
                    value: "group",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }
            ],
            listeners: {
                select: function (item, event) {
                    quickMessageWindow.close();
                    groupRows(gridUserList, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUserList = new PMUI.grid.GridPanel({
            id: "gridUserList",
            pageSize: pageSizeAssignment - 1,
            behavior: 'dragdropsort',
            filterable: true,
            nextLabel: 'Next'.translate(),
            filterPlaceholder: 'Text to Search'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            emptyMessage: function () {
                var div = document.createElement('div');
                var span = document.createElement('span');
                div.appendChild(span);
                div.className = "mafe-grid-panel-empty";
                div.style.height = gridUserList.dom.tableContainer.style.height;
                div.style.width = gridUserList.dom.tableContainer.style.width;
                span.innerHTML = 'Drag & Drop a User or a Group here'.translate();
                return div;
            },
            onEmpty: function () {
                gridUserList.dom.tableContainer.style.overflow = "hidden";
            },
            columns: [
                {
                    id: 'gridUserListButtonLabel',
                    title: "",
                    width: "10%",
                    dataType: 'button',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        if (row.data.customKeys.ass_type === "group") {
                            restClient.setTypeRequest("get");
                            restClient.functionSuccess = function (xhr, response) {
                                var stringUsers = "";
                                if (response.length === 0)
                                    stringUsers = "No users";
                                else {
                                    for (var i = 0; i < response.length; i++)
                                        if (stringUsers === "")
                                            stringUsers += response[i].usr_firstname + " " + response[i].usr_lastname;
                                        else
                                            stringUsers += ", " + response[i].usr_firstname + " " + response[i].usr_lastname;
                                }
                                quickMessageWindow.show($(row.html).find('a')[0], stringUsers);
                            };
                            restClient.setBaseEndPoint("group/" + row.data.customKeys.ass_uid + "/users");
                            restClient.executeRestClient();
                        }
                    }
                },
                {
                    title: '',
                    dataType: 'string',
                    columnData: "fullName",
                    width: "80%",
                    alignmentCell: "left"
                },
                {
                    id: 'gridUserListButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        var sw = row.data.customKeys.ass_type === 'user';
                        row.getCells()[0].content.style.addClasses([sw ? 'button-icon-user' : 'button-icon-group']);
                        return "Remove".translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        grid.sort('fullName', 'asc');
                        gridUsers.addItem(row);
                        buttonsUsers.setValue(buttonsUserList.getValue());
                        groupRows(gridUsers, buttonsUserList.getValue());
                        remove(row);
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                remove(item);
            },
            onDrop: function (a, row) {
                buttonsUserList.setValue(buttonsUsers.getValue());
                groupRows(gridUserList, buttonsUsers.getValue());
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });


        var assigmentPanelGlobalAD = new PMUI.core.Panel({
            id: "assigmentPanelGlobalAD",
            layout: "hbox",
            width: DEFAULT_WINDOW_WIDTH

        });

        var assigmentPanelUserAD = new PMUI.core.Panel({
            id: "assigmentPanelUserAD",
            layout: "vbox",
            width: "60%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            }
        });
        var panelTitleUserAD = new PMUI.core.Panel({
            id: "panelTitleUserAD",
            layout: "hbox"
        });
        var titleUserAD = new PMUI.ui.TextLabel({
            id: "titleUserAD",
            label: " ",
            textMode: 'plain',
            text: 'AVAILABLE USERS LIST'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelSearchUserAD = new PMUI.core.Panel({
            id: "panelSearchUserAD",
            layout: "hbox"
        });
        var searchGridUserAD = new PMUI.field.TextField({
            id: "searchGridUserAD",
            label: " ",
            placeholder: 'Text to Search'.translate(),
            style: {
                cssClasses: [
                    'mafe-assigment-search'
                ]
            }
        });
        var panelGridUserAD = new PMUI.core.Panel({
            id: "panelGridUserAD",
            layout: "hbox",
            style: {
                cssClasses: ["mafe-panel"]
            }
        });
        var buttonsUsersAD = new PMUI.field.OptionsSelectorField({
            id: "buttonsUsersAD",
            orientation: "horizontal",
            items: [
                {
                    text: "All".translate(),
                    selected: true,
                    value: "all",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                },
                {
                    text: "Users".translate(),
                    value: "user",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                },
                {
                    text: "Groups".translate(),
                    value: "group",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }
            ],
            listeners: {
                select: function (item, event) {
                    quickMessageWindow.close();
                    groupRows(gridUsersAD, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUsersAD = new PMUI.grid.GridPanel({
            id: "gridUsersAD",
            pageSize: pageSizeAssignmentAD - 1,
            filterable: true,
            behavior: 'dragdropsort',
            filterPlaceholder: 'Text to Search'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            columns: [
                {
                    id: 'gridUsersADButtonLabel',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        if (row.data.customKeys.ass_type === "group") {
                            restClient.setTypeRequest("get");
                            restClient.functionSuccess = function (xhr, response) {
                                var stringUsersAD = "";
                                if (response.length === 0)
                                    stringUsersAD = "No users";
                                else {
                                    for (var i = 0; i < response.length; i++)
                                        if (stringUsersAD === "")
                                            stringUsersAD += response[i].usr_firstname + " " + response[i].usr_lastname;
                                        else
                                            stringUsersAD += "," + response[i].usr_firstname + " " + response[i].usr_lastname;
                                }
                                quickMessageWindow.show($(row.html).find('a')[0], stringUsersAD);
                            };
                            restClient.setBaseEndPoint("group/" + row.data.customKeys.ada_uid + "/users");
                            restClient.executeRestClient();
                        }
                    }
                },
                {
                    title: "",
                    dataType: 'string',
                    columnData: "fullName",
                    alignmentCell: "left",
                    width: "80%"
                },
                {
                    id: 'gridUsersADButtonAssign',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        var sw = row.data.customKeys.ass_type === 'user';
                        row.getCells()[0].content.style.addClasses([sw ? 'button-icon-user' : 'button-icon-group']);
                        return "ASSIGN".translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        grid.sort('fullName', 'asc');
                        gridUserListAD.addItem(row);
                        buttonsUserListAD.setValue(buttonsUsersAD.getValue());
                        groupRows(gridUserListAD, buttonsUsersAD.getValue());
                        assigneeAD(row);
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                assigneeAD(item);
            },
            onDrop: function (a, row) {
                buttonsUsersAD.setValue(buttonsUserListAD.getValue());
                groupRows(gridUsersAD, buttonsUserListAD.getValue());
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });

        var assigmentPanelUserListAD = new PMUI.core.Panel({
            id: "assigmentPanelUserListAD",
            layout: "vbox",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-smooth'
                ]
            },
            width: "60%"
        });
        var panelTitleUseListAD = new PMUI.core.Panel({
            id: "panelTitleUseListAD",
            layout: "hbox"
        });
        var titleUserListAD = new PMUI.ui.TextLabel({
            id: "titleUserListAD",
            textMode: 'plain',
            text: 'ASSIGNED USERS LIST'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });

        var panelGridUserListAD = new PMUI.core.Panel({
            id: "panelGridUserListAD",
            layout: "hbox",
            style: {
                cssClasses: ["mafe-panel"]
            }
        });
        var buttonsUserListAD = new PMUI.field.OptionsSelectorField({
            id: "buttonsUserListAD",
            orientation: "horizontal",
            items: [
                {
                    text: "All".translate(),
                    value: "all",
                    selected: true,
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                },
                {
                    text: "Users".translate(),
                    value: "user",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                },
                {
                    text: "Groups".translate(),
                    value: "group",
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }
            ],
            listeners: {
                select: function (item, event) {
                    quickMessageWindow.close();
                    groupRows(gridUserListAD, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUserListAD = new PMUI.grid.GridPanel({
            id: "gridUserListAD",
            pageSize: pageSizeAssignmentAD - 1,
            behavior: 'dragdropsort',
            filterable: true,
            filterPlaceholder: 'Text to Search'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            emptyMessage: function () {
                var div = document.createElement('div');
                var span = document.createElement('span');
                div.appendChild(span);
                div.className = "mafe-grid-panel-empty";
                div.style.height = gridUserListAD.dom.tableContainer.style.height;
                div.style.width = gridUserListAD.dom.tableContainer.style.width;
                span.innerHTML = 'Drag & Drop a User or a Group here'.translate();
                return div;
            },
            onEmpty: function (grid, cell) {
                gridUserListAD.dom.tableContainer.style.overflow = "hidden";
            },
            columns: [
                {
                    id: 'gridUserListADButtonLabel',
                    title: "",
                    width: "13%",
                    dataType: 'button',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        if (row.data.customKeys.ass_type === "group") {
                            restClient.setTypeRequest("get");
                            restClient.functionSuccess = function (xhr, response) {
                                var stringUsersAD = "";
                                if (response.length === 0)
                                    stringUsersAD = "No users";
                                else {
                                    for (var i = 0; i < response.length; i++)
                                        if (stringUsersAD === "")
                                            stringUsersAD += response[i].usr_firstname + " " + response[i].usr_lastname;
                                        else
                                            stringUsersAD += ", " + response[i].usr_firstname + " " + response[i].usr_lastname;
                                }
                                quickMessageWindow.show($(row.html).find('a')[0], stringUsersAD);
                            };
                            restClient.setBaseEndPoint("group/" + row.data.customKeys.ada_uid + "/users");
                            restClient.executeRestClient();
                        }
                    }
                },
                {
                    title: '',
                    dataType: 'string',
                    columnData: "fullName",
                    width: "80%",
                    alignmentCell: "left"
                },
                {
                    id: 'gridUserListADButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        var sw = row.data.customKeys.ass_type === 'user';
                        row.getCells()[0].content.style.addClasses([sw ? 'button-icon-user' : 'button-icon-group']);
                        return "Remove".translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        grid.sort('fullName', 'asc');
                        gridUsersAD.addItem(row);
                        buttonsUsersAD.setValue(buttonsUserListAD.getValue());
                        groupRows(gridUsersAD, buttonsUserListAD.getValue());
                        removeAD(row);
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                removeAD(item);
            },
            onDrop: function (a, row) {
                buttonsUserListAD.setValue(buttonsUsersAD.getValue());
                groupRows(gridUserListAD, buttonsUsersAD.getValue());
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });


        var panelContainerRules = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH - 55,
            height: DEFAULT_WINDOW_HEIGHT - 55,
            fieldset: true,
            items: [
                formAssignmentRules
            ]
        });
        var panelContainerUsers = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH,
            height: DEFAULT_WINDOW_HEIGHT - 55,
            fieldset: true,
            items: [
                assigmentPanelGlobal
            ]
        });
        var panelContainerUsersAdHoc = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH,
            height: DEFAULT_WINDOW_HEIGHT - 55,
            fieldset: true,
            items: [
                assigmentPanelGlobalAD
            ]
        });
        var tabPanelAssignmentRules = new PMUI.panel.TabPanel({
            id: 'tabPanelAssignmentRules',
            width: "100%",
            items: [
                {
                    id: 'tabRules',
                    title: 'Rules'.translate(),
                    panel: panelContainerRules
                },
                {
                    id: 'tabUsers',
                    title: 'Users'.translate(),
                    panel: panelContainerUsers
                },
                {
                    id: 'tabUsersAdHoc',
                    title: 'Ad Hoc Users'.translate(),
                    panel: panelContainerUsersAdHoc
                }
            ],
            onTabClick: function (item) {
                quickMessageWindow.close();
                switch (item.id) {
                    case 'tabRules':
                        formAssignmentRules.showFooter();
                        formAssignmentRules.setButtonPanelPosition('top');
                        formAssignmentRules.footer.html.style.textAlign = 'right';
                        var style = $('.pmui.pmui-buttonpanel.pmui-form-footer.pmui-empty').attr("style");
                        style = style + ' background-color: transparent; ';
                        $('.pmui.pmui-buttonpanel.pmui-form-footer.pmui-empty').attr("style", style);
                        style = $('#formTasAssignType .pmui-field-label').attr("style");
                        style = style + ' float: left;';
                        $('#formTasAssignType .pmui-field-label').attr("style", style);
                        break;
                    case 'tabUsers':
                        applyStyles();
                        gridUsers.sort('fullName', 'asc');
                        gridUserList.sort('fullName', 'asc');
                        break;
                    case 'tabUsersAdHoc':
                        applyStylesAD();
                        gridUsersAD.sort('fullName', 'asc');
                        gridUserListAD.sort('fullName', 'asc');
                        break;
                }
            }
        });
        var windowAssignmentRules = new PMUI.ui.Window({
            id: 'windowAssignmentRules',
            title: 'Assignment Rules'.translate() + ': ' + activity.act_name,
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            buttonPanelPosition: "top"
        });

        var loadTrigger = function (response) {
            var field = formAssignmentRules.getField('tas_selfservice_trigger_uid');
            field.clearOptions();
            field.addOption({
                value: '',
                label: '- Select Trigger -'.translate()
            });
            for (var i = 0; i < response.length; i++) {
                field.addOption({
                    value: response[i].tri_uid,
                    label: response[i].tri_title
                });
            }
        };
        var loadFormData = function (response) {
            dataProperties = response.properties;
            formAssignmentRules.getField('tas_type').setValue(dataProperties.tas_type);
            formAssignmentRules.getField('tas_type').setHeight(57);
            hiddenTab(dataProperties.tas_type);
            formAssignmentRules.getField('tas_assign_type').setValue(dataProperties.tas_assign_type);
            formAssignmentRules.getField('tas_assign_variable').setValue(dataProperties.tas_assign_variable);
            formAssignmentRules.getField('tas_group_variable').setValue(dataProperties.tas_group_variable);
            changeRadioButtons(formAssignmentRules.getField('tas_assign_type').getValue());
            formAssignmentRules.getField('tas_selfservice_timeout').controls[0].deselect();
            if (dataProperties.tas_selfservice_timeout === 1) {
                formAssignmentRules.getField('tas_selfservice_timeout').controls[0].select();
            }
            formAssignmentRules.getField('tas_selfservice_time').setValue(dataProperties.tas_selfservice_time);
            formAssignmentRules.getField('tas_selfservice_time_unit').setValue(dataProperties.tas_selfservice_time_unit);
            formAssignmentRules.getField('tas_selfservice_trigger_uid').setValue(dataProperties.tas_selfservice_trigger_uid);
            visibleService(dataProperties.tas_selfservice_timeout === 1);
        };
        var loadServerData = function () {
            var restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id,
                            method: 'GET'
                        }, {
                            url: 'project/' + PMDesigner.project.id + '/triggers',
                            method: 'GET'
                        }, {
                            url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/available-assignee',
                            method: 'GET'
                        }, {
                            url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/assignee',
                            method: 'GET'
                        }, {
                            url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/adhoc-available-assignee',
                            method: 'GET'
                        }, {
                            url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/adhoc-assignee',
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    loadTrigger(response[1].response);
                    loadFormData(response[0].response);
                    loadFreeUsers(response[2].response);
                    loadAssignmentUsers(response[3].response);
                    loadAdHocFreeUsers(response[4].response);
                    loadAdHocAssignmentUsers(response[5].response);
                }
            });
            restClient.setBaseEndPoint('');
            restClient.executeRestClient();
        };
        var loadFreeUsers = function (response) {
            gridUsers.clearItems();
            for (var i = 0; i < response.length; i++) {
                gridUsers.addDataItem({fullName: response[i].aas_name + " " + response[i].aas_lastname, ass_uid: response[i].aas_uid, ass_type: response[i].aas_type});
            }
        };
        var loadAssignmentUsers = function (response) {
            gridUserList.clearItems();
            for (var i = 0; i < response.length; i++) {
                gridUserList.addDataItem({fullName: response[i].aas_name + " " + response[i].aas_lastname, ass_uid: response[i].aas_uid, ass_type: response[i].aas_type});
            }
        };
        var loadAdHocFreeUsers = function (response) {
            gridUsersAD.clearItems();
            for (var i = 0; i < response.length; i++) {
                gridUsersAD.addDataItem({fullName: response[i].ada_name + " " + response[i].ada_lastname, ada_uid: response[i].ada_uid, ass_type: response[i].ada_type});
            }
        };
        var loadAdHocAssignmentUsers = function (response) {
            gridUserListAD.clearItems();
            for (var i = 0; i < response.length; i++) {
                gridUserListAD.addDataItem({fullName: response[i].ada_name + " " + response[i].ada_lastname, ada_uid: response[i].ada_uid, ass_type: response[i].ada_type});
            }
        };
        var updateRules = function () {
            (new PMRestClient({
                endpoint: 'activity/' + activity.id,
                typeRequest: 'update',
                messageError: ' '.translate(),
                data: {
                    definition: {},
                    properties: dataProperties
                },
                messageSuccess: 'Assignment Rules saved successfully'.translate(),
                flashContainer: tabPanelAssignmentRules
            })).executeRestClient();
        };
        var allHidden = function () {
            formAssignmentRules.getField('tas_assign_variable').setVisible(false);
            formAssignmentRules.getField('tas_group_variable').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_timeout').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_timeout').controls[0].deselect();
            formAssignmentRules.getField('tas_selfservice_time').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_time_unit').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_trigger_uid').setVisible(false);
        };
        var changeRadioButtons = function (newVal) {
            allHidden();
            tabPanelAssignmentRules.showTab(1);
            switch (newVal) {
                case 'EVALUATE':
                    tabPanelAssignmentRules.hideTab(1);
                    formAssignmentRules.getField('tas_assign_variable').setVisible(true);
                    if (dataProperties.tas_assign_variable === "" || dataProperties.tas_assign_variable === null) {
                        formAssignmentRules.getField('tas_assign_variable').setValue('@@SYS_NEXT_USER_TO_BE_ASSIGNED');
                    } else {
                        formAssignmentRules.getField('tas_assign_variable').setValue(dataProperties.tas_assign_variable);
                    }
                    break;
                case 'SELF_SERVICE':
                    formAssignmentRules.getField('tas_selfservice_timeout').setVisible(true);
                    break;
                case 'SELF_SERVICE_EVALUATE':
                    tabPanelAssignmentRules.hideTab(1);
                    formAssignmentRules.getField('tas_group_variable').setVisible(true);
                    if (dataProperties.tas_group_variable === "" || dataProperties.tas_group_variable === null) {
                        formAssignmentRules.getField('tas_group_variable').setValue('@@SYS_GROUP_TO_BE_ASSIGNED');
                    } else {
                        formAssignmentRules.getField('tas_group_variable').setValue(dataProperties.tas_group_variable);
                    }
                    formAssignmentRules.getField('tas_selfservice_timeout').setVisible(true);
                    break;
                case 'REPORT_TO':
                    tabPanelAssignmentRules.hideTab(1);
                    break;
                default:
                    break;
            }
        };
        var visibleService = function (value) {
            var a = formAssignmentRules.getField('tas_assign_type').getValue();
            if (a === 'SELF_SERVICE' || a === 'SELF_SERVICE_EVALUATE') {
                formAssignmentRules.getField('tas_selfservice_time').setVisible(value);
                formAssignmentRules.getField('tas_selfservice_time_unit').setVisible(value);
                formAssignmentRules.getField('tas_selfservice_trigger_uid').setVisible(value);
            }
        };
        var hiddenTab = function (value) {
            switch (value) {
                case 'NORMAL':
                    tabPanelAssignmentRules.hideTab(2);
                    break;
                case 'ADHOC':
                    tabPanelAssignmentRules.showTab(2);
                    break;
                default:
                    break;
            }
        };
        var saveData = function () {
            var tas_selfservice_timeout = formAssignmentRules.getField('tas_selfservice_timeout').getValue() === '["1"]';
            if (tas_selfservice_timeout) {
                if (!formAssignmentRules.isValid()) {
                    return;
                }
            } else {
                var a = formAssignmentRules.getField('tas_assign_type').getValue();
                var b = formAssignmentRules.getField('tas_assign_variable').getValue();
                var c = formAssignmentRules.getField('tas_group_variable').getValue();
                var d = formAssignmentRules.getField('tas_group_variable').getValue();
                formAssignmentRules.getField('tas_assign_type').setValue(a);
                formAssignmentRules.getField('tas_assign_variable').setValue(b);
                formAssignmentRules.getField('tas_group_variable').setValue(c);
                formAssignmentRules.getField('tas_selfservice_timeout').setValue(d);
                formAssignmentRules.getField('tas_selfservice_time').setValue('');
                formAssignmentRules.getField('tas_selfservice_time_unit').setValue('');
                formAssignmentRules.getField('tas_selfservice_trigger_uid').setValue('');
            }

            dataProperties.tas_type = formAssignmentRules.getField('tas_type').getValue();
            dataProperties.tas_assign_type = formAssignmentRules.getField('tas_assign_type').getValue();
            dataProperties.tas_assign_variable = formAssignmentRules.getField('tas_assign_variable').getValue() === '' ? '@@SYS_NEXT_USER_TO_BE_ASSIGNED' : formAssignmentRules.getField('tas_assign_variable').getValue();
            dataProperties.tas_group_variable = formAssignmentRules.getField('tas_group_variable').getValue() === '' ? '@@SYS_GROUP_TO_BE_ASSIGNED' : formAssignmentRules.getField('tas_group_variable').getValue();
            dataProperties.tas_selfservice_timeout = tas_selfservice_timeout ? 1 : 0;
            dataProperties.tas_selfservice_time = formAssignmentRules.getField('tas_selfservice_time').getValue();
            dataProperties.tas_selfservice_time_unit = formAssignmentRules.getField('tas_selfservice_time_unit').getValue();
            dataProperties.tas_selfservice_trigger_uid = formAssignmentRules.getField('tas_selfservice_trigger_uid').getValue();
            updateRules();
        };
        var applyStyles = function () {
            gridUsers.dom.toolbar.appendChild(buttonsUsers.getHTML());
            gridUsers.dom.toolbar.style.height = "76px";
            gridUserList.dom.toolbar.appendChild(buttonsUserList.getHTML());
            gridUserList.dom.toolbar.style.height = "76px";
            buttonsUsers.dom.labelTextContainer.style.display = "none";
            buttonsUserList.dom.labelTextContainer.style.display = "none";
            gridUsers.hideHeaders();
            gridUserList.hideHeaders();
            assigmentPanelUserList.setHeight('100%');
            gridUsers.filterControl.html.style.width = "300px";
            gridUserList.filterControl.html.style.width = "300px";
        };
        var applyStylesAD = function () {
            gridUsersAD.dom.toolbar.appendChild(buttonsUsersAD.getHTML());
            gridUsersAD.dom.toolbar.style.height = "76px";
            gridUserListAD.dom.toolbar.appendChild(buttonsUserListAD.getHTML());
            gridUserListAD.dom.toolbar.style.height = "76px";
            buttonsUsersAD.dom.labelTextContainer.style.display = "none";
            buttonsUserListAD.dom.labelTextContainer.style.display = "none";
            gridUsersAD.hideHeaders();
            gridUserListAD.hideHeaders();
            assigmentPanelUserListAD.setHeight('100%');
            gridUsersAD.filterControl.html.style.width = "300px";
            gridUserListAD.filterControl.html.style.width = "300px";
        };
        var assignee = function (row) {
            restClient.setTypeRequest("post");
            restClient.setEndpoint("activity/" + activity.id + "/assignee");
            restClient.setData({aas_uid: row.data.customKeys.ass_uid, aas_type: row.data.customKeys.ass_type});
            restClient.functionSuccess = function (xhr, response) {
            };
            restClient.executeRestClient();
        };
        var remove = function (row) {
            restClient.setTypeRequest("remove");
            restClient.setEndpoint("activity/" + activity.id + "/assignee/" + row.data.customKeys.ass_uid);
            restClient.functionSuccess = function (xhr, response) {
            };
            restClient.executeRestClient();
        };
        var assigneeAD = function (row) {
            restClient.setTypeRequest("post");
            restClient.setEndpoint("activity/" + activity.id + "/adhoc-assignee");
            restClient.setData({ada_uid: row.data.customKeys.ada_uid, ada_type: row.data.customKeys.ass_type});
            restClient.functionSuccess = function (xhr, response) {
            };
            restClient.executeRestClient();
        };
        var removeAD = function (row) {
            restClient.setTypeRequest("remove");
            restClient.setEndpoint("activity/" + activity.id + "/adhoc-assignee/" + row.data.customKeys.ada_uid);
            restClient.functionSuccess = function (xhr, response) {
            };
            restClient.executeRestClient();
        };
        var groupRows = function (grid, value) {
            if (grid.memorystack === undefined) {
                grid.memorystack = [];
            }
            var i, items = grid.getItems();
            while (grid.memorystack.length > 0) {
                grid.addItem(grid.memorystack.pop());
            }
            if (value !== 'all') {
                for (i = 0; i < items.length; i++) {
                    if (items[i].getData().ass_type !== value) {
                        grid.memorystack.push(items[i]);
                        grid.removeItem(items[i]);
                    }
                }
            }
            grid.sort('fullName', 'asc');
        };

        panelTitleUser.addItem(titleUser);
        panelGridUser.addItem(gridUsers);
        assigmentPanelUser.addItem(panelTitleUser);
        assigmentPanelUser.addItem(panelGridUser);
        assigmentPanelGlobal.addItem(assigmentPanelUser);
        panelTitleUserList.addItem(titleUserList);

        panelGridUserList.addItem(gridUserList);
        assigmentPanelUserList.addItem(panelTitleUserList);

        assigmentPanelUserList.addItem(panelGridUserList);
        assigmentPanelGlobal.addItem(assigmentPanelUserList);

        panelTitleUserAD.addItem(titleUserAD);
        panelSearchUserAD.addItem(searchGridUserAD);
        panelGridUserAD.addItem(gridUsersAD);
        assigmentPanelUserAD.addItem(panelTitleUserAD);
        assigmentPanelUserAD.addItem(panelGridUserAD);
        assigmentPanelGlobalAD.addItem(assigmentPanelUserAD);

        panelTitleUseListAD.addItem(titleUserListAD);
        panelGridUserListAD.addItem(gridUserListAD);
        assigmentPanelUserListAD.addItem(panelTitleUseListAD);
        assigmentPanelUserListAD.addItem(panelGridUserListAD);
        assigmentPanelGlobalAD.addItem(assigmentPanelUserListAD);

        windowAssignmentRules.addItem(tabPanelAssignmentRules);
        windowAssignmentRules.open();
        applyStyleWindowForm(windowAssignmentRules);
        windowAssignmentRules.body.style.overflow = "hidden";
        windowAssignmentRules.defineEvents();
        tabPanelAssignmentRules.itemClick(0);

        loadServerData();
    };
}());

(function () {
    PMDesigner.assigmentSupervisors = function (event) {
        var assigmentWindow = null,
                pageSizeAssignment = 8,
                quickMessageWindow = new QuickMessageWindow();

        var assigmentWindow = new PMUI.ui.Window({
            id: 'assigmentUserWindow',
            title: 'Assign Users and Groups as Supervisors'.translate(),
            width: DEFAULT_WINDOW_WIDTH+1,
            height: DEFAULT_WINDOW_HEIGHT,
            footerHeight: 'auto',
            bodyHeight: 'auto',
            modal: true
        });
        var restClient = new PMRestClient({
            endpoint: 'projects',
            typeRequest: 'get',
            messageError: 'There are problems, please try again.'.translate()
        });

        var assigmentPanelUser = new PMUI.core.Panel({           
            layout: "vbox",
            width:"49%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            } 
        });
        var assigmentPanelUserList = new PMUI.core.Panel({
            layout: "vbox",
            width:"50%",            
            style: {
                cssClasses: [
                    'mafe-panel-assignment-smooth'
                ]
            } 
        });
        var assigmentPanelGlobal = new PMUI.core.Panel({
            layout: 'hbox',
            width:DEFAULT_WINDOW_WIDTH,           
            style: {
                cssClasses: [
                    'mafe-assigment-panel-global'
                ]
            }
        });

        var panelTitleUser = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var titleUser = new PMUI.ui.TextLabel({
            id: 'titleUser',
            label: ' ',
            textMode: 'plain',
            text: 'AVAILABLE USERS LIST'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelSearchUser = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var searchGridUser = new PMUI.field.TextField({
            id: 'searchGridUser',
            label: ' ',
            placeholder: 'Text to Search'.translate()
        });
        var panelGridUser = new PMUI.core.Panel({layout: 'hbox'});
        var buttonsUsers = new PMUI.field.OptionsSelectorField({
            id: 'buttonsUsers',
            orientation: 'horizontal',
            items: [{
                    text: 'All'.translate(),
                    selected: true,
                    value: 'all',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                }, {
                    text: 'Users'.translate(),
                    value: 'user',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                }, {
                    text: 'Groups'.translate(),
                    value: 'group',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }
            ],
            listeners: {
                select: function (item, event) {
                    groupRows(gridUsers, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUsers = new PMUI.grid.GridPanel({
            id: 'gridUsers',
            pageSize: pageSizeAssignment,
            behavior: 'dragdropsort',
            filterable: true,
            filterPlaceholder: 'Text to Search'.translate(),
            emptyMessage : 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            columns: [{
                    id: 'gridUsersButtonLabel',
                    title: '',
                    dataType: 'button',
                    width: '10%',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        if (row.data.customKeys.obj_type === 'group') {
                            restClient.setTypeRequest('get');
                            restClient.functionSuccess = function (xhr, response) {
                                var stringUsers = '';
                                for (var i = 0; i < response.length; i++) {
                                    stringUsers = stringUsers + response[i].usr_firstname + ' ' + response[i].usr_lastname + ', ';
                                }
                                stringUsers = stringUsers.substring(1, stringUsers.length - 2);
                                if (stringUsers === '') {
                                    stringUsers = 'No users';
                                }
                                quickMessageWindow.show($(row.html).find('a')[0], stringUsers);
                            };
                            restClient.setBaseEndPoint('group/' + row.data.customKeys.sup_uid + '/users');
                            restClient.executeRestClient();
                        }
                    }
                }, {
                    title: '',
                    dataType: 'string',
                    columnData: 'sup_name',
                    alignmentCell: 'left',
                    width: '80%'
                }, {
                    id: 'gridUsersButtonAssign',
                    title: '',
                    dataType: 'button',
                    width: '19%',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        row.getCells()[0].content.style.addClasses([row.data.customKeys.obj_type === 'user' ? 'button-icon-user' : 'button-icon-group']);
                        return 'ASSIGN'.translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        grid.sort('sup_name', 'asc');
                        gridUserList.addItem(row);
                        buttonsUserList.setValue(buttonsUsers.getValue());
                        groupRows(gridUserList, buttonsUsers.getValue());
                        assignee(row);
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                assignee(item);
            },
            onDrop: function (a, row) {
                buttonsUsers.setValue(buttonsUserList.getValue());
                groupRows(gridUsers, buttonsUserList.getValue());
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });

        var panelTitleUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var titleUserList = new PMUI.ui.TextLabel({
            id: 'titleUserList',
            textMode: 'plain',
            text: 'ASSIGNED USERS LIST'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelSearchUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var searchGridUserList = new PMUI.field.TextField({
            id: 'searchGridUserList',
            label: ' ',
            placeholder: 'Text to Search'.translate()
        });
        var panelGridUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var buttonsUserList = new PMUI.field.OptionsSelectorField({
            id: 'buttonsUserList',
            orientation: 'horizontal',
            items: [{
                    text: 'All'.translate(),
                    value: 'all',
                    selected: true,
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                }, {
                    text: 'Users'.translate(),
                    value: 'user',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                }, {
                    text: 'Groups'.translate(),
                    value: 'group',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }

            ],
            listeners: {
                select: function (item, event) {
                    groupRows(gridUserList, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUserList = new PMUI.grid.GridPanel({
            id: 'gridUserList',
            pageSize: pageSizeAssignment,
            behavior: 'dragdropsort',
            filterPlaceholder: 'Text to Search'.translate(),
            filterable:true,
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            emptyMessage: function () {
                var div = document.createElement('div');
                var span = document.createElement('span');
                div.appendChild(span);
                div.className = 'mafe-grid-panel-empty';
                //div.style.height = gridUserList.dom.tableContainer.style.height;
                //div.style.width = gridUserList.dom.tableContainer.style.width;
                span.innerHTML = 'Drag & Drop a User or a Group here'.translate();
                return div;
            },
            onEmpty: function (grid, cell) {
                gridUserList.dom.tableContainer.style.overflow = 'hidden';
            },
            columns: [{
                    id: 'gridUserListButtonLabel',
                    title: '',
                    width: '10%',
                    dataType: 'button',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        if (row.data.customKeys.obj_type === 'group') {
                            restClient.setTypeRequest('get');
                            restClient.functionSuccess = function (xhr, response) {
                                var stringUsers = '';
                                for (var i = 0; i < response.length; i++) {
                                    stringUsers = stringUsers + response[i].usr_firstname + ' ' + response[i].usr_lastname + ', ';
                                }
                                stringUsers = stringUsers.substring(1, stringUsers.length - 2);
                                if (stringUsers === '') {
                                    stringUsers = 'No users';
                                }
                                quickMessageWindow.show($(row.html).find('a')[0], stringUsers);
                            };
                            restClient.setBaseEndPoint('group/' + row.data.customKeys.sup_uid + '/users');
                            restClient.executeRestClient();
                        }
                    }
                }, {
                    title: '',
                    dataType: 'string',
                    columnData: 'sup_name',
                    width: '80%',
                    alignmentCell: 'left'
                }, {
                    id: 'gridUserListButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: '10%',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        row.getCells()[0].content.style.addClasses([row.data.customKeys.obj_type === 'user' ? 'button-icon-user' : 'button-icon-group']);
                        return 'Remove'.translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        grid.sort('sup_name', 'asc');
                        gridUsers.addItem(row);
                        buttonsUsers.setValue(buttonsUserList.getValue());
                        groupRows(gridUsers, buttonsUserList.getValue());
                        remove(row);
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                remove(item);
            },
            onDrop: function (a, row) {
                buttonsUserList.setValue(buttonsUsers.getValue());
                groupRows(gridUserList, buttonsUsers.getValue());
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });

        var applyStyles = function () {
            gridUsers.dom.toolbar.appendChild(buttonsUsers.getHTML());
            gridUsers.dom.toolbar.style.height = "76px";
            gridUserList.dom.toolbar.appendChild(buttonsUserList.getHTML());
            gridUserList.dom.toolbar.style.height = "76px";
            buttonsUsers.dom.labelTextContainer.style.display = "none";
            buttonsUserList.dom.labelTextContainer.style.display = "none";            
            gridUsers.hideHeaders();
            gridUserList.hideHeaders();
            assigmentPanelUserList.setHeight('100%');
            gridUsers.filterControl.html.style.width = "300px";
            gridUserList.filterControl.html.style.width = "300px";      
        };
        var loadServerData = function () {
            var restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'project/' + PMDesigner.project.id + '/available-process-supervisors',
                            method: 'GET'
                        }, {
                            url: 'project/' + PMDesigner.project.id + '/process-supervisors',
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    loadUsers(response[0].response);
                    loadUsersList(response[1].response);
                }
            });
            restClient.setBaseEndPoint('');
            restClient.executeRestClient();
        };
        var loadUsers = function (response) {
            for (var i = 0; i < response.length; i++) {
                if (response[i].obj_type === 'user') {
                    gridUsers.addDataItem({
                        sup_uid: response[i].usr_uid,
                        sup_name: response[i].usr_firstname + ' ' + response[i].usr_lastname,
                        obj_type: response[i].obj_type
                    });
                }
                if (response[i].obj_type === 'group') {
                    gridUsers.addDataItem({
                        sup_uid: response[i].grp_uid,
                        sup_name: response[i].grp_name,
                        obj_type: response[i].obj_type
                    });
                }
            }
            gridUsers.sort('sup_name', 'asc');
        };
        var loadUsersList = function (response) {
            for (var i = 0; i < response.length; i++) {
                if (response[i].pu_type === 'SUPERVISOR') {
                    gridUserList.addDataItem({
                        sup_uid: response[i].usr_uid,
                        sup_name: response[i].usr_firstname + ' ' + response[i].usr_lastname,
                        obj_type: 'user',
                        pu_type: response[i].pu_type,
                        pu_uid: response[i].pu_uid
                    });
                }
                if (response[i].pu_type === 'GROUP_SUPERVISOR') {
                    gridUserList.addDataItem({
                        sup_uid: response[i].grp_uid,
                        sup_name: response[i].grp_name,
                        obj_type: 'group',
                        pu_type: response[i].pu_type,
                        pu_uid: response[i].pu_uid
                    });
                }
            }
            gridUserList.sort('sup_name', 'asc');
        };
        var groupRows = function (grid, value) {
            if (grid.memorystack === undefined) {
                grid.memorystack = [];
            }
            var i, items = grid.getItems();
            while (grid.memorystack.length > 0) {
                grid.addItem(grid.memorystack.pop());
            }
            if (value !== 'all') {
                for (i = 0; i < items.length; i++) {
                    if (items[i].getData().obj_type !== value) {
                        grid.memorystack.push(items[i]);
                        grid.removeItem(items[i]);
                    }
                }
            }
            grid.sort('sup_name', 'asc');
        };
        var assignee = function (row) {
            var restClient = new PMRestClient({
                endpoint: 'process-supervisor',
                typeRequest: 'post',
                data: {
                    usr_uid: row.data.customKeys.sup_uid,
                    pu_type: row.data.customKeys.obj_type === 'group' ? 'GROUP_SUPERVISOR' : 'SUPERVISOR'
                },
                functionSuccess: function (xhr, response) {
                    row.data.customKeys.pu_type = response.pu_type;
                    row.data.customKeys.pu_uid = response.pu_uid;
                },
                messageError: 'There are problems saving the assigned user, please try again.'.translate()
            });
            restClient.executeRestClient();
        };
        var remove = function (row) {
            var restClient = new PMRestClient({
                endpoint: 'process-supervisor/' + row.data.customKeys.pu_uid,
                typeRequest: 'remove',
                functionSuccess: function () {
                },
                functionComplete: function () {
                }
            });
            restClient.executeRestClient();
        };

        assigmentWindow.open();

        panelTitleUser.addItem(titleUser);
        panelTitleUserList.addItem(titleUserList);
        assigmentWindow.body.style.overflow = "hidden";

        //panelSearchUser.addItem(searchGridUser);
        //panelSearchUserList.addItem(searchGridUserList);

        panelGridUser.addItem(gridUsers);
        panelGridUserList.addItem(gridUserList);

        assigmentPanelGlobal.addItem(assigmentPanelUser);
        assigmentPanelGlobal.addItem(assigmentPanelUserList);
        assigmentWindow.addItem(assigmentPanelGlobal);

        assigmentPanelUser.addItem(panelTitleUser);
        assigmentPanelUser.addItem(panelSearchUser);
        assigmentPanelUser.addItem(buttonsUsers);
        assigmentPanelUser.addItem(panelGridUser);

        assigmentPanelUserList.addItem(panelTitleUserList);
        assigmentPanelUserList.addItem(panelSearchUserList);
        assigmentPanelUserList.addItem(buttonsUserList);
        assigmentPanelUserList.addItem(panelGridUserList);

        assigmentWindow.defineEvents();
        applyStyles();

        
        loadServerData();
    };
}());
(function () {
    PMDesigner.assigmentSupervisorsSteps = function () {
        var treePanelSteps,
                gridPanelSteps,
                panelSteps,
                rowStep,
                baseEndPoint,
                windowSupervisorsSteps;

        loadDataTree = function (data, type, grid) {
            for (var i = 0; i < data.length; i++) {
                switch (type) {
                    case 'dynaforms':
                        data[i]['obj_title'] = data[i]['dyn_title'];
                        data[i]['obj_uid'] = (grid) ? data[i]['pud_uid'] : data[i]['dyn_uid'];
                        data[i]['obj_type'] = 'dynaform';
                        break;
                    case 'input-documents':
                        data[i]['obj_title'] = (grid) ? data[i]['input_doc_title'] : data[i]['inp_doc_title'];
                        data[i]['obj_uid'] = (grid) ? data[i]['pui_uid'] : data[i]['inp_doc_uid'];
                        data[i]['obj_type'] = 'input-document';
                        break;
                    default:
                        break;
                }
            }
            return data;
        };

        getValuesSupervisorSteps = function (param) {
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    "calls": [
                        {
                            "url": "process-supervisor/available-" + param,
                            "method": 'GET'
                        },
                        {
                            "url": "process-supervisor/" + param,
                            "method": 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    treePanelSteps.setDataItems(loadDataTree(response[0].response, param, false));
                    gridPanelSteps.setDataItems(loadDataTree(response[1].response, param, true));
                }
            });
            restClient.executeRestClient();
        };

        saveItem = function () {
            switch (rowStep.obj_type) {
                case 'dynaform':
                    data = {
                        "dyn_uid": rowStep.obj_uid,
                        "pud_position": rowStep.pui_position
                    };
                    break;
                case 'input-document':
                    data = {
                        "inp_doc_uid": rowStep.obj_uid,
                        "pui_position": rowStep.pui_position
                    };
                    break;
            }

            restClient = new PMRestClient({
                endpoint: 'process-supervisor/' + rowStep.obj_type,
                typeRequest: 'post',
                data: data,
                functionSuccess: function (xhr, response) {
                    data = response;
                },
                messageError: "There are problems saved the " + rowStep.obj_type + ", please try again.".translate()
            });
            restClient.executeRestClient();
            return data;
        };

        updateItem = function () {
            var data = [];
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    "calls": [
                        {
                            "url": 'process-supervisor/' + rowStep.obj_type + "/" + rowStep.obj_uid,
                            "method": 'PUT',
                            "data": rowStep
                        },
                        {
                            "url": 'process-supervisor/' + baseEndPoint,
                            "method": 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    data = loadDataTree(response[1].response, baseEndPoint, true);
                }
            });
            restClient.executeRestClient();
            gridPanelSteps.setDataItems(data);
        };

        deleteItem = function () {
            confirmWindow = new PMUI.ui.MessageWindow({
                id: "stepMessageWindowWarning",
                windowMessageType: 'error',
                width: 490,
                title: '',
                message: "Do you want to remove".translate() + " '" + rowStep.obj_title + "' ?",
                footerItems: [
                    {
                        id: 'confirmWindowButtonYes',
                        text: "Remove".translate(),
                        height: 40,
                        handler: function () {
                            confirmWindow.close();
                            restClient = new PMRestClient({
                                typeRequest: 'post',
                                multipart: true,
                                data: {
                                    "calls": [
                                        {
                                            "url": 'process-supervisor/' + rowStep.obj_type + '/' + rowStep.obj_uid,
                                            "method": 'DELETE'
                                        },
                                        {
                                            "url": "process-supervisor/available-" + baseEndPoint,
                                            "method": 'GET'
                                        },
                                        {
                                            "url": "process-supervisor/" + baseEndPoint,
                                            "method": 'GET'
                                        }
                                    ]
                                },
                                functionSuccess: function (xhr, response) {
                                    treePanelSteps.setDataItems(loadDataTree(response[1].response, baseEndPoint, false));
                                    gridPanelSteps.setDataItems(loadDataTree(response[2].response, baseEndPoint, true));
                                    applyStyleTreePanel(treePanelSteps, false);
                                },
                                messageSuccess: ['Step removed successfully'.translate(), null, null],
                                flashContainer: tabPanelSteps
                            });
                            restClient.executeRestClient();
                        }
                    }, {
                        pmType: 'label',
                        text: "or".translate()
                    }, {
                        id: 'confirmWindowButtonNo',
                        text: "Cancel".translate(),
                        buttonType: 'link',
                        height: 40,
                        handler: function () {
                            confirmWindow.close();
                        }
                    }
                ]
            });
            confirmWindow.open();
            confirmWindow.showFooter();
        };

        treePanelSteps = new PMUI.panel.TreePanel({
            id: 'treePanelSteps',
            proportion: 0.5,
            filterable: true,
            filterPlaceholder: 'Text to Search'.translate(),
            emptyMessage: 'No records found'.translate(),
            style: {cssClasses: ['itemsSteps']},
            nodeDefaultSettings: {
                labelDataBind: 'obj_title',
                autoBind: true
            },
            behavior: 'drag'
        });

        gridPanelSteps = new PMUI.grid.GridPanel({
            id: 'gridPanelSteps',
            pageSize: 10,
            filterable: false,
            style: {cssClasses: ['itemsSteps']},
            filterPlaceholder: 'Text to Search'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            style:{
                cssClasses: ['mafe-gridPanel-smooth']
            },
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            behavior: 'dragdropsort',
            columns: [
                {
                    id: 'gridPanelStepsButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: "5%",
                    buttonLabel: "",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    }
                },
                {
                    title: 'Title'.translate(),
                    dataType: 'string',
                    width: "80%",
                    alignmentCell: "left",
                    columnData: "obj_title",
                    sortable: false
                },
                {
                    id: 'gridPanelStepsButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: "15%",
                    buttonLabel: "Remove".translate(),
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        rowStep = row.getData();
                        deleteItem();
                    }
                }
            ],
            onDrop: function (grid, item, index) {
                rowStep = item.getData();
                rowStep.pui_position = index + 1;
                data = saveItem();
                $.each(data, function (index, value) {
                    rowStep[index] = value;
                });
                switch (rowStep.obj_type) {
                    case 'dynaform':
                        rowStep['obj_uid'] = rowStep['pud_uid'];
                        break;
                    case 'input-document':
                        rowStep['obj_uid'] = rowStep['pui_uid'];
                        break;
                    default:
                        break;
                }
                item.setData(rowStep);
                return true;
            },
            onSort: function (grid, item, index) {
                rowStep = item.getData();
                rowStep.pui_position = index + 1;
                rowStep.pud_position = index + 1;
                updateItem();
            }
        });

        titleTreeStep = new PMUI.ui.TextLabel({
            id: "titleTreeStep",
            textMode: 'plain',
            text: 'AVAILABLE DYNAFORMS'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });

        titleGridStep = new PMUI.ui.TextLabel({
            id: "titleGridStep",
            textMode: 'plain',
            text: 'ASSIGNED DYNAFORMS'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });

        panelLabelStep = new PMUI.core.Panel({
            id: 'panelLabelStep',
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            fieldset: true,
            items: [
                titleTreeStep,
                titleGridStep
            ],
            layout: "hbox"
        });

        panelTree = new PMUI.core.Panel({
            proportion: 0.3,
            items: [
                titleTreeStep,
                treePanelSteps
            ],
            layout: "vbox",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            }
        });

        panelGrid = new PMUI.core.Panel({
            proportion: 0.7,
            height: "100%",
            items: [
                titleGridStep,
                gridPanelSteps
            ],
            layout: "vbox",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-smooth'
                ]
            }
        });

        panelSteps = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH,
            height: "100%",
            items: [
                panelTree,
                panelGrid
            ],
            layout: "hbox"
        });

        tabPanelSteps = new PMUI.panel.TabPanel({
            id: 'tabPanelSteps',
            width: DEFAULT_WINDOW_WIDTH,
            height: DEFAULT_WINDOW_HEIGHT,
            items: [
                {
                    id: 'tabDynaforms',
                    title: 'Dynaforms'.translate(),
                    panel: panelSteps
                },
                {
                    id: 'tabInputDocuments',
                    title: 'Input Documents'.translate(),
                    panel: panelSteps
                }
            ],
            onTabClick: function (item) {
                if (item.id == 'tabDynaforms') {
                    baseEndPoint = 'dynaforms';
                    getValuesSupervisorSteps(baseEndPoint);
                    titleTreeStep.setText('AVAILABLE DYNAFORMS'.translate());
                    titleGridStep.setText('ASSIGNED DYNAFORMS'.translate());
                }
                if (item.id == 'tabInputDocuments') {
                    baseEndPoint = 'input-documents';
                    getValuesSupervisorSteps(baseEndPoint);
                    titleTreeStep.setText('AVAILABLE INPUT DOCUMENT'.translate());
                    titleGridStep.setText('ASSIGNED INPUT DOCUMENT'.translate());
                }
            }
        });

        windowSupervisorsSteps = new PMUI.ui.Window({
            id: 'windowSupervisorsSteps',
            title: "Supervisor Steps".translate(),
            width: DEFAULT_WINDOW_WIDTH,
            height: DEFAULT_WINDOW_HEIGHT,
            footerHeight: 'auto',
            bodyHeight: 'auto',
            modal: true,
            buttonsPosition: 'center',
            spaceButtons: 30
        });

        dataTree = [];
        baseEndPoint = 'dynaforms';
        getValuesSupervisorSteps(baseEndPoint);
        windowSupervisorsSteps.addItem(tabPanelSteps);
        windowSupervisorsSteps.open();
        windowSupervisorsSteps.body.style.overflow = "hidden";
        gridPanelSteps.hideHeaders();
        applyStyleTreePanel(treePanelSteps, false);
    };
}());
(
    function(){
        PMDesigner.propertiesProcess = function () {
            var responseProperties = null;

            getValuesProperties = function () {
                restClient = new PMRestClient({
                    typeRequest : 'post',
                    multipart: true,
                    data : {
                        "calls": [
                            {
                                "url" : "project/" + PMDesigner.project.id + "/dynaforms",
                                "method" : 'GET'
                            },
                            {
                                "url" : "calendars",
                                "method" : 'GET'
                            },
                            {
                                "url" : "project/categories",
                                "method" : 'GET'
                            },
                            {
                                "url" : "project/" + PMDesigner.project.id + "/file-manager?path=templates",
                                "method" : 'GET'
                            },
                            {
                                "url" : "project/" + PMDesigner.project.id + "/triggers",
                                "method" : 'GET'
                            },
                            {
                                "url" : "project/" + PMDesigner.project.id + "/process",
                                "method" : 'GET'
                            }
                        ]
                    },
                    functionSuccess : function (xhr, response) {
                        loadDynaforms(response[0].response);
                        loadCalendar(response[1].response);
                        loadCategory(response[2].response);
                        loadTemplate(response[3].response);
                        loadTriggers(response[4].response);
                        loadProperties(response[5].response);
                    }
                });
                restClient.setBaseEndPoint('');
                restClient.executeRestClient();
            };

            saveProperties = function (data) {
                restClient = new PMRestClient({
                    typeRequest : 'update',
                    data : data,
                    messageSuccess : "Properties saved successfully".translate()
                });
                restClient.setEndpoint("process");
                restClient.executeRestClient();
            }

            propertiesWindow = new PMUI.ui.Window({
                id:"propertiesProcessWindow",
                title: "Edit process".translate(),
                width: DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT,
                footerHeight: 'auto',
                bodyHeight: "auto",
                modal:true,
                buttonPanelPosition: "top",
                buttons: [
                    {
                        id:'outputWindowDocButtonSave',
                        text: "Save".translate(),
                        buttonType:"success",
                        handler: function() {
                            if (!formEditProcess.isValid()) {
                                return;
                            }
                            var dataForm = formEditProcess.getData();
                            dataForm.pro_debug = checkDebug.controls[0].selected?1:0;
                            dataForm.pro_show_message = checkHideCase.controls[0].selected?1:0;
                            dataForm.pro_subprocess =checkSubProcess.controls[0].selected?1:0;
                            functionAssignmentUsers = function (xhr, response) {
                            };
                            saveProperties(dataForm);
                            propertiesWindow.close();
                            PMDesigner.project.setProjectName(dataForm.pro_title);
                            PMDesigner.project.setDescription(dataForm.pro_description);
                            PMDesigner.project.dirty = true;
                         }
                    },
                    {
                        pmType: 'label',
                        text: "or".translate(),
                        style : {
                            cssProperties :{
                                'fontSize': '14px'
                            }
                        }
                    },
                    {
                        id:'outputWindowDocButtonCancel',
                        text: "Cancel".translate(),
                        buttonType:"link",
                        handler: function() {
                            if (formEditProcess.isDirty()){
                                var message_window = new PMUI.ui.MessageWindow({
                                    id: "cancelMessageTriggers",
                                    windowMessageType: 'warning',
                                    width: 490,
                                    title: 'Confirm'.translate(),
                                    message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                                    footerItems: [
                                        {
                                            text: "Yes".translate(),
                                            height: 40, 
                                            handler: function() {
                                                message_window.close();
                                                propertiesWindow.close();
                                            }
                                        },
                                        {
                                            pmType: 'label',
                                            text: "or".translate()
                                        },
                                        {
                                            text: "No".translate(),
                                            buttonType: 'link',
                                            height: 40,
                                            handler: function() {
                                                message_window.close();
                                            }
                                        }
                                    ]
                                });
                                message_window.open();
                                message_window.showFooter();
                            } else {
                                propertiesWindow.close();
                            }
                        }
                    }
                ]
            });

            textTitle = new PMUI.field.TextField({
                label: "Title".translate(),
                id:'textTitle',
                name: 'pro_title',
                placeholder: 'a text here'.translate(),
                controlsWidth:"300px",
                required: true
            });

            textDescription = new PMUI.field.TextAreaField({
                id:'textDescription',
                name: 'pro_description',
                label: "Description".translate(),
                controlsWidth:"500px",           
                rows: 150,
                style: {cssClasses: ['mafe-textarea-resize']}
            });

            dropCalendar = new PMUI.field.DropDownListField({
                id: "dropCalendar",
                name: "pro_calendar",
                label: "Calendar".translate(),
                controlsWidth:"300px",
                valueType: 'string',
                onChange: function (newValue, prevValue){
                }
            });

            dropProcessCat = new PMUI.field.DropDownListField({
                id: "dropProcessCat",
                name: "pro_category",
                controlsWidth:"300px",
                label: "Process Category".translate(),
                valueType: 'string',
                onChange: function (newValue, prevValue){
                }
            });

            dropDynaform = new PMUI.field.DropDownListField({
                id: "dropDynaform",
                name: "pro_summary_dynaform",
                controlsWidth:"300px",
                label: "Dynaform to show a case summary".translate(),
                valueType: 'string',
                onChange: function (newValue, prevValue){
                }
            });

            dropRouting = new PMUI.field.DropDownListField({
                id: "dropRouting",
                name: "pro_derivation_screen_tpl",
                controlsWidth:"300px",
                label: "Routing Screen Template".translate(),
                valueType: 'string',
                onChange: function (newValue, prevValue){
                }
            });

            checkDebug = new PMUI.field.CheckBoxGroupField({
                id : 'checkDebug',
                label: "Debug".translate(),
                name:"pro_debug",
                value: '1',
                controlPositioning: 'vertical',
                options : [
                    {
                       id: 'pro_debug',
                       disabled: false,
                       value: '1',
                       selected :false
                    }
                ],
                 onChange: function(newVal, oldVal) {
                }
            });

            checkHideCase = new PMUI.field.CheckBoxGroupField({
                id : 'checkHideCase',
                label: "Hide the case number and the case title in the steps".translate(),
                value: '1',
                name:"pro_show_message",
                controlPositioning: 'vertical',
                options : [
                    {
                       disabled: false,
                       value: '1',
                       selected :false
                    }
                ],
                 onChange: function(newVal, oldVal) {
                }
            });

            checkSubProcess = new PMUI.field.CheckBoxGroupField({
                id :'checkSubProcess',
                label: "This a sub process".translate(),
                value: '1',
                name:"pro_subprocess",
                controlPositioning: 'vertical',
                options : [
                    {
                       disabled: false,
                       value: '1',
                       selected :false
                    }
                ],
                 onChange: function(newVal, oldVal) {
                }
            });

            dropCaseDeleted = new PMUI.field.DropDownListField({
                id: "dropCaseDeleted",
                name: "pro_tri_deleted",
                label: "Execute a trigger when a case is deleted".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            dropCaseCancelled = new PMUI.field.DropDownListField({
                id: "dropCaseCancelled",
                name: "pro_tri_canceled",
                label: "Execute a trigger when a case is cancelled".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            dropCasePaused = new PMUI.field.DropDownListField({
                id: "dropCasePaused",
                name: "pro_tri_paused",
                label: "Execute a trigger when a case is paused".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            dropCaseReassigned = new PMUI.field.DropDownListField({
                id: "dropCaseReassigned",
                name: "pro_tri_reassigned",
                label: "Execute a trigger when a case is reassigned".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            formEditProcess = new PMUI.form.Form({
                id:'formEditProcess',
                fieldset: true,
                title: "Process Information".translate(),
                width: DEFAULT_WINDOW_WIDTH - DEFAULT_WINDOW_WIDTH*0.10,
                items: [
                    textTitle,
                    textDescription,
                    dropCalendar,
                    dropProcessCat,
                    dropDynaform,
                    dropRouting,
                    checkDebug,
                    checkHideCase,
                    checkSubProcess,
                    dropCaseDeleted,
                    dropCaseCancelled,
                    dropCasePaused,
                    dropCaseReassigned
                ]
            });

                        //Load Dynaforms
            loadDynaforms = function (response) {
                dropDynaform.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++) {
                    dropDynaform.addOption({
                        label: response[i].dyn_title,
                        value: response[i].dyn_uid,
                        select: false
                    });
                }
            };

            //Load calendar
            loadCalendar = function (response) {
                dropCalendar.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++){
                    dropCalendar.addOption({
                        label: response[i].cal_name,
                        value: response[i].cal_uid,
                        select: false
                    });
                }
            };

            //Load category
            loadCategory = function (response) {
                dropProcessCat.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++){
                    dropProcessCat.addOption({
                        label: response[i].cat_name,
                        value: response[i].cat_uid,
                        select: false
                    });
                }
            };

            //Load Templates
            loadTemplate = function (response) {
                dropRouting.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++){
                    if(response[i].prf_filename != "alert_message.html") {
                        dropRouting.addOption({
                            label: response[i].prf_filename,
                            value: response[i].prf_filename,
                            select: false
                        });
                    }
                }
            };

            //Load triggers
            loadTriggers = function (response) {
                dropCaseDeleted.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                dropCaseCancelled.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                dropCasePaused.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                dropCaseReassigned.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++){
                    dropCaseDeleted.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });
                    dropCaseCancelled.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });
                    dropCasePaused.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });
                    dropCaseReassigned.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });
                }
            };

            // Load properties of process
            loadProperties = function (response) {
            	propertiesWindow.addItem(formEditProcess);
                propertiesWindow.open();
                formEditProcess.reset();
                responseProperties = response;
                textTitle.setValue(response.pro_title);
                textDescription.setValue(response.pro_description);
                dropDynaform.setValue(response.pro_summary_dynaform);
                dropCaseCancelled.setValue(response.pro_tri_canceled);
                dropCaseDeleted.setValue(response.pro_tri_deleted);
                dropCasePaused.setValue(response.pro_tri_paused);
                dropCaseReassigned.setValue(response.pro_tri_reassigned);
                dropRouting.setValue(response.pro_derivation_screen_tpl);
                dropCalendar.setValue(response.pro_calendar);
                dropProcessCat.setValue(response.pro_category);
                checkHideCase.setHeight(57)
                if(response.pro_debug == 1) {
                    checkDebug.getControls()[0].select();
                }
                if(response.pro_show_message == 1) {
                    checkHideCase.getControls()[0].select();
                }
                if(response.pro_subprocess == 1) {
                    checkSubProcess.getControls()[0].select();
                }
            };

            getValuesProperties();
            
            propertiesWindow.showFooter();
            propertiesWindow.defineEvents();
            applyStyleWindowForm(propertiesWindow);
            formEditProcess.getField('pro_title').setFocus();
        };

    }()
);

(function () {
    PMDesigner.caseTracker = function () {
        var caseTrackerForm,
                caseTrackerWindow,
                dataCaseTracker,
                dataTree;

        disableAllItems = function () {
            caseTrackerWindow.getItems()[0].setVisible(false);
            caseTrackerWindow.getItems()[1].setVisible(false);
            btnSaveCaseTracker.setVisible(false);
            btnCloseCaseTracker.setVisible(false);
        };

        orderDataTree = function (data) {
            var items = [];
            var type = ['DYNAFORM', 'INPUT_DOCUMENT', 'OUTPUT_DOCUMENT', 'EXTERNAL_STEP'];
            var label = ['Dynaform', 'Input Document', 'OutPut Document', 'External Step'];
            for (var i = 0; i < type.length; i++) {
                items = [];
                for (var j = 0; j < data.length; j++) {
                    if (type[i] === data[j].obj_type) {
                        items.push({
                            step_type_obj: label[i].translate(),
                            obj_label: label[i].translate(),
                            obj_title: data[j]['obj_title'],
                            obj_type: data[j]['obj_type'],
                            obj_uid: data[j]['obj_uid']
                        });
                    }
                }
                if (items.length === 0) {
                    dataTree.push({
                        obj_title: label[i].translate(),
                        items: [{obj_title: 'N/A'.translate(), obj_uid: ''}]
                    });
                } else {
                    dataTree.push({
                        obj_title: label[i].translate(),
                        items: items
                    });
                }
            }
        };

        //Properties
        loadPropertiesCaseTracker = function () {
            dataCaseTracker = [];
            restClient = new PMRestClient({
                endpoint: 'case-tracker/property',
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    dataCaseTracker = response;
                }
            });
            restClient.executeRestClient();
        };

        updateCaseTracker = function (data) {
            data ['routing_history'] = data ['routing_history'] == '["1"]' ? 1 : 0;
            data ['message_history'] = data ['message_history'] == '["1"]' ? 1 : 0;
            restClient = new PMRestClient({
                endpoint: 'case-tracker/property',
                typeRequest: 'update',
                data: data,
                functionSuccess: function (xhr, response) {
                    caseTrackerWindow.close();
                },
                messageError: "There are problems updating the Case Tracker, please try again.".translate(),
                messageSuccess: 'Case Tracker updated successfully'.translate(),
                flashContainer: document.body
            });
            restClient.executeRestClient();
        };

        caseTrackerForm = new PMUI.form.Form({
            id: 'caseTrackerForm',
            fieldset: true,
            title: "",
            width: DEFAULT_WINDOW_WIDTH - 70,
            items: [
                {
                    id: 'map_type',
                    pmType: "dropdown",
                    name: 'map_type',
                    label: "Map Type".translate(),
                    require: true,
                    controlsWidth: 300,
                    options: [
                        {
                            label: "NONE".translate(),
                            selected: true,
                            value: "NONE"
                        },
                        {
                            label: "PROCESSMAP".translate(),
                            value: "PROCESSMAP"
                        }
                    ]
                },
                {
                    id: 'routing_history',
                    pmType: 'checkbox',
                    labelVisible: false,
                    options: [
                        {
                            label: 'Routing History'.translate(),
                            value: '1'
                        }
                    ]
                },
                {
                    id: 'message_history',
                    pmType: 'checkbox',
                    labelVisible: false,
                    options: [
                        {
                            id: 'message_history',
                            label: 'Messages History'.translate(),
                            value: '1'
                        }
                    ]
                }
            ]
        });

        btnCloseCaseTracker = new PMUI.ui.Button({
            id: 'btnCloseCaseTracker',
            text: 'Cancel'.translate(),
            buttonType: "link",
            height: 31,
            handler: function () {
                if (caseTrackerForm.isDirty()) {
                    var message_window = new PMUI.ui.MessageWindow({
                        id: "cancelMessageTriggers",
                        windowMessageType: 'warning',
                        width: 490,
                        title: 'Confirm'.translate(),
                        message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                        footerItems: [
                            {
                                text: "Yes".translate(),
                                height: 40,
                                handler: function () {
                                    message_window.close();
                                    caseTrackerWindow.close();
                                }
                            },
                            {
                                pmType: 'label',
                                text: "or".translate()
                            },
                            {
                                text: "No".translate(),
                                height: 40,
                                buttonType: 'link',
                                handler: function () {
                                    message_window.close();
                                }
                            }
                        ]
                    });
                    message_window.open();
                    message_window.showFooter();
                } else {
                    caseTrackerWindow.close();
                }
            }
        });

        btnSaveCaseTracker = new PMUI.ui.Button({
            id: 'btnSaveCaseTracker',
            text: "Save".translate(),
            buttonType: "success",
            height: 31,
            handler: function () {
                if (caseTrackerForm.isValid( )) {
                    data = caseTrackerForm.getData();
                    updateCaseTracker(data);
                }
            }
        });

        //objects
        loadGridCaseTacker = function (data) {
            for (var i = 0; i < data.length; i++) {
                switch (data[i]['cto_type_obj']) {
                    case 'DYNAFORM':
                        label = 'Dynaform'.translate();
                        break;
                    case 'INPUT_DOCUMENT':
                        label = 'Input Document'.translate();
                        break;
                    case 'OUTPUT_DOCUMENT':
                        label = 'OutPut Document'.translate();
                        break;
                    case 'EXTERNAL_STEP':
                        label = 'External Step'.translate();
                        break;
                    default:
                        label = data[i]['tri_type'];
                        break;
                }
                data[i]['obj_label'] = label;
            }
            gridPanelObjects.setDataItems(data);
        };

        getValuesCaseTrackerObjects = function () {
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    "calls": [
                        {
                            "url": "case-tracker/available-objects",
                            "method": 'GET'
                        },
                        {
                            "url": "case-tracker/objects",
                            "method": 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    dataTree = [];
                    orderDataTree(response[0].response);
                    treePanelObjects.setDataItems(dataTree);
                    loadGridCaseTacker(response[1].response);
                }
            });
            restClient.executeRestClient();
        };
        saveItem = function () {
            data = {
                "cto_type_obj": rowStep.obj_type,
                "cto_uid_obj": rowStep.obj_uid,
                "cto_condition": '',
                "cto_position": rowStep.cto_position
            };
            restClient = new PMRestClient({
                endpoint: 'case-tracker/object',
                typeRequest: 'post',
                data: data,
                functionSuccess: function (xhr, response) {
                    data = response;
                },
                messageError: "There are problems saved, please try again.".translate()
            });
            restClient.executeRestClient();
            return data;
        };

        updateItem = function () {
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    "calls": [
                        {
                            "url": 'case-tracker/object/' + rowStep.cto_uid,
                            "method": 'PUT',
                            "data": rowStep
                        },
                        {
                            "url": "case-tracker/objects",
                            "method": 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    loadGridCaseTacker(response[1].response);
                }
            });
            restClient.executeRestClient();
        };

        deleteItem = function () {
            confirmWindow = new PMUI.ui.MessageWindow({
                id: "outputMessageWindowWarning",
                windowMessageType: 'error',
                width: 490,
                title: '',
                message: "Do you want to remove".translate() + " '" + rowStep.obj_title + "' ?",
                footerItems: [
                    {
                        id: 'confirmWindowButtonYes',
                        text: "Remove".translate(),
                        height: 40,
                        handler: function () {
                            confirmWindow.close();
                            restClient = new PMRestClient({
                                typeRequest: 'post',
                                multipart: true,
                                data: {
                                    "calls": [
                                        {
                                            "url": 'case-tracker/object/' + rowStep.cto_uid,
                                            "method": 'DELETE'
                                        },
                                        {
                                            "url": "case-tracker/available-objects",
                                            "method": 'GET'
                                        },
                                        {
                                            "url": "case-tracker/objects",
                                            "method": 'GET'
                                        }
                                    ]
                                },
                                functionSuccess: function (xhr, response) {
                                    dataTree = [];
                                    orderDataTree(response[1].response);
                                    treePanelObjects.setDataItems(dataTree);
                                    loadGridCaseTacker(response[2].response);
                                    applyStyleTreePanel(treePanelObjects);
                                },
                                messageSuccess: ['Object Case Tracker removed successfully'.translate(), null, null],
                                flashContainer: panelObjects
                            });
                            restClient.executeRestClient();
                        }
                    }, {
                        id: 'confirmWindowButtonNo',
                        text: "Cancel".translate(),
                        height: 40,
                        buttonType: 'link',
                        handler: function () {
                            confirmWindow.close();
                        }
                    }
                ]
            });
            confirmWindow.open();
            confirmWindow.showFooter();
        };

        treePanelObjects = new PMUI.panel.TreePanel({
            id: 'treePanelObjects',
            proportion: 0.5,
            filterable: true,
            filterPlaceholder: 'Text to Search'.translate(),
            emptyMessage: 'No records found'.translate(),
            style: {cssClasses: ['itemsSteps']},
            nodeDefaultSettings: {
                behavior: "drag",
                labelDataBind: 'obj_title',
                itemsDataBind: 'items',
                collapsed: false,
                childrenDefaultSettings: {
                    labelDataBind: 'obj_title',
                    autoBind: true
                },
                autoBind: true
            }
        });

        editCondition = function () {
            var conditionform,
                    conditionWindows,
                    visible;

            conditionform = new PMUI.form.Form({
                id: 'conditionform',
                title: "",
                fieldset: true,
                visibleHeader: false,
                width: 500,
                items: [
                    new CriteriaField({
                        id: 'cto_condition',
                        pmType: 'textarea',
                        name: 'cto_condition',
                        valueType: 'string',
                        label: 'Condition'.translate(),
                        placeholder: 'Insert a condition'.translate(),
                        rows: 200,
                        width: 250,
                        controlsWidth: 285,
                        renderType: 'textarea'
                    })
                ]
            });

            if (rowStep != '' && rowStep != undefined) {
                var dataEdit = conditionform.getFields( );
                dataEdit[0].setValue(rowStep['cto_condition']);
            }

            conditionWindows = new PMUI.ui.Window({
                id: 'conditionWindows',
                title: 'Condition'.translate(),
                width: 500,
                height: 'auto',
                footerHeight: 'auto',
                bodyHeight: 'auto',
                modal: true,
                buttonPanelPosition: 'top',
                buttons: [
                    {
                        id: 'conditionObjectWindowButtonSave',
                        text: "Save".translate(),
                        height: 31,
                        handler: function () {
                            if (conditionform.isValid( )) {
                                item = conditionform.getData();
                                rowStep['cto_condition'] = item['cto_condition'];
                                updateItem();
                                conditionWindows.close();
                            }
                        },
                        buttonType: 'success'
                    },
                    {
                        pmType: 'label',
                        text: "or".translate(),
                        style: {
                            cssProperties:
                                    {
                                        'fontSize': '14px'
                                    }
                        }
                    },
                    {
                        id: 'conditionObjectWindowButtonClose',
                        text: "Close".translate(),
                        handler: function () {
                            conditionWindows.close();
                        },
                        buttonType: 'link',
                        heigth: 31
                    }
                ]
            });
            conditionWindows.addItem(conditionform);
            conditionWindows.open();
            conditionWindows.showFooter();
            applyStyleWindowForm(conditionWindows);
            conditionWindows.defineEvents();
            conditionWindows.footer.html.style.textAlign = 'right';
            conditionform.setFocus();
            style = $('#cto_condition .pmui-field-label').attr("style");
            style = style + ' float: left;';
            $('#cto_condition .pmui-field-label').attr("style", style);
        };

        gridPanelObjects = new PMUI.grid.GridPanel({
            id: 'gridPanelObjects',
            proportion: 1.5,
            visibleFooter: false,
            filterable: false,
            width: '640px',
            style: {cssClasses: ['itemsSteps']},
            filterPlaceholder: 'Text to Search'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            behavior: 'dragdropsort',
            columns: [
                {
                    title: 'Title'.translate(),
                    dataType: 'string',
                    width: 405,
                    alignment: "left",
                    columnData: "obj_title",
                    sortable: false,
                    alignmentCell: 'left'
                },
                {
                    title: 'Type'.translate(),
                    dataType: 'string',
                    width: 155,
                    alignment: "left",
                    columnData: "obj_label",
                    sortable: false,
                    alignmentCell: 'left'
                },
                {
                    id: 'gridPanelObjectsButtonProperties',
                    title: '',
                    dataType: 'button',
                    width: 36,
                    buttonLabel: "",
                    iconPosition: "center",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-img-properties'
                        ]
                    },
                    buttonTooltip: 'Edit Properties',
                    onButtonClick: function (row, grid) {
                        rowStep = row.getData();
                        editCondition();
                    }
                },
                {
                    id: 'gridPanelObjectsButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: 36,
                    buttonLabel: "",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-img-delete'
                        ]
                    },
                    buttonTooltip: 'Remove Object'.translate(),
                    onButtonClick: function (row, grid) {
                        rowStep = row.getData();
                        deleteItem();
                    }
                }
            ],
            onDrop: function (grid, item, index) {
                if (item.data.customKeys.obj_uid === '') {
                    return false;
                }
                rowStep = item.getData();
                rowStep.cto_position = index + 1;
                data = saveItem();
                $.each(data, function (index, value) {
                    rowStep[index] = value;
                });
                item.setData(rowStep);
                //reload tree
                restClient = new PMRestClient({
                    typeRequest: 'post',
                    multipart: true,
                    data: {
                        "calls": [{
                                "url": "case-tracker/available-objects",
                                "method": 'GET'
                            }
                        ]
                    },
                    functionSuccess: function (xhr, response) {
                        dataTree = [];
                        orderDataTree(response[0].response);
                        treePanelObjects.setDataItems(dataTree);
                        applyStyleTreePanel(treePanelObjects);
                    }
                });
                restClient.executeRestClient();
            },
            onSort: function (grid, item, index) {
                rowStep = item.getData();
                rowStep.cto_position = index + 1;
                updateItem();
            }
        });

        titleTreeObjects = new PMUI.ui.TextLabel({
            id: "titleTreeObjects",
            textMode: 'plain',
            text: 'Available Objects'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-steps-tree'
                ]
            }
        });

        titleGridObjects = new PMUI.ui.TextLabel({
            id: "titleGridObjects",
            textMode: 'plain',
            text: 'Assigned objects'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-stesp-grid'
                ]
            }
        });

        panelLabelObjects = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            fieldset: true,
            items: [
                titleTreeObjects,
                titleGridObjects
            ],
            style: {
                cssProperties: {
                    'margin-bottom': 4,
                    'margin-top': 4,
                    'margin-left': 4
                }
            },
            layout: "hbox"
        });

        panelContainerObjects = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            height: 320,
            fieldset: true,
            items: [
                treePanelObjects,
                gridPanelObjects
            ],
            layout: "hbox"
        });

        panelObjects = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            height: DEFAULT_WINDOW_HEIGHT * 0.70,
            fieldset: true,
            items: [
                panelLabelObjects,
                panelContainerObjects
            ],
            layout: "vbox"
        });

        caseTrackerWindow = new PMUI.ui.Window({
            id: 'caseTrackerWindow',
            title: "Case Tracker".translate(),
            width: DEFAULT_WINDOW_WIDTH,
            height: DEFAULT_WINDOW_HEIGHT,
            footerHeight: 'auto',
            bodyHeight: 'auto',
            modal: true,
            buttonPanelPosition: "top",
            visibleFooter: false,
            buttons: [
                btnSaveCaseTracker,
                {
                    pmType: 'label',
                    text: "or".translate(),
                    style: {
                        cssProperties: {
                            'fontSize': '14px'
                        }
                    }
                },
                btnCloseCaseTracker
            ],
            spaceButtons: 30
        });

        caseTrackerWindow.addItem(caseTrackerForm);
        caseTrackerWindow.addItem(panelObjects);
        caseTrackerWindow.open();
        caseTrackerWindow.showFooter();
        applyStyleWindowForm(caseTrackerWindow);
        caseTrackerWindow.defineEvents();
        caseTrackerWindow.footer.html.style.textAlign = 'right';
        caseTrackerForm.setFocus();

        showProperties = function () {
            disableAllItems();
            loadPropertiesCaseTracker();
            caseTrackerWindow.getItems()[0].setVisible(true);
            btnSaveCaseTracker.setVisible(true);
            btnCloseCaseTracker.setVisible(true);
            caseTrackerWindow.setTitle("Case Tracker Properties".translate());

            if (dataCaseTracker != '') {
                var dataEdit = caseTrackerForm.getFields( );
                dataEdit[0].setValue(dataCaseTracker['map_type']);
                dataEdit[1].setValue((dataCaseTracker['routing_history'] == 1) ? '["1"]' : '[]');
                dataEdit[2].setValue((dataCaseTracker['message_history'] == 1) ? '["1"]' : '[]');
            }
        };

        showObjects = function () {
            disableAllItems();
            caseTrackerWindow.hideFooter();
            getValuesCaseTrackerObjects();
            caseTrackerWindow.getItems()[1].setVisible(true);
            caseTrackerWindow.setTitle("Case Tracker Objects".translate());

            caseTrackerWindow.body.style.overflow = 'initial';

            gridPanelObjects.style.addProperties({overflow: 'auto'});
            gridPanelObjects.style.addProperties({float: 'right'});
            gridPanelObjects.setWidth(640);
            gridPanelObjects.setHeight(424);

            treePanelObjects.style.addProperties({float: 'left'});
            treePanelObjects.style.addProperties({overflow: 'auto'});
            treePanelObjects.setWidth(200);
            treePanelObjects.setHeight(445);
            applyStyleTreePanel(treePanelObjects);

            panelLabelObjects.setHeight(15);
            caseTrackerWindow.defineEvents();

            caseTrackerWindow.body.style.background = '#eee';
            caseTrackerWindow.setBodyPadding(5);

            panelObjects.style.addProperties({marginLeft: '15px'});
        };

    };

    PMDesigner.caseTracker.showProperties = function () {
        PMDesigner.caseTracker();
        showProperties();
    };

    PMDesigner.caseTracker.showObjects = function () {
        PMDesigner.caseTracker();
        showObjects();
    };

}());
PMDesigner.RoutingRule = function (shape) {
    var formRoutingRule,
            formPanelSelected,
            arrayShapeIdRemoved = [],
            buttonAdd,
            windowConnections,
            warningMessageWindowDelete,
            containerLabels,
            deleteButton,
            buttonSave,
            buttonCancel,
            labelNextTask,
            labelCondition;

    var warningMessageWindowDelete = new PMUI.ui.MessageWindow({
        id: 'warningMessageWindowDelete',
        windowMessageType: 'error',
        width: 490,
        bodyHeight: 'auto',
        message: 'Do you want to delete this routing rule?'.translate(),
        footerItems: [{
                id: 'warningMessageWindowDeleteButtonYes',
                text: 'Yes'.translate(),
                height: 40,
                visible: true,
                handler: function () {
                    deleteRow();
                    warningMessageWindowDelete.close();
                }
            }, {
                pmType: 'label',
                text: 'or'
            }, {
                id: 'warningMessageWindowDeleteButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDelete.close();
                },
                buttonType: 'link'
            }
        ]
    });
    var warningMessageWindowDirty = new PMUI.ui.MessageWindow({
        id: 'warningMessageWindowDirty',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title: 'Warning'.translate(),
        message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
        footerItems: [{
                id: 'warningMessageWindowDirtyButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDirty.close();
                    windowConnections.close();
                },
                height: 40
            }, {
                pmType: 'label',
                text: 'or'
            }, {
                id: 'warningMessageWindowDirtyButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDirty.close();
                },
                buttonType: 'link'
            }
        ]
    });

    buttonAdd = new PMUI.ui.Button({
        id: 'routingRuleButtonAdd',
        text: 'Add Routing Rule'.translate(),
        style: {
            cssProperties: {
                marginLeft: '50px',
                marginTop: '10px',
                marginBottom: '10px',
                fontSize: '16px'
            }
        },
        buttonType: 'success',
        height: 31,
        handler: function () {
            var item, btnDel;
            if (countActivities() > 0) {
                item = addRow();
                item.getItems()[2].style.addProperties({display: 'none'});
                item.getItems()[2].controls[0].button.setButtonType('error');
                formRoutingRule.addItem(item);
                for (var i = 0; i < formRoutingRule.getItems().length; i++) {
                    formRoutingRule.getItems()[i].style.addProperties({'padding': 'initial'});
                }
                item.getItems()[0].dom.labelTextContainer.style.display = 'none';
                item.getItems()[1].dom.labelTextContainer.style.display = 'none';

            } else {
                PMDesigner.msgFlash('There are no items.'.translate(), windowConnections.footer);
            }
        }
    });
    buttonSave = new PMUI.ui.Button({
        id: 'windowConnectionsButtonSave',
        text: 'Apply'.translate(),
        handler: function () {
            removeConnectionsIntoCanvas();
            saveConnections();
        },
        buttonType: 'success',
        height: 31
    });
    buttonCancel = new PMUI.ui.Button({
        id: 'windowConnectionsButtonCancel',
        text: 'Cancel'.translate(),
        buttonType: 'link',
        handler: function () {
            if (formRoutingRule.isDirty()) {
                warningMessageWindowDirty.open();
                warningMessageWindowDirty.showFooter();
            } else {
                windowConnections.close();
            }
        }
    });

    labelNextTask = new PMUI.ui.TextLabel({
        text: 'Next Task'.translate(),
        style: {
            cssProperties: {
                'font-weight': 'bold'
            }
        }
    });
    labelNextTask.setWidth(382);
    labelNextTask.style.addProperties({padding: '5px 0px 0px 50px'});

    labelCondition = new PMUI.ui.TextLabel({
        text: 'Condition'.translate(),
        style: {
            cssProperties: {
                'font-weight': 'bold'
            }
        }
    });
    labelCondition.setWidth(410);
    labelCondition.style.addProperties({padding: '5px 0px 0px 5px'});

    containerLabels = new PMUI.core.Panel({
        layout: 'hbox',
        width: 'auto',
        height: 29,
        style: {
            cssProperties: {
                'border-bottom': '1px solid #c0c0c0'
            }
        }
    });
    containerLabels.addItem(labelNextTask);
    containerLabels.addItem(labelCondition);
    containerLabels.style.addProperties({'border-bottom': '1px solid #e7e7e7'});

    formRoutingRule = new PMUI.form.Form({
        id: 'formRoutingRule',
        visibleHeader: false,
        width: DEFAULT_WINDOW_WIDTH - 60,
        height: 'auto',
        items: [],
        style: {
            cssProperties: {
                'margin-left': '35px'
            }
        }
    });
    formRoutingRule.hideFooter();

    windowConnections = new PMUI.ui.Window({
        id: 'windowConnections',
        title: 'Routing Rule'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        footerAlign: 'right',
        buttonPanelPosition: 'top',
        items: [
            buttonAdd
        ],
        buttons: [
            buttonSave,
            {
                pmType: 'label',
                text: 'or'.translate(),
                style: {
                    cssProperties: {
                        'fontSize': '14px'
                    }
                }
            },
            buttonCancel
        ]
    });
    windowConnections.setTitle('Routing Rule'.translate() + ' - ' + shape.gat_type);
    windowConnections.showFooter();
    windowConnections.addItem(containerLabels);
    windowConnections.addItem(formRoutingRule);
    windowConnections.open();

    loadConnections();

    function countActivities () {
        //Important! Any changes to synchronize the assessment of the condition 
        //of the functions: countActivities and loadActivities
        var n = 0;
        var dt = PMDesigner.project.getDirtyObject().diagrams[0].activities;
        for (var i = 0; i < dt.length; i++) {
            n = n + 1;
        }

        var dt = PMDesigner.project.getDirtyObject().diagrams[0].events;
        for (var i = 0; i < dt.length; i++) {
            if (dt[i].evn_type !== 'START') {
                n = n + 1;
            }
        }
        return n;
    }

    function addRow () {
        var dropDownControl, criteriaField, deleteButton, newRow;
        newRow = new PMUI.form.FormPanel({
            layout: 'hbox'
        });

        dropDownControl = new PMUI.field.DropDownListField({
            id: 'dropdownNextTask',
            name: 'act_name',
            valueType: 'string',
            label: 'Next Task'.translate(),
            labelPosition: 'top',
            labelVisible: false,
            value: '',
            readOnly: true,
            controlsWidth: 360,
            proportion: 0.9,
            style: {
                cssProperties: {
                    'vertical-align': 'top'
                }
            }
        });
        criteriaField = new CriteriaField({
            id: 'textCondition',
            pmType: 'text',
            renderType: 'textarea',
            name: 'flo_condition',
            valueType: 'string',
            label: 'Condition'.translate(),
            labelPosition: 'top',
            labelVisible: false,
            controlsWidth: 345,
            required: true,
            style: {
                cssProperties: {
                    'vertical-align': 'top'
                }
            }
        });
        deleteButton = new PMUI.field.ButtonField({
            id: 'buttonDelete',
            value: 'Delete'.translate(),
            handler: function (e, a) {
                formPanelSelected = this.getParent();
                warningMessageWindowDelete.open();
                warningMessageWindowDelete.dom.titleContainer.style.height = '17px';
                warningMessageWindowDelete.showFooter();
            },
            name: 'delete',
            labelVisible: false,
            buttonAling: 'left',
            controlsWidth: 60,
            proportion: 0.1,
            style: {
                cssProperties: {
                    'vertical-align': 'top'
                }
            }
        });

        newRow.addItem(dropDownControl);
        newRow.addItem(criteriaField);
        newRow.addItem(deleteButton);

        loadActivities(dropDownControl);

        return newRow;
    }

    function loadActivities (dropdown) {
        //Important! Any changes to synchronize the assessment of the condition 
        //of the functions: countActivities and loadActivities
        dropdown.clearOptions();
        dropdown.setUID = function (uid) {
            this.uid = uid;
        };
        dropdown.getUID = function () {
            return this.uid;
        };
        dropdown.addOptionGroup({
            label: 'Task'.translate(),
            selected: true,
            options: []
        });
        dropdown.addOptionGroup({
            label: 'Sub-process'.translate(),
            options: []
        });
        var dt = PMDesigner.project.getDirtyObject().diagrams[0].activities, nameGroup;
        dt = dt.sort(function (a, b) {
            return a.act_name.toString().toLowerCase() > b.act_name.toString().toLowerCase();
        });
        for (var i = 0; i < dt.length; i++) {
            nameGroup = dt[i].act_type === 'TASK' ? 'Task'.translate() : 'Sub-process'.translate();
            dropdown.addOption({
                value: dt[i].act_uid,
                label: dt[i].act_name
            }, nameGroup);
        }

        dropdown.addOptionGroup({
            label: 'End of process'.translate(),
            options: []
        });
        var dt = PMDesigner.project.getDirtyObject().diagrams[0].events;
        dt = dt.sort(function (a, b) {
            return a.evn_name.toString().toLowerCase() > b.evn_name.toString().toLowerCase();
        });
        for (var i = 0; i < dt.length; i++) {
            if (dt[i].evn_type !== 'START') {
                dropdown.addOption({
                    value: dt[i].evn_uid,
                    label: dt[i].evn_name
                }, 'End of process'.translate());
            }
        }
    }

    function removeConnectionsIntoCanvas () {
        var shapeDest, connection, dt;
        for (var j = 0; j < arrayShapeIdRemoved.length; j++) {
            shapeDest = getShapeForId(arrayShapeIdRemoved[j]);
            dt = shape.getPorts().asArray();
            for (var i = 0; i < dt.length; i++) {
                connection = dt[i].getConnection();
                if (shape.getID() === connection.getSrcPort().getParent().getID() &&
                        shapeDest.getID() === connection.getDestPort().getParent().getID()) {
                    PMUI.getActiveCanvas().emptyCurrentSelection();
                    PMUI.getActiveCanvas().setCurrentConnection(connection);
                    PMUI.getActiveCanvas().removeElements();
                    connection.saveAndDestroy();
                    PMUI.getActiveCanvas().removeConnection(connection);
                    break;
                }
            }
        }
        arrayShapeIdRemoved = [];
    }

    function editShapeDestConnection (shapeDest, oldShape) {
        var connection, canvas = PMUI.getActiveCanvas();
        connection = isConnection(shape, oldShape);
        oldShape.removePort(connection.destPort);
        shapeDest.addPort(connection.destPort, 100, 100,
                false, connection.srcPort);

        connection.canvas.commandStack.add(new PMUI.command.CommandConnect(connection));
        connection.connect();
        canvas.triggerPortChangeEvent(connection.destPort);
    }

    function createEndShape () {
        //referer /processmaker/vendor/colosa/pmUI/src/behavior/ContainerDrop.js
        //method ContainerDropBehavior.prototype.onDrop line 94-105.
        var customShape, canvas = PMUI.getActiveCanvas(), command;
        customShape = canvas.shapeFactory('END');

        var x = shape.getX() + shape.getWidth();
        var y = shape.getY() + shape.getHeight() + 20;

        canvas.addElement(customShape, x, y,
                customShape.topLeftOnCreation);

        //since it is a new element in the designer, we triggered the
        //custom on create element event
        canvas.updatedElement = customShape;

        // create the command for this new shape
        command = new PMUI.command.CommandCreate(customShape);
        canvas.commandStack.add(command);
        command.execute();
        return customShape;
    }

    function saveConnections () {
        if (!formRoutingRule.isValid()) {
            return;
        }
        var dt = formRoutingRule.getItems(), id, oldId, shapeDest, oldShapeDest, connection;
        for (var i = 0; i < dt.length; i++) {
            id = dt[i].getField('act_name').getValue();
            oldId = dt[i].getField('act_name').getUID();
            if (id !== '0') {
                if (oldId === undefined) {
                    shapeDest = getShapeForId(id);
                    createConnection(shape, shapeDest).setFlowCondition(dt[i].getField('flo_condition').getValue());
                }
                if (oldId !== undefined && id === oldId) {
                    shapeDest = getShapeForId(id);
                    connection = isConnection(shape, shapeDest);
                    connection.setFlowCondition(dt[i].getField('flo_condition').getValue());
                }
                if (oldId !== undefined && id !== oldId) {
                    shapeDest = getShapeForId(id);
                    oldShapeDest = getShapeForId(oldId);
                    connection = isConnection(shape, oldShapeDest);
                    connection.setFlowCondition(dt[i].getField('flo_condition').getValue());
                    editShapeDestConnection(shapeDest, oldShapeDest);
                }
            } else {
                var customShape = createEndShape();
                createConnection(shape, customShape);
            }
        }
        windowConnections.close();
        PMDesigner.msgFlash('Saved correctly'.translate(), document.body);
        PMDesigner.project.dirty = true;
    }

    function getShapeForId (id) {
        //var dt = PMDesigner.canvas.getChildren().asArray();
        var dt = PMUI.getActiveCanvas().getChildren().asArray();
        for (var i = 0; i < dt.length; i++) {
            if (dt[i].act_uid === id || dt[i].evn_uid === id) {
                return dt[i];
            }
        }
        return null;
    }

    function createConnection (sourceShape, shape) {
        //referer to /processmaker/vendor/colosa/MichelangeloFE/src/connectiondrop.js
        //method PMConnectionDropBehavior.prototype.onDrop
        var sourcePort, endPort, connection, canvas = PMUI.getActiveCanvas(), points;
        sourcePort = new PMUI.draw.Port({
            width: 10,
            height: 10
        });
        endPort = new PMUI.draw.Port({
            width: 10,
            height: 10
        });

        points = findBestPorts(sourceShape, shape);

        //sourceShape.addPort(sourcePort, 100, 100);
        sourceShape.addPort(sourcePort, points[0].x - sourceShape.getZoomX(), points[0].y - sourceShape.getZoomY());
        //shape.addPort(endPort, 100, 100, false, sourcePort);
        shape.addPort(endPort, points[1].x - shape.getZoomX(), points[1].y - shape.getZoomY(), false, sourcePort);

        //add ports to the canvas array for regularShapes
        //shape.canvas.regularShapes.insert(sourcePort).insert(endPort);
        //create the connection
        connection = new PMFlow({
            srcPort: sourcePort,
            destPort: endPort,
            segmentColor: new PMUI.util.Color(0, 0, 0),
            name: '',
            canvas: shape.canvas,
            segmentStyle: shape.connectionType.segmentStyle,
            flo_type: shape.connectionType.type
        });
        connection.setSrcDecorator(new PMUI.draw.ConnectionDecorator({
            width: 1,
            height: 1,
            canvas: canvas,
            decoratorPrefix: (typeof shape.connectionType.srcDecorator !== 'undefined'
                    && shape.connectionType.srcDecorator !== null) ?
                    shape.connectionType.srcDecorator : 'mafe-decorator',
            decoratorType: 'source',
            parent: connection
        }));
        connection.setDestDecorator(new PMUI.draw.ConnectionDecorator({
            width: 1,
            height: 1,
            canvas: canvas,
            decoratorPrefix: (typeof shape.connectionType.destDecorator !== 'undefined'
                    && shape.connectionType.destDecorator !== null) ?
                    shape.connectionType.destDecorator : 'mafe-decorator',
            decoratorType: 'target',
            style: {
                cssClasses: [
                    'mafe-connection-decoration-target'
                ]
            },
            parent: connection
        }));
        connection.canvas.commandStack.add(new PMUI.command.CommandConnect(connection));

        //connect the two ports
        connection.connect();
        connection.setSegmentMoveHandlers();

        //add the connection to the canvas, that means insert its html to
        // the DOM and adding it to the connections array
        canvas.addConnection(connection);

        // Filling PMFlow fields
        connection.setTargetShape(endPort.parent);
        connection.setOriginShape(sourcePort.parent);
        connection.savePoints();

        // now that the connection was drawn try to create the intersections
        connection.checkAndCreateIntersectionsWithAll();

        //attaching port listeners
        sourcePort.attachListeners(sourcePort);
        endPort.attachListeners(endPort);

        // finally trigger createEvent
        canvas.triggerCreateEvent(connection, []);
        return connection;
    }

    function findBestPorts (sourceShape, shape) {

        var result = [];
        distance = 99999999;
        midPoints = getMiddlePoints(sourceShape);
        midPoints2 = getMiddlePoints(shape);
        for (i = 0; i < midPoints.length; i += 1) {
            initPoint = midPoints[i];
            for (j = 0; j < midPoints2.length; j += 1) {
                secondPoint = midPoints2[j];
                if (distance > initPoint.getManhattanDistance(secondPoint)) {
                    distance = initPoint.getManhattanDistance(midPoints2[j]);
                    result[0] = (initPoint);
                    result[1] = (midPoints2[j]);
                }
            }
        }
        return result;
    }

    function getMiddlePoints (shape) {
        return [
            new PMUI.util.Point(Math.round(shape.zoomWidth / 2) + shape.getZoomX(), 0 + shape.getZoomY()), // TOP
            new PMUI.util.Point(shape.zoomWidth + shape.getZoomX(), Math.round(shape.zoomHeight / 2) + shape.getZoomY()), // RIGHT
            new PMUI.util.Point(Math.round(shape.zoomWidth / 2) + shape.getZoomX(), shape.zoomHeight + shape.getZoomY()), // BOTTOM
            new PMUI.util.Point(0 + shape.getZoomX(), Math.round(shape.zoomHeight / 2) + shape.getZoomY())               // LEFT
        ];
    }

    function loadConnections () {
        var row, connection, dt = shape.getPorts().asArray();
        for (var i = 0; i < dt.length; i++) {
            connection = dt[i].getConnection();
            //connectio.getSrcPort().getParent().getID() //get source id
            if (shape.getID() !== connection.getDestPort().getParent().getID()) {
                row = addRow();
                row.getField('act_name').setValue(connection.getDestPort().getParent().getID());
                row.getField('act_name').setUID(connection.getDestPort().getParent().getID());
                row.getField('flo_condition').setValue(connection.getFlowCondition());

                row.getItems()[2].style.addProperties({display: 'none'});
                row.getItems()[2].controls[0].button.setButtonType('error');
                formRoutingRule.addItem(row);
                for (var j = 0; j < formRoutingRule.getItems().length; j++) {
                    formRoutingRule.getItems()[j].style.addProperties({'padding': 'initial'});
                }
                row.getItems()[0].dom.labelTextContainer.style.display = 'none';
                row.getItems()[1].dom.labelTextContainer.style.display = 'none';
            }
        }
    }

    function isConnection (sourceShape, shape) {
        var connection;
        var dt = sourceShape.getPorts().asArray();
        for (var i = 0; i < dt.length; i++) {
            connection = dt[i].getConnection();
            if (sourceShape.getID() === connection.getSrcPort().getParent().getID() &&
                    shape.getID() === connection.getDestPort().getParent().getID()) {
                return connection;
            }
        }
        return false;
    }

    function deleteRow () {
        arrayShapeIdRemoved.push(formPanelSelected.getField('act_name').getValue());
        formRoutingRule.removeItem(formPanelSelected);
        PMDesigner.msgFlash('Routing rule removed correctly'.translate(), windowConnections.footer);
    }

};

PMDesigner.RoutingRuleDeleteAllFlow = function (shape) {
    var warningMessageWindowDelete = new PMUI.ui.MessageWindow({
        windowMessageType: 'error',
        width: 490,
        bodyHeight: 'auto',
        id: 'warningMessageWindowDelete',
        message: 'Do you want to delete all routing rules?'.translate(),
        footerItems: [{
                id: 'warningMessageWindowDeleteButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    deleteAllConnection();
                    warningMessageWindowDelete.close();
                },
                height: 40
            }, {
                pmType: 'label',
                text: 'or'
            }, {
                id: 'warningMessageWindowDeleteButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDelete.close();
                },
                buttonType: 'link'
            }
        ]
    });
    function deleteAllConnection () {
        PMUI.getActiveCanvas().emptyCurrentSelection();
        //IMPORTANT: You must empty elements in another array due to the array reference indices managed.
        //referer: PMDesigner.canvas.removeConnection & element.getPorts().asArray()
        var connection, elements = [];
        var ports = shape.getPorts().asArray();
        for (var i = 0; i < ports.length; i++) {
            elements.push(ports[i]);
        }
        var sw = false;
        for (var i = 0; i < elements.length; i++) {
            connection = elements[i].getConnection();
            if (shape.getID() !== connection.getDestPort().getParent().getID()) {
                PMUI.getActiveCanvas().setCurrentConnection(connection);
                PMUI.getActiveCanvas().removeElements();
                connection.saveAndDestroy();
                PMUI.getActiveCanvas().removeConnection(connection);
                sw = true;
            }
        }
        var msg = sw ? 'Routing rules deleted successfully' : 'There aren\'t routing rules';
        PMDesigner.msgFlash(msg.translate(), document.body);
    }
    warningMessageWindowDelete.open();
    warningMessageWindowDelete.showFooter();
    warningMessageWindowDelete.dom.titleContainer.style.height = '17px';
};

DynaformDesignerModule = function () {
    this.dirty = false;
    this.designer = null;
    this.dynaformData = null;
    this.srcPreview = 'http://' + document.location.host + '/lib/pmdynaform/build/cases_Step_Pmdynaform_Preview.html';
    DynaformDesignerModule.prototype.init.call(this);
};
DynaformDesignerModule.prototype.init = function () {
    var that = this;
    this.designer = new PMFormDesigner({
        onChange: function () {
            that.dirty = true;
        },
        onButtonCreateVariableClick: function (designer, listPanel, button) {
            var pmvariables = new PMVariables();
            pmvariables.showForm();
            pmvariables.load();
            pmvariables.onSave = function (xhr, response) {
                designer.addVariable(response);
                pmvariables.windowVariables.close();
                return false;
            };
        },
        onButtonClickEditvariable: function (item, variable, button) {
            var restProxy = new PMRestClient({
                endpoint: 'process-variable/' + variable.uid,
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    var pmvariables = new PMVariables();
                    pmvariables.load();
                    pmvariables.showFormEdit(response);
                    pmvariables.onEdit = function (xhr, response, data) {
                        item.getParent().removeItem(item);
                        that.designer.addVariable(data);
                        pmvariables.windowVariables.close();
                        return false;
                    };
                }
            });
            restProxy.executeRestClient();
        },
        forms: [
            {
                "name": "firstSubForm",
                "items": [
                    {
                        "id": "firstSubForm",
                        "type": "form",
                        "items": [
                            [
                                {
                                    "colSpan": 12,
                                    "name": "",
                                    "id": "455685247543800f3c8f195031965629",
                                    "label": "-Title-",
                                    "type": "title"
                                }
                            ],
                            [
                                {
                                    "variable": "text_name",
                                    "variable_uid": "4415812967531539f30a166211600459",
                                    "dataType": "string",
                                    "colSpan": 12,
                                    "name": "text_name",
                                    "id": "text_name",
                                    "label": "Nombre",
                                    "defaultValue": "",
                                    "required": false,
                                    "hint": "",
                                    "dependentFields": [],
                                    "dependenceStates": {
                                        "directDependence": "[]",
                                        "indirectDependence": "[]",
                                        "dependentFields": "[]"
                                    },
                                    "textTransform": "none",
                                    "validate": "any",
                                    "mask": "",
                                    "maxLength": 100,
                                    "formula": "",
                                    "mode": "parent",
                                    "type": "text"
                                }
                            ],
                            [
                                {
                                    "variable": "Country_of_Origin",
                                    "variable_uid": "57820440553b1a6e43049380325325b",
                                    "dataType": "string",
                                    "colSpan": 12,
                                    "name": "Country_of_Origin",
                                    "id": "Country_of_Origin",
                                    "label": "Country of Origin",
                                    "defaultValue": "",
                                    "required": false,
                                    "hint": "",
                                    "dependentFields": [],
                                    "dependenceStates": {
                                        "directDependence": "[]",
                                        "indirectDependence": "[]",
                                        "dependentFields": "[]"
                                    },
                                    "mode": "parent",
                                    "options": [
                                        {
                                            "value": "1",
                                            "label": "Bolivia",
                                            "disabled": false,
                                            "isGroup": false
                                        },
                                        {
                                            "value": "2",
                                            "label": "Argentina",
                                            "disabled": false,
                                            "isGroup": false
                                        }
                                    ],
                                    "type": "dropdown"
                                }
                            ]
                        ],
                        "variables": [
                            {
                                "var_acceptedValues": [],
                                "var_dbConnection": "",
                                "var_defaultValue": "",
                                "var_fieldSize": 15,
                                "var_fieldType": "string",
                                "var_label": "Nombre",
                                "var_name": "text_name",
                                "var_allowNull": 0,
                                "var_sql": "",
                                "var_uid": "4415812967531539f30a166211600459"
                            },
                            {
                                "var_acceptedValues": [
                                    {
                                        "value": "Bolivia",
                                        "keyValue": "1"
                                    },
                                    {
                                        "value": "Argentina",
                                        "keyValue": "2"
                                    }
                                ],
                                "var_dbConnection": "workflow",
                                "var_defaultValue": "",
                                "var_fieldSize": 10,
                                "var_fieldType": "string",
                                "var_label": "Country of Origin",
                                "var_name": "Country_of_Origin",
                                "var_allowNull": 1,
                                "var_sql": "",
                                "var_uid": "57820440553b1a6e43049380325325b"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "secondSubForm",
                "items": [
                    {
                        "id": "secondSubForm",
                        "type": "form",
                        "items": [
                            [
                                {
                                    "colSpan": 12,
                                    "name": "title1",
                                    "id": "927392176543801dfc92e82047890576",
                                    "label": "Subform2",
                                    "type": "title"
                                }
                            ],
                            [
                                {
                                    "variable": "text_name",
                                    "variable_uid": "4415812967531539f30a166211600459",
                                    "dataType": "string",
                                    "colSpan": 12,
                                    "name": "text_name",
                                    "id": "text_name",
                                    "label": "Nombre",
                                    "defaultValue": "",
                                    "required": false,
                                    "hint": "",
                                    "dependentFields": [],
                                    "dependenceStates": {
                                        "directDependence": "[]",
                                        "indirectDependence": "[]",
                                        "dependentFields": "[]"
                                    },
                                    "textTransform": "none",
                                    "validate": "any",
                                    "mask": "",
                                    "maxLength": 100,
                                    "formula": "",
                                    "mode": "parent",
                                    "type": "text"
                                }
                            ],
                            [
                                {
                                    "variable": "age",
                                    "variable_uid": "57820440553b1a6e4304938032532769",
                                    "dataType": "integer",
                                    "colSpan": 12,
                                    "name": "age",
                                    "id": "age",
                                    "label": "Age",
                                    "defaultValue": "",
                                    "required": false,
                                    "hint": "",
                                    "dependentFields": [],
                                    "dependenceStates": {
                                        "directDependence": "[]",
                                        "indirectDependence": "[]",
                                        "dependentFields": "[]"
                                    },
                                    "textTransform": "none",
                                    "validate": "any",
                                    "mask": "",
                                    "maxLength": 100,
                                    "formula": "",
                                    "mode": "parent",
                                    "type": "text"
                                }
                            ],
                            [
                                {
                                    "id": "9460234025438020ac967b6085697510",
                                    "label": "Submit",
                                    "colSpan": 12,
                                    "type": "submit"
                                }
                            ]
                        ],
                        "variables": [
                            {
                                "var_acceptedValues": [],
                                "var_dbConnection": "",
                                "var_defaultValue": "",
                                "var_fieldSize": 15,
                                "var_fieldType": "string",
                                "var_label": "Nombre",
                                "var_name": "text_name",
                                "var_allowNull": 0,
                                "var_sql": "",
                                "var_uid": "4415812967531539f30a166211600459"
                            },
                            {
                                "var_acceptedValues": [],
                                "var_dbConnection": "@DBCONNECTION",
                                "var_defaultValue": "",
                                "var_fieldSize": 20,
                                "var_fieldType": "integer",
                                "var_label": "Age",
                                "var_name": "age",
                                "var_allowNull": 0,
                                "var_sql": "select * from iso_country",
                                "var_uid": "57820440553b1a6e4304938032532769"
                            }
                        ]
                    }
                ]
            }
        ]
    });
    this.createPanelButton();
    this.createPanelIframe();
    this.createLayout();
};
DynaformDesignerModule.prototype.createPanelButton = function () {
    var that = this;
    this.panelButton = new PMUI.core.Panel({
        title: '',
        style: {
            cssProperties: {
                'float': 'right'
            }
        }
    });
    this.panelButton.addItem(new PMUI.ui.Button({
        text: 'Save'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 4px 4px',
                'padding': '0px 10px 10px 10px'
            }
        },
        handler: function () {
            that.save();
        },
        buttonType: 'success'
    }));
    this.panelButton.addItem(new PMUI.ui.Button({
        text: 'Export'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 4px 4px',
                'padding': '0px 10px 10px 10px'
            }
        },
        handler: function () {
            var jsondata = that.designer.getData(true);
            jsondata.name = that.dynaformData.dyn_title;
            jsondata.description = that.dynaformData.dyn_description;
            var a = document.createElement('a');
            document.body.appendChild(a);
            a.href = window.URL.createObjectURL(new Blob([JSON.stringify(jsondata)], {'type': 'application/octet-stream'}));
            a.download = jsondata.name + '.pmf';
            a.click();
            document.body.removeChild(a);
            delete a;
        },
        buttonType: 'link'
    }));
    this.panelButton.addItem(new PMUI.ui.Button({
        text: 'Import'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 4px 4px',
                'padding': '0px 10px 10px 10px'
            }
        },
        handler: function () {
            var form = document.createElement("form");
            var input = document.createElement("input");
            input.type = "file";
            form.appendChild(input);
            form.style.display = "none";
            document.body.appendChild(form);
            input.click();
            input.onchange = function () {
                var file = input.files[0];
                var reader = new FileReader();
                reader.readAsText(file, "UTF-8");
                reader.onload = function (e) {
                    that.dirty = true;
                    that.designer.setForm(JSON.parse(e.target.result));
                };
                reader.onerror = function (evt) {
                };
                //IE8 implementation
                //var filePath = f:\oo.txt;
                //var fso = new ActiveXObject("Scripting.FileSystemObject");
                //var textStream = fso.OpenTextFile(filePath);
                //var fileData = file.ReadAll();
            };
        },
        buttonType: 'link'
    }));
    this.panelButton.addItem(new PMUI.ui.Button({
        text: 'Preview'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 4px 4px',
                'padding': '0px 10px 10px 10px'
            }
        },
        handler: function () {
            that.showPreview();
        },
        buttonType: 'link'
    }));
    this.panelButton.addItem(new PMUI.ui.Button({
        text: 'Close'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 0px 0px',
                'padding': '0px 10px 10px 10px'
            }
        },
        handler: function () {
            if (!that.isDirty()) {
                that.hide();
                PMUI.setActiveCanvas(PMDesigner.canvas);
                return;
            }
            var message_window = new PMUI.ui.MessageWindow({
                id: 'messageWindowFormsDesigner',
                width: 490,
                title: 'Confirm'.translate(),
                windowMessageType: 'warning',
                bodyHeight: 'auto',
                message: 'Unsaved changes in DynaForm.'.translate(),
                footerItems: [{
                        id: 'messageWindowYesFormsDesigner',
                        text: 'Save'.translate(),
                        height: 40,
                        handler: function () {
                            message_window.close();
                            that.hide();
                            PMUI.setActiveCanvas(PMDesigner.canvas);
                            that.save();
                        }
                    }, {
                        pmType: 'label',
                        text: 'or'.translate()
                    }, {
                        id: 'messageWindowNoFormsDesigner',
                        text: 'Do not save'.translate(),
                        handler: function () {
                            message_window.close();
                            that.hide();
                            PMUI.setActiveCanvas(PMDesigner.canvas);
                        },
                        buttonType: 'link'
                    }
                ]
            });
            message_window.open();
            message_window.showFooter();
        },
        buttonType: 'link'
    }));
    this.panelButton.defineEvents();
};
DynaformDesignerModule.prototype.createPanelIframe = function () {
    var that = this;

    this.panelIframeButton = new PMUI.core.Panel({hiddenTitle: true, title: ''});
    this.panelIframeButton.addItem(new PMUI.ui.Button({
        text: 'Desktop'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 0px 0px',
                'padding': '0px 10px 10px 10px'
            },
            cssClasses: ['pmui-accordion-item-header']
        },
        handler: function () {
            $(that.iframePreview.getHTML()).css('width', '100%');
        }
    }));
    this.panelIframeButton.addItem(new PMUI.ui.Button({
        text: 'Tablet'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 0px 0px',
                'padding': '0px 10px 10px 10px'
            },
            cssClasses: ['pmui-accordion-item-header']
        },
        handler: function () {
            $(that.iframePreview.getHTML()).css('width', '800px');
        }
    }));
    this.panelIframeButton.addItem(new PMUI.ui.Button({
        text: 'Smartphone'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 0px 0px',
                'padding': '0px 10px 10px 10px'
            },
            cssClasses: ['pmui-accordion-item-header']
        },
        handler: function () {
            $(that.iframePreview.getHTML()).css('width', '400px');
        }
    }));
    this.panelIframeButton.addItem(new PMUI.ui.Button({
        text: 'Back'.translate(),
        style: {
            cssProperties: {
                'margin': '0px 4px 0px 0px',
                'border-radius': '4px 4px 4px 4px',
                'padding': '0px 10px 10px 10px',
                'float': 'right'
            }
        },
        handler: function () {
            that.hidePreview();
            that.show();
        },
        buttonType: 'link'
    }));

    this.iframePreview = new PMIframe({
        id: '',
        width: '100%',
        height: '100%'
    });

    this.panelIframe = new PMUI.core.Panel({
        hiddenTitle: true,
        title: ''
    });
    this.panelIframe.addItem(this.panelIframeButton);
    this.panelIframe.addItem(this.iframePreview);
    this.panelIframe.addCSSProperties({position: 'fixed'});
    this.panelIframe.defineEvents();
    this.panelIframe.getHTML().style.zIndex = 10;
    jQuery('body').append(this.panelIframe.getHTML());

    this.hidePreview();
};
DynaformDesignerModule.prototype.createLayout = function () {
    var that = this;

    this.panelTitle = new PMUI.core.Panel({
        title: '',
        style: {
            cssProperties: {
                'float': 'left',
                'font-size': '18px',
                'font-weight': 'bold',
                'margin': '4px 10px 4px 10px'
            }
        }
    });
    this.panelTitle.defineEvents();
    $(this.panelTitle.getHTML()).on('dblclick', function () {
        that.editTitle();
    });

    var panel = {
        north: {
            items: [this.panelTitle, this.panelButton],
            resizable: false,
            closable: false
        }
    };
    var lay = that.designer.getLayout();
    lay.setPluginSettings(panel);
    lay.setPanels(panel);

    jQuery('body').append(that.designer.getLayout().getHTML());
    that.designer.getLayout().render(true);
    that.designer.defineEvents();
};
DynaformDesignerModule.prototype.show = function () {
    $('#idNavBar').hide();
    $('#idContent').hide();
    $('body>div').hide();
    this.designer.getLayout().getHTML().style.zIndex = 10;
    $(this.designer.getLayout().getHTML()).show();
};
DynaformDesignerModule.prototype.hide = function () {
    $('#idNavBar').show();
    $('#idContent').show();
    $('body>div').show();
    $(this.designer.getLayout().getHTML()).hide();
};
DynaformDesignerModule.prototype.save = function () {
    var that = this;
    that.dynaformData['dyn_content'] = JSON.stringify(that.designer.getData(true));
    var restClient = new PMRestClient({
        endpoint: 'dynaform/' + that.dynaformData.dyn_uid,
        typeRequest: 'update',
        data: that.dynaformData,
        functionSuccess: function (xhr, response) {
            that.dirty = false;
        },
        messageError: 'There are problems creating the dynaform, please try again.'.translate(),
        messageSuccess: 'Dynaform saved successfully'.translate(),
        flashContainer: ''
    });
    restClient.executeRestClient();
};
DynaformDesignerModule.prototype.clear = function () {
    this.designer.clearForm();
    this.designer.clearOptionsSelector();
};
DynaformDesignerModule.prototype.showPreview = function () {
    var that = this;
    $(this.designer.getLayout().getHTML()).hide();
    $(that.panelIframe.getHTML()).show();
    var data = that.designer.getData(true);
    console.log(JSON.stringify(data));
    if (that.iframePreview.getHTML().src !== that.srcPreview) {
        that.iframePreview.getHTML().src = that.srcPreview;
        that.iframePreview.getHTML().onload = function () {
            var pm = this.contentWindow.window;
            pm.dynaform = new pm.PMDynaform.core.Project({
                data: data,
                keys: {
                    server: location.host,
                    projectId: PMDesigner.project.id,
                    workspace: WORKSPACE
                },
                token: {
                    accessToken: PMDesigner.project.keys.access_token
                }
            });
            $(this.contentWindow.document).find('form').submit(function (e) {
                e.preventDefault();
                return false;
            });
        };
    } else {
        that.iframePreview.getHTML().contentWindow.window.dynaform.setData(data);
    }
};
DynaformDesignerModule.prototype.hidePreview = function () {
    var that = this;
    $(that.panelIframe.getHTML()).hide();
};
DynaformDesignerModule.prototype.setDynaformData = function (data) {
    this.dynaformData = data;
    if (this.dynaformData.dyn_content) {
        this.designer.setForm(JSON.parse(this.dynaformData.dyn_content));
    } else {
        this.designer.setForm({
            id: this.dynaformData.dyn_uid,
            name: this.dynaformData.dyn_title.toString().replace(/\s/g, '_'),
            mode: 'edit',
            items: []
        });
    }
};
DynaformDesignerModule.prototype.setTitle = function (title) {
    this.panelTitle.getHTML().innerHTML = title;
};
DynaformDesignerModule.prototype.editTitle = function () {
    var that = this;
    that.editTitleForm = new PMUI.form.Form({
        id: 'formAddVariables',
        width: 'auto',
        title: '',
        visibleHeader: false,
        items: [
            {
                id: 'dyn_title',
                pmType: 'text',
                label: 'Title'.translate(),
                placeholder: 'Title'.translate(),
                name: 'dyn_title',
                value: '',
                required: true,
                valueType: 'string',
                controlsWidth: 300
            }, {
                id: 'dyn_description',
                pmType: 'textarea',
                label: 'Description',
                placeholder: 'Description',
                name: 'dyn_description',
                value: '',
                valueType: 'string',
                controlsWidth: 300,
                rows: 180,
                style: {cssClasses: ['mafe-textarea-resize']}
            }
        ]
    });

    that.editTitleWindow = new PMUI.ui.Window({
        id: 'editTitleWindow',
        title: 'Dynaform Properties'.translate(),
        height: 380,
        width: 470,
        buttonsPosition: 'center',
        footerItems: [
            new PMUI.ui.Button({
                id: 'editTitleWindowSave',
                text: 'Save'.translate(),
                handler: function () {
                    that.saveTitle();
                },
                height: 31,
                buttonType: 'success'
            }),
            {
                id: 'editTitleWindowOr',
                pmType: 'label',
                text: 'or'.translate(),
                style: {
                    cssProperties: {
                        'fontSize': '14px'
                    }
                }
            },
            new PMUI.ui.Button({
                id: 'editTitleWindowCancel',
                text: 'Cancel'.translate(),
                handler: function () {
                    if (that.editTitleForm.isDirty()) {
                        var message_window = new PMUI.ui.MessageWindow({
                            id: 'messageWindow',
                            width: 490,
                            title: 'Confirm'.translate(),
                            windowMessageType: 'warning',
                            bodyHeight: 'auto',
                            message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                            footerItems: [{
                                    id: 'messageWindowYes',
                                    text: 'Yes'.translate(),
                                    height: 40,
                                    handler: function () {
                                        message_window.close();
                                        that.editTitleWindow.close();
                                    }
                                }, {
                                    pmType: 'label',
                                    text: 'or'.translate()
                                }, {
                                    id: 'messageWindowNo',
                                    text: 'No'.translate(),
                                    handler: function () {
                                        message_window.close();
                                    },
                                    buttonType: 'link'
                                }
                            ]
                        });
                        message_window.open();
                        message_window.showFooter();
                    } else {
                        that.editTitleWindow.close();
                    }
                },
                height: 31,
                buttonType: 'link'
            })
        ],
        buttonPanelPosition: 'top'
    });
    that.editTitleWindow.addItem(that.editTitleForm);
    that.editTitleWindow.open();
    that.editTitleWindow.showFooter();
    that.editTitleWindow.footer.html.style.textAlign = 'right';

    that.editTitleForm.getField('dyn_title').setValue(that.dynaformData['dyn_title']);
    that.editTitleForm.getField('dyn_description').setValue(that.dynaformData['dyn_description']);
};
DynaformDesignerModule.prototype.saveTitle = function () {
    var that = this;
    if (!that.editTitleForm.isValid()) {
        return;
    }
    that.dynaformData['dyn_title'] = that.editTitleForm.getField('dyn_title').getValue();
    that.dynaformData['dyn_description'] = that.editTitleForm.getField('dyn_description').getValue();
    var restClient = new PMRestClient({
        endpoint: 'dynaform/' + that.dynaformData.dyn_uid,
        typeRequest: 'update',
        data: that.dynaformData,
        functionSuccess: function (xhr, response) {
            that.setTitle(that.dynaformData['dyn_title']);
            that.editTitleWindow.close();
        },
        messageError: 'There are problems creating the dynaform, please try again.'.translate(),
        messageSuccess: 'Dynaform saved successfully'.translate(),
        flashContainer: ''
    });
    restClient.executeRestClient();
};
DynaformDesignerModule.prototype.datasetLoad = function () {
    var that = this;
    var restClientMultipart = new PMRestClient({
        typeRequest: 'post',
        multipart: true,
        data: {
            calls: [
                {
                    url: 'process-variables',
                    method: 'GET'
                },
                {
                    url: 'dynaforms',
                    method: 'GET'
                }
            ]
        },
        functionSuccess: function (xhr, responses) {
            var response;
            response = responses[0].response;
            var i, a;
            for (i = 0; i < response.length; i++) {
                for (var a in response[i]) {
                    if (response[i]['var_default'] === null) {
                        response[i]['var_default'] = '';
                    }
                }
            }
            that.designer.setVariables(response);

            response = responses[1].response;
            var items = [];
            for (i = 0; i < response.length; i++) {
                items.push({
                    name: response[i].dyn_title
                });
            }
            that.designer.setSubForms(items);
        }
    });
    restClientMultipart.executeRestClient();
};
DynaformDesignerModule.prototype.isDirty = function () {
    return this.dirty;
};

PMDesigner.dynaformDesigner = function (data) {
    PMUI.setActiveCanvas(null);
    if (!PMDesigner.dynaformDesignerModule) {
        PMDesigner.dynaformDesignerModule = new DynaformDesignerModule();
    }
    PMDesigner.dynaformDesignerModule.show();
    PMDesigner.dynaformDesignerModule.clear();
    PMDesigner.dynaformDesignerModule.datasetLoad();
    PMDesigner.dynaformDesignerModule.setTitle(data.dyn_title);
    PMDesigner.dynaformDesignerModule.setDynaformData(data);
};

PMDesigner.complexRoutingRule = function (shape) {
    var formRoutingRule,
        formPanelSelected,
        arrayShapeIdRemoved = [],
        buttonAdd,
        windowConnections,
        warningMessageWindowDelete,
        containerLabels,
        deleteButton;

    //Window
        //button add routing rule
    buttonAdd = new PMUI.ui.Button({
        id: 'routingRuleButtonAdd',
        text: 'Add Routing Rule'.translate(),
        style: {
            cssProperties: {
                marginLeft:'50px',
                marginTop:'10px',
                marginBottom:'10px',
                fontSize: '16px'
            }
        },
        buttonType : 'success',
        height:31,
        handler : function (){
            var item, btnDel;
            if (countActivities() > 0) {
                item = addRow();
                item.getItems()[2].style.addProperties({display:'none'});
                item.getItems()[2].controls[0].button.setButtonType('error');
                formRoutingRule.addItem(item);
                for (var i=0 ; i < formRoutingRule.getItems().length ; i++){
                    //formRoutingRule.getItems()[i].style.addProperties({'box-sizing': 'initial'});
                    //item.style.addProperties({padding : 'initial'});
                    formRoutingRule.getItems()[i].style.addProperties({'padding': 'initial'});
                }
                item.getItems()[0].dom.labelTextContainer.style.display = "none";
                item.getItems()[1].dom.labelTextContainer.style.display = "none";
                
            } else {
                PMDesigner.msgFlash('There are no items.'.translate(), windowConnections.footer);
            }
        }
    });
        //button Save
    buttonSave = new PMUI.ui.Button({
        id: 'windowConnectionsButtonSave',
        text: 'Apply'.translate(),
        handler: function () {
            removeConnectionsIntoCanvas();
            saveConnections();
        },
        buttonType : 'success',
        height : 31
    });
        //Button cancel
    buttonCancel = new PMUI.ui.Button({
        id: 'windowConnectionsButtonCancel',
        text: 'Cancel'.translate(),
        buttonType : 'link',
        handler : function () {
            if (formRoutingRule.isDirty()) {
                warningMessageWindowDirty.open();
                warningMessageWindowDirty.showFooter();
            } else {
                windowConnections.close();
            }
        }
    });
    
    windowConnections = new PMUI.ui.Window({
        id: 'windowConnections',
        title: 'Routing Rule'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        footerAlign : 'right',
        buttonPanelPosition: 'top',
        items : [
                 buttonAdd
                 ],
        buttons: [
            buttonSave,
            {
        		pmType: 'label',
        		text: " or ",
        		style : {
        			cssProperties :{
        				'fontSize': '14px'
        			}
        		}
            },
            buttonCancel
        ]
    });
    windowConnections.showFooter();
    //END WINDOW

    containerLabels = new PMUI.core.Panel({
        layout :  'hbox',
        width : 'auto',
        height : 29,
        style : {
        	cssProperties : {
        		'border-bottom': '1px solid #c0c0c0'
        	}
        }
    });

    var labelNextTask = new PMUI.ui.TextLabel({
        text: 'Next Task'.translate(),
        style : {
        	cssProperties : {
        		'font-weight': 'bold'
        	}
        }
    });

    var labelCondition = new PMUI.ui.TextLabel({
        text: 'Description'.translate(),
        style : {
        	cssProperties : {
        		'font-weight': 'bold'
        	}
        }
    });
    
    containerLabels.addItem(labelNextTask);
    containerLabels.addItem(labelCondition);
    
    windowConnections.addItem(containerLabels);

    formRoutingRule = new PMUI.form.Form({
        id: 'formRoutingRule',
        visibleHeader: false,
        width: DEFAULT_WINDOW_WIDTH - 60,
        height: 'auto',
        items: [],
        style : {
            cssProperties : {
                'margin-left' : '35px'
            }
        }
    });

    var warningMessageWindowDelete = new PMUI.ui.MessageWindow({
        id: 'warningMessageWindowDelete',
        windowMessageType : 'error',
        width : 490,
        bodyHeight : 'auto',
        message: 'Do you want to delete this routing rule?'.translate(),
        footerItems: [{
                id: 'warningMessageWindowDeleteButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    deleteRow();
                    warningMessageWindowDelete.close();
                },
                height : 40
            }, {
            	pmType :'label',
            	text:'or'
            }, {
                id: 'warningMessageWindowDeleteButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDelete.close();
                },
                buttonType :'link'
            }
        ]
    });

    var warningMessageWindowDirty = new PMUI.ui.MessageWindow({
        id: 'warningMessageWindowDirty',
        windowMessageType : 'warning',
        width : 490,
        bodyHeight : 'auto',
        title: 'Warning'.translate(),
        message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
        footerItems: [{
                id: 'warningMessageWindowDirtyButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDirty.close();
                    windowConnections.close();
                },
                height : 40
            },{
            	pmType : 'label',
            	text : 'or'
            }, {
                id: 'warningMessageWindowDirtyButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDirty.close();
                },
                buttonType :'link'
            }
        ]
    });
    
    //main
    formRoutingRule.hideFooter();
    windowConnections.addItem(formRoutingRule);
    windowConnections.open();
    labelNextTask.setWidth(382);
    labelNextTask.style.addProperties({padding:'5px 0px 0px 50px'});
    labelCondition.setWidth(410);
    labelCondition.style.addProperties({padding:'5px 0px 0px 0px'});
    containerLabels.style.addProperties({'border-bottom': '1px solid #e7e7e7'});
    //windowConnections.setTitle('Routing Rule'.translate() + ' - ' + shape.gat_type);
    windowConnections.setTitle('Routing Rule'.translate() + ' - ' + ((shape.gat_type==='COMPLEX') ? 'Exclusive (Manual)'.translate(): shape.gat_type));
    loadConnections(); 
    
    
    
//functions 
    function countActivities () {
    //Important! Any changes to synchronize the assessment of the condition 
    //of the functions: countActivities and loadActivities
    var n = 0;
    var dt = PMDesigner.project.getDirtyObject().diagrams[0].activities;
    for (var i = 0; i < dt.length; i++) {
        n = n + 1;
    }

    var dt = PMDesigner.project.getDirtyObject().diagrams[0].events;
    for (var i = 0; i < dt.length; i++) {
        if (dt[i].evn_type !== 'START') {
            n = n + 1;
        }
    }
	    return n;
	};
	
	function addRow () {
	
	    var dropDownControl, description, deleteButton, newRow;
	
	    newRow = new PMUI.form.FormPanel ({
	        layout : 'hbox'
	    });
	
	    dropDownControl = new PMUI.field.DropDownListField({
	        id: 'dropdownNextTask',
	        name: 'act_name',
	        valueType: 'string',
	        label: 'Next Task'.translate(),
	        labelPosition: 'top',
	        labelVisible: false,
	        value: '',
	        readOnly: true,
	        controlsWidth : 360,
	        proportion : 1.1,
	        style : {
	        	cssProperties : {
	        		'vertical-align': 'top'
	        	}
	        }
	    });
	
	    description = new PMUI.field.TextField({
	        id: 'textCondition',
	        pmType: 'text',
	        name: 'flo_description',
	        valueType: 'string',
	        label: 'Description'.translate(),
	        labelPosition: 'top',
	        labelVisible: false,
	        controlsWidth: 320,
	        required: true,
	        style : {
	        	cssProperties : {
	        		'vertical-align': 'top'
	        	}
	        }
	    });
	
	    deleteButton = new PMUI.field.ButtonField({
	        id: 'buttonDelete',
	        value : 'Delete'.translate(),
	        handler : function (e,a) {
	        	for (var i = 0 ; i < formRoutingRule.getItems().length ; i++){
	        		if ( formRoutingRule.getItems()[i].getItems()[2].controls[0].button.id == this.id){
	        			formPanelSelected = formRoutingRule.getItems()[i];
	                    warningMessageWindowDelete.open();
	                    warningMessageWindowDelete.dom.titleContainer.style.height="17px";
	                    warningMessageWindowDelete.showFooter();
	        		}
	        	}
	        	
	        },
	        name : 'delete',
	        labelVisible : false,
	        buttonAling : 'left',
	        controlsWidth : 100,
	        proportion : 0.3,
	        style : {
	        	cssProperties : {
	        		'vertical-align': 'top'
	        	}
	        }
	    });
	
	    newRow.addItem(dropDownControl);
	    newRow.addItem(description);
	    newRow.addItem(deleteButton);
	    loadActivities(dropDownControl);
	    return newRow;
	};
	
	function loadActivities (dropdown) {
	    //Important! Any changes to synchronize the assessment of the condition 
	    //of the functions: countActivities and loadActivities
	    dropdown.clearOptions();
	    dropdown.setUID = function (uid) {
	        this.uid = uid;
	    };
	    dropdown.getUID = function () {
	        return this.uid;
	    };
	    dropdown.addOptionGroup({
	        label: 'Task'.translate(),
	        selected: true,
	        options: []
	    });
	    dropdown.addOptionGroup({
	        label: 'Sub-process'.translate(),
	        options: []
	    });
	    var dt = PMDesigner.project.getDirtyObject().diagrams[0].activities, nameGroup;
	    dt = dt.sort(function (a, b) {
	        return a.act_name.toString().toLowerCase() > b.act_name.toString().toLowerCase();
	    });
	    for (var i = 0; i < dt.length; i++) {
	        nameGroup = dt[i].act_type === 'TASK' ? 'Task'.translate() : 'Sub-process'.translate();
	        dropdown.addOption({
	            value: dt[i].act_uid,
	            label: dt[i].act_name
	        }, nameGroup);
	    }
	
	    dropdown.addOptionGroup({
	        label: 'End of process'.translate(),
	        options: []
	    });
	    var dt = PMDesigner.project.getDirtyObject().diagrams[0].events;
	    dt = dt.sort(function (a, b) {
	        return a.evn_name.toString().toLowerCase() > b.evn_name.toString().toLowerCase();
	    });
	    for (var i = 0; i < dt.length; i++) {
	        if (dt[i].evn_type !== 'START') {
	            dropdown.addOption({
	                value: dt[i].evn_uid,
	                label: dt[i].evn_name
	            }, 'End of process'.translate());
	        }
	    }
	};
	
	function removeConnectionsIntoCanvas () {
	    var shapeDest, connection, dt;
	    for (var j = 0; j < arrayShapeIdRemoved.length; j++) {
	        shapeDest = getShapeForId(arrayShapeIdRemoved[j]);
	        dt = shape.getPorts().asArray();
	        for (var i = 0; i < dt.length; i++) {
	            connection = dt[i].getConnection();
	            if (shape.getID() === connection.getSrcPort().getParent().getID() &&
	                    shapeDest.getID() === connection.getDestPort().getParent().getID()) {
	                PMDesigner.canvas.emptyCurrentSelection();
	                PMDesigner.canvas.setCurrentConnection(connection);
	                PMDesigner.canvas.removeElements();
	                connection.saveAndDestroy();
	                PMDesigner.canvas.removeConnection(connection);
	                break;
	            }
	        }
	    }
	    arrayShapeIdRemoved = [];
	};
	
	function editShapeDestConnection (shapeDest, oldShape) {
	    var connection, canvas = PMDesigner.canvas;
	    connection = isConnection(shape, oldShape);
	    oldShape.removePort(connection.destPort);
	    shapeDest.addPort(connection.destPort, 100, 100,
	            false, connection.srcPort);
	
	    connection.canvas.commandStack.add(new PMUI.command.CommandConnect(connection));
	    connection.connect();
	    canvas.triggerPortChangeEvent(connection.destPort);
	};
	
	function createEndShape () {
	    //referer /processmaker/vendor/colosa/pmUI/src/behavior/ContainerDrop.js
	    //method ContainerDropBehavior.prototype.onDrop line 94-105.
	    var customShape, canvas = PMDesigner.canvas, command;
	    customShape = canvas.shapeFactory('END');
	
	    var x = shape.getX() + shape.getWidth();
	    var y = shape.getY() + shape.getHeight() + 20;
	
	    canvas.addElement(customShape, x, y,
	            customShape.topLeftOnCreation);
	
	    //since it is a new element in the designer, we triggered the
	    //custom on create element event
	    canvas.updatedElement = customShape;
	
	    // create the command for this new shape
	    command = new PMUI.command.CommandCreate(customShape);
	    canvas.commandStack.add(command);
	    command.execute();
	    return customShape;
	};
	
	function saveConnections () {
	    if (!formRoutingRule.isValid()) {
	        return;
	    }
	    var dt = formRoutingRule.getItems(), id, oldId, shapeDest, oldShapeDest, connection;
	    for (var i = 0 ; i < dt.length; i++) {
	        id = dt[i].getField('act_name').getValue();
	        oldId = dt[i].getField('act_name').getUID();
	        if (id !== '0') {
	            if (oldId === undefined) {
	                shapeDest = getShapeForId(id);
	                createConnection(shape, shapeDest).setFlowCondition(dt[i].getField('flo_description').getValue());
	            }
	            if (oldId !== undefined && id === oldId) {
	                shapeDest = getShapeForId(id);
	                connection = isConnection(shape, shapeDest);
	                $a = connection;
	                connection.setFlowCondition(dt[i].getField('flo_description').getValue());
	            }
	            if (oldId !== undefined && id !== oldId) {
	                shapeDest = getShapeForId(id);
	                oldShapeDest = getShapeForId(oldId);
	                connection = isConnection(shape, oldShapeDest);
	                connection.setFlowCondition(dt[i].getField('flo_description').getValue()); 
	                editShapeDestConnection(shapeDest, oldShapeDest);
	            }
	        } else {
	            var customShape = createEndShape();
	            createConnection(shape, customShape);
	        }
	    }
	    windowConnections.close();
	    PMDesigner.msgFlash('Saved correctly'.translate(), document.body);
	    PMDesigner.project.dirty = true;
	};
	
	function getShapeForId (id) {
	    var dt = PMDesigner.canvas.getChildren().asArray();
	    for (var i = 0; i < dt.length; i++) {
	        if (dt[i].act_uid === id || dt[i].evn_uid === id) {
	            return dt[i];
	        }
	    }
	    return null;
	};
	
	function createConnection (sourceShape, shape) {
	    //referer to /processmaker/vendor/colosa/MichelangeloFE/src/connectiondrop.js
	    //method PMConnectionDropBehavior.prototype.onDrop
	    var sourcePort, endPort, connection, canvas = PMDesigner.canvas;
	    sourcePort = new PMUI.draw.Port({
	        width: 10,
	        height: 10
	    });
	    endPort = new PMUI.draw.Port({
	        width: 10,
	        height: 10
	    });
	
	    sourceShape.addPort(sourcePort, 100, 100);
	    shape.addPort(endPort, 100, 100,
	            false, sourcePort);
	
	    //add ports to the canvas array for regularShapes
	    //shape.canvas.regularShapes.insert(sourcePort).insert(endPort);
	    //create the connection
	    connection = new PMFlow({
	        srcPort: sourcePort,
	        destPort: endPort,
	        segmentColor: new PMUI.util.Color(92, 156, 204),
	        name: "",
	        canvas: shape.canvas,
	        segmentStyle: shape.connectionType.segmentStyle,
	        flo_type: shape.connectionType.type
	    });
	    connection.setSrcDecorator(new PMUI.draw.ConnectionDecorator({
	        width: 1,
	        height: 1,
	        canvas: canvas,
	        decoratorPrefix: (typeof shape.connectionType.srcDecorator !== 'undefined'
	                && shape.connectionType.srcDecorator !== null) ?
	                shape.connectionType.srcDecorator : "mafe-decorator",
	        decoratorType: "source",
	        parent: connection
	    }));
	    connection.setDestDecorator(new PMUI.draw.ConnectionDecorator({
	        width: 1,
	        height: 1,
	        canvas: canvas,
	        decoratorPrefix: (typeof shape.connectionType.destDecorator !== 'undefined'
	                && shape.connectionType.destDecorator !== null) ?
	                shape.connectionType.destDecorator : "mafe-decorator",
	        decoratorType: "target",
	        style: {
	            cssClasses: [
	                "mafe-connection-decoration-target"
	            ]
	        },
	        parent: connection
	    }));
	    connection.canvas.commandStack.add(new PMUI.command.CommandConnect(connection));
	
	    //connect the two ports
	    connection.connect();
	    connection.setSegmentMoveHandlers();
	
	    //add the connection to the canvas, that means insert its html to
	    // the DOM and adding it to the connections array
	    canvas.addConnection(connection);
	
	    // Filling PMFlow fields
	    connection.setTargetShape(endPort.parent);
	    connection.setOriginShape(sourcePort.parent);
	    connection.savePoints();
	
	    // now that the connection was drawn try to create the intersections
	    connection.checkAndCreateIntersectionsWithAll();
	
	    //attaching port listeners
	    sourcePort.attachListeners(sourcePort);
	    endPort.attachListeners(endPort);
	
	    // finally trigger createEvent
	    canvas.triggerCreateEvent(connection, []);
	    return connection;
	};
	
	function loadConnections () {
	    var row, connection, dt = shape.getPorts().asArray();
	    for (var i = 0; i < dt.length; i++) {
	        connection = dt[i].getConnection();
	        //connectio.getSrcPort().getParent().getID() //get source id
	        if (shape.getID() !== connection.getDestPort().getParent().getID()) {
	            row = addRow();
	            row.getField('act_name').setValue(connection.getDestPort().getParent().getID());
	            row.getField('act_name').setUID(connection.getDestPort().getParent().getID());
	            row.getField('flo_description').setValue(connection.getFlowCondition());
	            
	            row.getItems()[2].style.addProperties({display:'none'});
	            row.getItems()[2].controls[0].button.setButtonType('error');
	            formRoutingRule.addItem(row);
	            for (var j=0 ; j < formRoutingRule.getItems().length ; j++){
	                formRoutingRule.getItems()[j].style.addProperties({'padding': 'initial'});
	            }
	            row.getItems()[0].dom.labelTextContainer.style.display = "none";
	            row.getItems()[1].dom.labelTextContainer.style.display = "none";                
	        }
	    }
	};
	
	function isConnection (sourceShape, shape) {
	    var connection;
	    var dt = sourceShape.getPorts().asArray();
	    for (var i = 0; i < dt.length; i++) {
	        connection = dt[i].getConnection();
	        if (sourceShape.getID() === connection.getSrcPort().getParent().getID() &&
	                shape.getID() === connection.getDestPort().getParent().getID()) {
	            return connection;
	        }
	    }
	    return false;
	};
	
	function deleteRow () {
	    arrayShapeIdRemoved.push(formPanelSelected.getField('act_name').getValue());
	    formRoutingRule.removeItem(formPanelSelected);
	    PMDesigner.msgFlash('Routing rule removed correctly'.translate(), windowConnections.footer);
	}

};
//DesignerView = function () {
//    DesignerView.prototype.init.call(this);
//};
//DesignerView.prototype.canvas = new PMCanvas({
//    id: PMUI.generateUniqueId(),
//    width: 490,
//    height: 490,
//    drop: {
//        pmType: 'container'
//    },
//    container: 'regularcontainer',
//    readOnly: false
//});
//DesignerView.prototype.init = function () {
//};
//DesignerView.prototype.load = function () {
//    var that = this;
//    var restClient = new PMRestClient({
//        typeRequest: 'post',
//        multipart: true,
//        data: {
//            calls: [{
//                    url: 'project/' + PMDesigner.project.id,
//                    method: 'GET'
//                }
//            ]
//        },
//        functionSuccess: function (xhr, response) {
//            var index, activities, gateways, events, artifacts, connections, diagram;
//            diagram = response[0].response.diagrams[0];
//            for (index = 0; index < diagram.activities.length; index++) {
//                activities = diagram.activities[index];
//                that.createShape(activities.act_type, activities);
//            }
//            for (index = 0; index < diagram.events.length; index++) {
//                events = diagram.events[index];
//                that.createShape(events.evn_type, events);
//            }
//            for (index = 0; index < diagram.gateways.length; index++) {
//                gateways = diagram.gateways[index];
//                that.createShape(gateways.gat_type, gateways);
//            }
//            for (index = 0; index < diagram.artifacts.length; index++) {
//                artifacts = diagram.artifacts[index];
//                that.createShape(artifacts.art_type, artifacts);
//            }
//            for (index = 0; index < diagram.flows.length; index++) {
//                connections = diagram.flows[index];
//                that.createFlow(connections);
//            }
//            that.removeShapeEvents();
//        }
//    });
//    restClient.setBaseEndPoint('');
//    restClient.executeRestClient();
//};
//DesignerView.prototype.show = function () {
//    var w = new PMUI.ui.Window({
//        title: 'Map View',
//        width: 550,
//        height: 570,
//        modal: true,
//        closable: true,
//        visibleFooter: true
//    });
//    w.open();
//    w.addItem(this.canvas);
//    this.canvas.setPositionMode('relative');
//};
//DesignerView.prototype.createShape = function (type, shape) {
//    var customShape, transformShape;
//    transformShape = this.setShapeValues(type, shape);
//    customShape = this.canvas.shapeFactory(type, transformShape);
//    this.canvas.addElement(customShape, parseInt(shape.bou_x, 10), parseInt(shape.bou_y, 10), true);
//    customShape.attachListeners();
//};
//DesignerView.prototype.setShapeValues = function (type, options) {
//    switch (type) {
//        case 'TASK':
//        case 'SUB_PROCESS':
//            options.width = parseInt(options.bou_width, 10);
//            options.height = parseInt(options.bou_height, 10);
//            options.id = options.act_uid;
//            options.labels = [{message: options.act_name}];
//            break;
//        case 'START':
//        case 'END':
//            options.id = options.evn_uid;
//            options.labels = [{message: options.evn_name}];
//            break;
//        case 'TEXT_ANNOTATION':
//            options.id = options.art_uid;
//            options.labels = [{message: options.art_name}];
//            break;
//        case 'COMPLEX':
//        case 'EXCLUSIVE':
//        case 'PARALLEL':
//        case 'INCLUSIVE':
//            options.id = options.gat_uid;
//            options.labels = [{message: options.gat_name}];
//            break;
//    }
//    return options;
//};
//DesignerView.prototype.createFlow = function (conn) {
//    var sourceObj,
//            targetObj,
//            startPoint,
//            endPoint,
//            sourcePort,
//            targetPort,
//            connection,
//            positionSourceX,
//            positionSourceY,
//            positionTargetX,
//            positionTargetY,
//            segmentMap = {
//        SEQUENCE: 'regular',
//        MESSAGE: 'segmented',
//        DATAASSOCIATION: 'dotted',
//        ASSOCIATION: 'dotted',
//        DEFAULT: 'regular',
//        CONDITIONAL: 'regular'
//    },
//    srcDecorator = {
//        SEQUENCE: 'mafe-decorator',
//        MESSAGE: 'mafe-decorator_message',
//        DATAASSOCIATION: 'mafe-decorator',
//        ASSOCIATION: 'mafe-decorator_',
//        DEFAULT: 'mafe-decorator_default',
//        CONDITIONAL: 'mafe-decorator_conditional'
//    },
//    destDecorator = {
//        SEQUENCE: 'mafe-decorator',
//        MESSAGE: 'mafe-decorator_message',
//        DATAASSOCIATION: 'mafe-decorator_association',
//        ASSOCIATION: 'mafe-decorator_association',
//        DEFAULT: 'mafe-decorator',
//        CONDITIONAL: 'mafe-decorator'
//    };
//
//    var dt = this.canvas.getCustomShapes().asArray();
//    for (var i = 0; i < dt.length; i++) {
//        if (conn.flo_element_origin === dt[i].id) {
//            sourceObj = dt[i];
//        }
//        if (conn.flo_element_dest === dt[i].id) {
//            targetObj = dt[i];
//        }
//    }
//
//    if (typeof sourceObj === 'object' && typeof targetObj === 'object') {
//        startPoint = new PMUI.util.Point(conn.flo_x1, conn.flo_y1);
//        endPoint = new PMUI.util.Point(conn.flo_x2, conn.flo_y2);
//
//        sourcePort = new PMUI.draw.Port({
//            width: 10,
//            height: 10
//        });
//
//        targetPort = new PMUI.draw.Port({
//            width: 10,
//            height: 10
//        });
//
//        positionSourceX = startPoint.x - sourceObj.absoluteX;
//        positionSourceY = startPoint.y - sourceObj.absoluteY;
//
//        positionTargetX = endPoint.x - targetObj.absoluteX;
//        positionTargetY = endPoint.y - targetObj.absoluteY;
//
//        sourceObj.addPort(sourcePort, positionSourceX, positionSourceY);
//        targetObj.addPort(targetPort, positionTargetX, positionTargetY, false, sourcePort);
//
//        connection = new PMFlow({
//            id: conn.flo_uid,
//            srcPort: sourcePort,
//            destPort: targetPort,
//            canvas: this.canvas,
//            segmentStyle: segmentMap[conn.flo_type],
//            segmentColor: new PMUI.util.Color(92, 156, 204),
//            flo_type: conn.flo_type,
//            name: conn.flo_name,
//            flo_condition: conn.flo_condition,
//            flo_state: conn.flo_state
//        });
//
//        connection.setSrcDecorator(new PMUI.draw.ConnectionDecorator({
//            decoratorPrefix: srcDecorator[conn.flo_type],
//            decoratorType: 'source',
//            style: {
//                cssClasses: []
//            },
//            width: 1,
//            height: 1,
//            canvas: this.canvas,
//            parent: connection
//        }));
//
//        connection.setDestDecorator(new PMUI.draw.ConnectionDecorator({
//            decoratorPrefix: destDecorator[conn.flo_type],
//            decoratorType: 'target',
//            style: {
//                cssClasses: []
//            },
//            width: 1,
//            height: 1,
//            canvas: this.canvas,
//            parent: connection
//        }));
//
//        connection.connect();
//        connection.setSegmentMoveHandlers();
//
//        //add the connection to the canvas, that means insert its html to
//        // the DOM and adding it to the connections array
//        this.canvas.addConnection(connection);
//
//        // Filling mafeFlow fields
//        connection.setTargetShape(targetPort.parent);
//        connection.setOriginShape(sourcePort.parent);
//        connection.savePoints();
//
//        // now that the connection was drawn try to create the intersections
//        connection.checkAndCreateIntersectionsWithAll();
//
//        //attaching port listeners
//        sourcePort.attachListeners(sourcePort);
//        targetPort.attachListeners(targetPort);
//
//        this.canvas.triggerCreateEvent(connection, []);
//    }
//};
//DesignerView.prototype.removeShapeEvents = function () {
//    var dt = this.canvas.getCustomShapes().asArray();
//    for (var i = 0; i < dt.length; i++) {
//        $(dt[i].html).find("*").addBack().off();
//    }
//};
//DesignerView.prototype.setAllShapeColor = function (color) {
//    //a = dt[i].html.getElementsByClassName('pmui pmui-layer task')[0];
//    var a, dt = this.canvas.getCustomShapes().asArray();
//    for (var i = 0; i < dt.length; i++) {
//        a = dt[i].html.getElementsByClassName('pmui pmui-layer mafe-activity-task')[0];
//        if (a === undefined) {
//            a = dt[i].html.getElementsByClassName('pmui pmui-layer mafe-activity-subprocess')[0];
//        }
//        if (a !== undefined) {
//            a.style.backgroundColor = color;
//        }
//    }
//};
////PMDesigner.mapView = function () {
////    var a = new DesignerView();
////    a.show();
////    a.load();
////    a.setAllShapeColor('red');
//};
var PMVariables = function (options) {
    var that = this;
    this.var_uid = null;
    this.var_name = null;
    this.edit = false;
    this.editRow = null;
    this.dirtyAcceptedValue = false;
    this.fieldInfo = null;
    this.onSave = new Function();
    this.onEdit = new Function();
    this.buttonCreate = new PMUI.ui.Button({
        id: 'buttonCreate',
        text: 'Create'.translate(),
        height: '36px',
        width: 100,
        style: {
            cssClasses: [
                'mafe-button-create'
            ]
        },
        handler: function () {
            that.showForm();
        }
    });
    this.formVariables = new PMUI.form.Form({
        id: 'formVariables',
        width: 'auto',
        title: '',
        visibleHeader: false,
        items: [
            {
                pmType: 'text',
                label: 'Name'.translate(),
                placeholder: 'Name'.translate(),
                id: 'variableName',
                value: '',
                name: 'var_name',
                required: true,
                valueType: 'string',
                maxLength: 60,
                controlsWidth: 460
            }, {
                pmType: 'text',
                label: 'Label'.translate(),
                placeholder: 'Label'.translate(),
                id: 'variableLabel',
                value: '',
                name: 'var_label',
                required: true,
                valueType: 'string',
                maxLength: 60,
                controlsWidth: 460
            }, {
                pmType: 'dropdown',
                label: 'Field Type'.translate(),
                placeholder: 'Field Type'.translate(),
                id: 'varType',
                value: 'string',
                name: 'var_field_type',
                required: true,
                valueType: 'string',
                controlsWidth: 460,
                options: [
                    {
                        label: 'String',
                        value: 'string'
                    }, {
                        label: 'Integer',
                        value: 'integer'
                    }, {
                        label: 'Float',
                        value: 'float'
                    }, {
                        label: 'Boolean',
                        value: 'boolean'
                    }, {
                        label: 'Date',
                        value: 'date'
                    }, {
                        label: 'Datetime',
                        value: 'datetime'
                    }
                ],
                onChange: function (newValue, oldValue) {
                    var sw = that.gridAcceptedValues.visible === false ? true : (that.gridAcceptedValues.getData().length === 0);
                    var sw2 = that.formBooleanOptions.visible === false ? true : (that.formBooleanOptions.getField('trueOption').getValue() + that.formBooleanOptions.getField('falseOption').getValue()) === '';
                    if (sw && sw2) {
                        that.changeViewFieldType(newValue, oldValue);
                        that.formAcceptedValues.reset();
                        that.gridAcceptedValues.clearItems();
                        that.formBooleanOptions.reset();
                        return;
                    }
                    var message_window = new PMUI.ui.MessageWindow({
                        id: 'messageWindowCancel',
                        width: 490,
                        title: 'Confirm'.translate(),
                        windowMessageType: 'warning',
                        bodyHeight: 'auto',
                        message: 'This action to delete all options. You want to continue?'.translate(),
                        footerItems: [{
                                id: 'messageWindowYes',
                                text: 'Yes'.translate(),
                                height: 40,
                                handler: function () {
                                    message_window.close();
                                    that.changeViewFieldType(newValue, oldValue);
                                    that.formAcceptedValues.reset();
                                    that.gridAcceptedValues.clearItems();
                                    that.formBooleanOptions.reset();
                                }
                            }, {
                                pmType: 'label',
                                text: 'or'.translate()
                            }, {
                                id: 'messageWindowNo',
                                text: 'No'.translate(),
                                handler: function () {
                                    message_window.close();
                                    that.formVariables.getField('var_field_type').setValue(oldValue);
                                },
                                buttonType: 'link'
                            }
                        ],
                        onClose: function () {
//                            that.formVariables.getField('var_field_type').setValue(oldValue);
                        }
                    });
                    message_window.open();
                    message_window.showFooter();
                }
            }, {
                pmType: 'text',
                valueType: 'number',
                label: 'Size'.translate(),
                placeholder: 'Size'.translate(),
                id: 'Variable Size',
                name: 'var_field_size',
                controlsWidth: 460,
                value: 10,
                helper: 'Range: 1 - 2147483647'
            }, {
                pmType: 'dropdown',
                label: 'Allow Null'.translate(),
                placeholder: 'Allow Null'.translate(),
                id: 'varNull',
                value: '',
                name: 'var_null',
                required: true,
                options: [
                    {
                        label: 'yes'.translate(),
                        value: 1
                    }, {
                        label: 'no'.translate(),
                        value: 0
                    }
                ],
                controlsWidth: 460,
                valueType: 'number'
            }, {
                pmType: 'dropdown',
                label: 'DB Connection'.translate(),
                placeholder: 'DB Connection'.translate(),
                id: 'varConnection',
                value: 'none',
                name: 'var_dbconnection',
                controlsWidth: 460,
                options: [{
                        label: 'none',
                        value: 'none'
                    }, {
                        label: 'Default',
                        value: 'workflow'
                    }
                ],
                onChange: function (newValue, oldValue) {
                    that.changeViewSql(newValue);
                }
            }, {
                pmType: 'textarea',
                label: 'Sql',
                placeholder: 'Sql',
                id: 'varSql',
                value: '',
                name: 'var_sql',
                valueType: 'string',
                controlsWidth: 460,
                style: {cssClasses: ['mafe-textarea-resize']}
            }, {
                pmType: 'checkbox',
                label: 'Options',
                id: 'options',
                name: 'var_options_control',
                controlsWidth: 460,
                options: [{value: '1', label: ''}],
                onChange: function (newValue, oldValue) {
                    that.changeViewFieldType(that.formVariables.getField('var_field_type').getValue());
                }
            }
        ]
    });
    this.gridVariables = new PMUI.grid.GridPanel({
        id: 'gridVariables',
        pageSize: 10,
        width: '96%',
        style: {
            cssClasses: ['mafe-gridPanel']
        },
        filterPlaceholder: 'Text to Search'.translate(),
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return '';
        },
        columns: [{
                id: 'varName',
                title: 'Name',
                dataType: 'string',
                columnData: 'var_name',
                alignmentCell: 'left',
                width: '150px'
            }, {
                id: 'varLabel',
                title: 'Label',
                dataType: 'string',
                alignmentCell: 'left',
                columnData: 'var_label',
                width: '150px'
            }, {
                id: 'varType',
                title: 'Type',
                dataType: 'string',
                alignmentCell: 'left',
                columnData: 'var_field_type'
            }, {
                id: 'varNull',
                title: 'Allow Nulls',
                columnData: 'var_null',
                alignmentCell: 'left',
                dataType: 'string'
            }, {
                id: 'varEdit',
                dataType: 'button',
                title: '',
                buttonLabel: 'Edit'.translate(),
                width: '60px',
                buttonStyle: {
                    cssClasses: [
                        'mafe-button-edit'
                    ]
                },
                onButtonClick: function (row, grid) {
                    console.log(row.getData());
                    that.showFormEdit(row.getData());
                }
            }, {
                id: 'varDelete',
                dataType: 'button',
                title: '',
                buttonLabel: function (row, data) {
                    return 'Delete'.translate();
                },
                width: '70px',
                buttonStyle: {
                    cssClasses: [
                        'mafe-button-delete'
                    ]
                },
                onButtonClick: function (row, grid) {
                    that.del(row.getData(), row, grid);
                }
            }
        ],
        dataItems: null
    });
    this.buttonFieldAdd = new PMUI.field.ButtonField({
        id: 'buttonFieldAdd',
        pmType: 'buttonField',
        value: 'Add'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        controlsWidth: 50,
        proportion: 0.8,
        handler: function (field) {
            that.addAcceptedValue();
        }
    });
    this.buttonFieldCancel = new PMUI.field.ButtonField({
        id: 'buttonFieldCancel',
        pmType: 'buttonField',
        value: 'Cancel'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        controlsWidth: 55,
        proportion: 0.6,
        handler: function (field) {
            that.cancelAcceptedValue();
        }
    });
    this.formAcceptedValues = new PMUI.form.Form({
        id: 'formAcceptedValues',
        width: 700,
        visibleHeader: false,
        items: [
            {
                pmType: 'panel',
                legend: 'Options'.translate(),
                fieldset: true,
                layout: 'hbox',
                items: [{
                        pmType: 'text',
                        name: 'keyValue',
                        label: 'Key/Value'.translate(),
                        labelWidth: '50%',
                        controlsWidth: 200,
                        proportion: 2.5,
                        valueType: 'string',
                        maxLength: 255,
                        required: true
                    }, {
                        pmType: 'text',
                        name: 'value',
                        label: 'Label'.translate(),
                        labelWidth: '40%',
                        controlsWidth: 300,
                        valueType: 'string',
                        maxLength: 255,
                        proportion: 3.4,
                        required: true
                    },
                    that.buttonFieldAdd,
                    that.buttonFieldCancel
                ]
            }
        ]
    });
    this.gridAcceptedValues = new PMUI.grid.GridPanel({
        id: 'gridAcceptedValues',
        pageSize: 5,
        style: {cssClasses: ['mafe-gridPanel']},
        filterPlaceholder: 'Text to Search'.translate(),
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        filterable: false,
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return '';
        },
        columns: [{
                id: 'keyvalue',
                title: 'Key/Value',
                columnData: 'keyValue',
                dataType: 'string',
                alignmentCell: 'left',
                width: 180
            }, {
                id: 'label',
                title: 'Label',
                columnData: 'value',
                dataType: 'string',
                alignmentCell: 'left',
                width: 300
            }, {
                id: 'buttonEdit',
                dataType: 'button',
                title: '',
                buttonLabel: 'Edit'.translate(),
                width: 60,
                buttonStyle: {cssClasses: ['mafe-button-edit']},
                onButtonClick: function (row, grid) {
                    that.editAcceptedValue(row);
                }
            }, {
                id: 'buttonDelete',
                dataType: 'button',
                title: '',
                buttonLabel: function (row, data) {
                    return 'Delete'.translate();
                },
                width: 75,
                buttonStyle: {cssClasses: ['mafe-button-delete']},
                onButtonClick: function (row, grid) {
                    that.deleteAcceptedValue(row);
                }
            }
        ],
        dataItems: null
    });
    this.formBooleanOptions = new PMUI.form.Form({
        id: 'formAcceptedValues',
        width: 700,
        visibleHeader: false,
        items: [
            {
                pmType: 'panel',
                legend: 'Options'.translate(),
                fieldset: true,
                layout: 'vbox',
                items: [
                    {
                        pmType: 'panel',
                        layout: 'hbox',
                        items: [
                            new PMLabelField({
                                label: 'Key/Value'.translate(),
                                textMode: 'plain',
                                style: {
                                    cssProperties: {
                                        color: '#AEAEAE',
                                        'font-weight': 'bold'
                                    }
                                },
                                proportion: 0.2
                            }),
                            new PMLabelField({
                                label: 'Label'.translate(),
                                textMode: 'plain',
                                style: {
                                    cssProperties: {
                                        color: '#AEAEAE',
                                        'font-weight': 'bold'
                                    }
                                },
                                proportion: 0.8
                            })
                        ]
                    },
                    {
                        pmType: 'text',
                        name: 'trueOption',
                        label: 'True'.translate(),
                        controlsWidth: 460,
                        valueType: 'string',
                        maxLength: 100,
                        required: true
                    }, {
                        pmType: 'text',
                        name: 'falseOption',
                        label: 'False'.translate(),
                        controlsWidth: 460,
                        valueType: 'string',
                        maxLength: 100,
                        required: true
                    }
                ]
            }
        ]
    });
    this.windowVariables = new PMUI.ui.Window({
        id: 'windowVariables',
        title: 'Variables'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        buttonsPosition: 'center',
        footerItems: [
            new PMUI.ui.Button({
                id: 'windowVariablesSave',
                text: 'Save'.translate(),
                handler: function () {
                    if (that.edit) {
                        that.updateVariables();
                    } else {
                        that.saveVariables();
                    }
                },
                height: 31,
                buttonType: 'success'
            }),
            {
                id: 'windowVariablesOr',
                pmType: 'label',
                text: 'or'.translate(),
                style: {
                    cssProperties: {
                        'fontSize': '14px'
                    }
                }
            },
            new PMUI.ui.Button({
                id: 'windowVariablesCancel',
                text: 'Cancel'.translate(),
                handler: function () {
                    if (that.formVariables.isDirty() || that.dirtyAcceptedValue) {
                        var message_window = new PMUI.ui.MessageWindow({
                            id: 'messageWindowCancel',
                            width: 490,
                            title: 'Confirm'.translate(),
                            windowMessageType: 'warning',
                            bodyHeight: 'auto',
                            message: 'Do you want to cancel this action? All your changes will be lost if you cancel it.'.translate(),
                            footerItems: [{
                                    id: 'messageWindowYes',
                                    text: 'Yes'.translate(),
                                    height: 40,
                                    handler: function () {
                                        message_window.close();
                                        that.showGrid();
                                    }
                                }, {
                                    pmType: 'label',
                                    text: 'or'.translate()
                                }, {
                                    id: 'messageWindowNo',
                                    text: 'No'.translate(),
                                    handler: function () {
                                        message_window.close();
                                    },
                                    buttonType: 'link'
                                }
                            ]
                        });
                        message_window.open();
                        message_window.showFooter();
                    } else {
                        that.showGrid();
                    }
                },
                height: 31,
                buttonType: 'link'
            })
        ],
        buttonPanelPosition: 'top'
    });
    PMVariables.prototype.init.call(this);
};
PMVariables.prototype.init = function () {
    var that = this;

    that.buttonCreate.defineEvents();

    that.windowVariables.addItem(that.gridVariables);
    that.windowVariables.addItem(that.formVariables);
    that.windowVariables.addItem(that.formAcceptedValues);
    that.windowVariables.addItem(that.gridAcceptedValues);
    that.windowVariables.addItem(that.formBooleanOptions);
    that.windowVariables.hideFooter();
    that.windowVariables.open();
    that.windowVariables.footer.html.style.textAlign = 'right';

    $('#gridVariables .pmui-textcontrol').css({'margin-top': '5px', width: '250px'});
    that.gridVariables.dom.toolbar.appendChild(that.buttonCreate.getHTML());

    that.showGrid();
    that.loadDataBaseConnections();

    validateKeysField(that.formVariables.getField('var_name').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'isletter']);
    validateKeysField(that.formVariables.getField('var_field_size').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);
    that.formVariables.getField('var_field_size').setVisible(false);

    that.formAcceptedValues.reset();
};
PMVariables.prototype.saveVariables = function () {
    var that = this, data;
    if (!this.formVariables.isValid()) {
        return;
    }
    if (this.formBooleanOptions.visible && !this.formBooleanOptions.isValid()) {
        return;
    }
    var size = that.formVariables.getField('var_field_size').getValue();
    if (size > 2147483647 || size < 1) {
        var message = new PMUI.ui.FlashMessage({
            message: 'Size value exceeds the allowable range.'.translate(),
            duration: 3000,
            severity: 'error',
            appendTo: that.windowVariables.footer
        });
        message.show();
        return;
    }
    data = this.formVariables.getData();
    data.var_default = '';
    data.var_accepted_values = that.getDataAcceptedValues();
    (new PMRestClient({
        endpoint: 'process-variable',
        typeRequest: 'post',
        functionSuccess: function (xhr, response) {
            if (that.onSave(xhr, response) === false) {
                that.var_uid = null;
                return;
            }
            that.showGrid();
            that.load();
            that.var_uid = null;
        },
        messageError: ' '.translate(),
        data: data,
        messageSuccess: 'Variable saved successfully'.translate(),
        flashContainer: that.panel
    })).executeRestClient();
};
PMVariables.prototype.updateVariables = function () {
    var that = this, data;
    if (!this.formVariables.isValid()) {
        return;
    }
    if (this.formBooleanOptions.visible && !this.formBooleanOptions.isValid()) {
        return;
    }
    var size = that.formVariables.getField('var_field_size').getValue();
    if (size > 2147483647 || size < 1) {
        var message = new PMUI.ui.FlashMessage({
            message: 'Size value exceeds the allowable range..'.translate(),
            duration: 3000,
            severity: 'error',
            appendTo: that.windowVariables.footer
        });
        message.show();
        return;
    }
    data = this.formVariables.getData();
    if (that.formVariables.getField('var_name').getValue().trim() === that.var_name.trim()) {
        delete data['var_name'];
    }
    data.var_default = '';
    data.var_accepted_values = that.getDataAcceptedValues();
    (new PMRestClient({
        endpoint: 'process-variable/' + that.var_uid,
        typeRequest: 'update',
        data: data,
        functionSuccess: function (xhr, response) {
            if (that.onEdit(xhr, response, data) === false) {
                that.var_uid = null;
                return;
            }
            that.showGrid();
            that.load();
            that.var_uid = null;
        },
        messageError: ' '.translate(),
        messageSuccess: 'Variable update successfully'.translate(),
        flashContainer: that.panel
    })).executeRestClient();
};
PMVariables.prototype.deleteVariable = function (var_uid) {
    var that = this;
    (new PMRestClient({
        endpoint: 'process-variable/' + var_uid,
        typeRequest: 'remove',
        functionSuccess: function (xhr, response) {
            that.load();
        },
        messageError: 'working...'.translate(),
        messageSuccess: 'Variable deleted successfully'.translate(),
        flashContainer: that.panel
    })).executeRestClient();
};
PMVariables.prototype.load = function () {
    var that = this;
    var restProxy = new PMRestClient({
        endpoint: 'process-variables',
        typeRequest: 'get',
        functionSuccess: function (xhr, response) {
            var listInputDocs = response;
            for (var i = 0; i < listInputDocs.length; i++) {
                if (parseInt(listInputDocs[i].var_null)) {
                    listInputDocs[i].var_null = 'yes';
                } else {
                    listInputDocs[i].var_null = 'no';
                }
            }
            that.gridVariables.setDataItems(listInputDocs);
            that.gridVariables.sort('var_name', 'asc');
        }
    });
    restProxy.executeRestClient();
};
PMVariables.prototype.del = function (data, row, grid) {
    var that = this;
    var confirmWindow = new PMUI.ui.MessageWindow({
        id: 'confirmWindowDel',
        windowMessageType: 'error',
        width: 490,
        bodyHeight: 'auto',
        message: 'Do you want to delete this variable?'.translate(),
        footerItems: [{
                text: 'Delete'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                    that.deleteVariable(data.var_uid, row);
                },
                height: 40
            }, {
                pmType: 'label',
                text: 'or'.translate()
            }, {
                text: 'Cancel'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                },
                buttonType: 'link'
            }
        ]
    });
    confirmWindow.open();
    confirmWindow.dom.titleContainer.style.height = '17px';
    confirmWindow.showFooter();
};
PMVariables.prototype.showGrid = function () {
    var that = this;
    that.formVariables.setVisible(false);
    that.formAcceptedValues.setVisible(false);
    that.gridAcceptedValues.setVisible(false);
    that.formBooleanOptions.setVisible(false);
    that.gridVariables.setVisible(true);
    that.windowVariables.setTitle('Variables'.translate());
    that.windowVariables.hideFooter();
};
PMVariables.prototype.showForm = function () {
    var that = this;
    that.edit = false;
    that.dirtyAcceptedValue = false;
    that.formVariables.setVisible(true);
    that.formAcceptedValues.setVisible(true);
    that.gridAcceptedValues.setVisible(true);
    that.formBooleanOptions.setVisible(true);
    that.gridVariables.setVisible(false);
    that.windowVariables.setTitle('Create Variables'.translate());
    that.windowVariables.showFooter();
    that.formVariables.reset();
    that.formVariables.setFocus();
    that.changeViewFieldType('string');
    that.changeViewSql('none');
    that.formAcceptedValues.reset();
    that.gridAcceptedValues.clearItems();
    that.formBooleanOptions.reset();
    that.buttonFieldCancel.setVisible(false);
};
PMVariables.prototype.showFormEdit = function (data) {
    var that = this;
    that.showForm();
    that.var_uid = data.var_uid;
    that.edit = true;
    that.var_name = data.var_name;
    that.windowVariables.setTitle('Update Variables'.translate());
    that.formVariables.getField('var_dbconnection').setValue(data.var_dbconnection);
    that.formVariables.getField('var_field_size').setValue(data.var_field_size);
    that.formVariables.getField('var_field_type').setValue(data.var_field_type);
    that.formVariables.getField('var_label').setValue(data.var_label);
    that.formVariables.getField('var_name').setValue(data.var_name);
    that.formVariables.getField('var_null').setValue(data.var_null === 'yes' ? 1 : 0);
    that.formVariables.getField('var_sql').setValue(data.var_sql);

    that.setVarOptionsControl(data.var_accepted_values);
    that.changeViewFieldType(data.var_field_type);
    that.changeViewSql(data.var_dbconnection);
    that.setDataAcceptedValues(data.var_accepted_values);
};
PMVariables.prototype.loadDataBaseConnections = function () {
    var that = this;
    var restProxy = new PMRestClient({
        endpoint: 'database-connections',
        typeRequest: 'get',
        functionSuccess: function (xhr, response) {
            var dropdown = that.formVariables.getField('var_dbconnection');
            for (var i = 0; i < response.length; i++) {
                dropdown.addOption({
                    label: '[' + response[i].dbs_server + ':' + response[i].dbs_port + '] ' + response[i].dbs_type + ': ' + response[i].dbs_database_name,
                    value: '[' + response[i].dbs_server + ':' + response[i].dbs_port + '] ' + response[i].dbs_type + ': ' + response[i].dbs_database_name
                });
            }
        }
    });
    restProxy.executeRestClient();
};
PMVariables.prototype.changeViewFieldType = function (newValue) {
    var that = this;
    var sw = that.formVariables.getField('var_options_control').controls[0].selected;

    that.formVariables.getField('var_options_control').setVisible(false);
    that.formVariables.getField('var_field_size').setVisible(false);
    that.formAcceptedValues.setVisible(false);
    that.gridAcceptedValues.setVisible(false);
    that.formBooleanOptions.setVisible(false);

    validateKeysField(that.formAcceptedValues.getField('keyValue').getControls()[0].getHTML(), []);

    if (this.fieldInfo === null) {
        this.fieldInfo = document.createTextNode('');
        var a = that.formVariables.getField('var_field_type').getControls()[0];
        a.html.parentNode.appendChild(document.createElement('br'));
        a.html.parentNode.appendChild(this.fieldInfo);
    }

    switch (newValue) {
        case 'string':
            that.formVariables.getField('var_options_control').setVisible(true);
            that.formVariables.getField('var_field_size').setVisible(true);
            that.formAcceptedValues.setVisible(true && sw);
            that.gridAcceptedValues.setVisible(true && sw);

            this.fieldInfo.data = 'Support controls: text, textarea, dropdown, checkbox group, radio, datetime, label, suggest.';
            break;
        case 'integer':
            that.formVariables.getField('var_options_control').setVisible(true);
            that.formAcceptedValues.setVisible(true && sw);
            that.gridAcceptedValues.setVisible(true && sw);

            validateKeysField(that.formAcceptedValues.getField('keyValue').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'ishyphen']);

            this.fieldInfo.data = 'Support controls: text, dropdown, checkbox group, radio, label.';
            break;
        case 'float':
            that.formVariables.getField('var_options_control').setVisible(true);
            that.formAcceptedValues.setVisible(true && sw);
            that.gridAcceptedValues.setVisible(true && sw);

            validateKeysField(that.formAcceptedValues.getField('keyValue').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'isperiod', 'ishyphen']);

            this.fieldInfo.data = 'Support controls: text, label.';
            break;
        case 'boolean':
            that.formBooleanOptions.setVisible(true);

            this.fieldInfo.data = 'Support controls: dropdown, radio.';
            break;
        case 'date':
            this.fieldInfo.data = 'Support controls: date, label.';
            break;
        case 'datetime':
            this.fieldInfo.data = 'Support controls: datetime, label.';
            break;
    }
};
PMVariables.prototype.changeViewSql = function (value) {
    this.formVariables.getField('var_sql').setVisible(value === 'none' ? false : true);
};
PMVariables.prototype.addAcceptedValue = function () {
    var that = this;
    if (that.isAcceptedValueAdded() && that.editRow === null) {
        var message = new PMUI.ui.FlashMessage({
            message: 'The key value already exists.'.translate(),
            duration: 3000,
            severity: 'error',
            appendTo: that.windowVariables.footer
        });
        message.show();
        return;
    }
    if (!that.formAcceptedValues.isValid()) {
        return;
    }
    if (that.editRow === null) {
        that.gridAcceptedValues.addItem(new PMUI.grid.GridPanelRow({
            data: {
                keyValue: that.formAcceptedValues.getField('keyValue').getValue(),
                value: that.formAcceptedValues.getField('value').getValue()
            }
        }));
    } else {
        that.editRow.setData({
            keyValue: that.formAcceptedValues.getField('keyValue').getValue(),
            value: that.formAcceptedValues.getField('value').getValue()
        });
    }
    that.dirtyAcceptedValue = true;
    that.cancelAcceptedValue();
};
PMVariables.prototype.editAcceptedValue = function (row) {
    var that = this;
    that.editRow = row;
    var data = row.getData();
    that.formAcceptedValues.getField('keyValue').setValue(data.keyValue);
    that.formAcceptedValues.getField('value').setValue(data.value);
    that.buttonFieldAdd.setValue('Save'.translate());
    that.buttonFieldCancel.setVisible(true);
};
PMVariables.prototype.deleteAcceptedValue = function (row) {
    var that = this;
    var confirmWindow = new PMUI.ui.MessageWindow({
        id: 'confirmWindowDeleteAcceptedValue',
        windowMessageType: 'error',
        width: 490,
        bodyHeight: 'auto',
        message: 'Do you want to delete this Key Value?'.translate(),
        footerItems: [{
                text: 'Delete'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                    that.gridAcceptedValues.removeItem(row);
                    that.dirtyAcceptedValue = true;
                },
                height: 40
            }, {
                pmType: 'label',
                text: 'or'.translate()
            }, {
                text: 'Cancel'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                },
                buttonType: 'link'
            }
        ]
    });
    confirmWindow.open();
    confirmWindow.dom.titleContainer.style.height = '17px';
    confirmWindow.showFooter();
};
PMVariables.prototype.getDataAcceptedValues = function () {
    var that = this, data = [], i;
    if (that.gridAcceptedValues.visible) {
        data = that.gridAcceptedValues.getData();
        for (i = 0; i < data.length; i++) {
            delete data[i].key;
            delete data[i].type;
        }
    }
    if (that.formBooleanOptions.visible) {
        var a = that.formBooleanOptions.getData();
        data = [
            {keyValue: '1', value: a.trueOption},
            {keyValue: '0', value: a.falseOption}
        ];
    }
    return data;
};
PMVariables.prototype.setDataAcceptedValues = function (stringJsonData) {
    if (!stringJsonData) {
        return;
    }
    var that = this, i, data = stringJsonData;
    if (typeof stringJsonData === 'string') {
        data = JSON.parse(stringJsonData);
    }
    if (that.gridAcceptedValues.visible) {
        for (i = 0; i < data.length; i++) {
            that.gridAcceptedValues.addItem(new PMUI.grid.GridPanelRow({
                data: {
                    keyValue: data[i].keyValue,
                    value: data[i].value
                }
            }));
        }
    }
    if (that.formBooleanOptions.visible) {
        that.formBooleanOptions.getField('trueOption').setValue(data[0].value);
        that.formBooleanOptions.getField('falseOption').setValue(data[1].value);
    }
};
PMVariables.prototype.setVarOptionsControl = function (stringJsonData) {
    if (!stringJsonData) {
        return;
    }
    var that = this, i, data = stringJsonData;
    if (typeof stringJsonData === 'string') {
        data = JSON.parse(stringJsonData);
    }
    if (data.length > 0) {
        that.formVariables.getField('var_options_control').setValue("['1']");
    }
};
PMVariables.prototype.cancelAcceptedValue = function () {
    var that = this;
    that.editRow = null;
    that.buttonFieldAdd.setValue('Add'.translate());
    that.buttonFieldCancel.setVisible(false);
    that.formAcceptedValues.reset();
};
PMVariables.prototype.isAcceptedValueAdded = function () {
    var that = this, i;
    var data = that.gridAcceptedValues.getData();
    for (i = 0; i < data.length; i++) {
        if (data[i].keyValue === that.formAcceptedValues.getField('keyValue').getValue()) {
            return true;
        }
    }
    return false;
};

PMDesigner.variables = function () {
    var pmvariables = new PMVariables();
    pmvariables.load();
};
PMDesigner.variables.create = function () {
    var pmvariables = new PMVariables();
    pmvariables.showForm();
    pmvariables.load();
};

RowVariableCondition = function () {
    PMUI.form.FormPanel.call(this, {
        layout: 'hbox'
    });
    RowVariableCondition.prototype.init.call(this);
};
RowVariableCondition.prototype = new PMUI.form.FormPanel();
RowVariableCondition.prototype.createHTML = function () {
    PMUI.form.FormPanel.prototype.createHTML.call(this);
    var items = this.getItems();
    items[0].dom.labelTextContainer.style.display = 'none';
    items[1].dom.labelTextContainer.style.display = 'none';
    items[2].dom.labelTextContainer.style.display = 'none';
    items[2].style.addProperties({display: 'none'});
    items[2].controls[0].button.setButtonType('error');
    return this.html;
};
RowVariableCondition.prototype.init = function () {
    var that = this;
    var field = new PMUI.field.TextField({
        id: 'idField',
        name: '',
        required: true,
        controlsWidth: 425,
        proportion: 2.1,
        labelVisible: false
    });
    var typeData = new PMUI.field.DropDownListField({
        id: 'idTypeData',
        name: '',
        valueType: 'string',
        value: '',
        readOnly: true,
        controlsWidth: 200,
        labelVisible: false,
        options: [{
                value: 'integer',
                label: 'Integer'
            }, {
                value: 'string',
                label: 'String'
            }, {
                value: 'float',
                label: 'Float'
            }, {
                value: 'boolean',
                label: 'Boolean'
            }, {
                value: 'date',
                label: 'Date'
            }, {
                value: 'datetime',
                label: 'Datetime'
            }
        ]
    });
    var remove = new PMUI.field.ButtonField({
        id: 'idRemove',
        value: 'Delete'.translate(),
        labelVisible: false,
        handler: function (e, a) {
            that.getParent().removeItem(that);
        },
        name: 'delete',
        controlsWidth: 60
    });
    that.addItem(field);
    that.addItem(typeData);
    that.addItem(remove);
};

PropertiesReceiveMessage = function (menuOption) {
    this.variables = [];
    this.onApply = new Function();
    this.onCancel = new Function();
    this.menuOption = menuOption;
    Mafe.Window.call(this);
    PropertiesReceiveMessage.prototype.init.call(this);
};
PropertiesReceiveMessage.prototype = new Mafe.Window();
PropertiesReceiveMessage.prototype.init = function () {
    var that = this;
    that.setTitle(that.menuOption.getMenuTargetElement().evn_name);
    that.setButtons([
        new PMUI.ui.Button({
            id: 'windowDynaformInformationSaveOpen',
            text: 'Apply'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                that.onApply();
            }
        }),
        {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {'fontSize': '14px'}}
        },
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.close();
                that.onCancel();
            }
        })
    ]);
    that.buttonAdd = new PMUI.ui.Button({
        text: 'Add Variable'.translate(),
        buttonType: 'success',
        height: 31,
        style: {cssProperties: {marginLeft: '50px', marginTop: '10px'}},
        handler: function () {
            that.addVariable();
        }
    });
    that.form = new Mafe.Form({
        title: that.menuOption.getMenuTargetElement().evn_name,
        width: DEFAULT_WINDOW_WIDTH - 60,
        style: {cssProperties: {'margin-left': '35px'}}
    });
    that.conditionForm = new Mafe.Form({
        visibleHeader: false,
        width: DEFAULT_WINDOW_WIDTH - 60,
        style: {cssProperties: {'margin-left': '35px'}},
        items: [{
                label: 'Condition',
                labelPosition: 'top',
                pmType: 'textarea',
                rows: 100,
                style: {cssClasses: ['mafe-textarea-resize']}
            }
        ]
    });

    that.addItem(that.buttonAdd);
    that.addItem(that.form);
    that.addItem(that.conditionForm);

    that.addVariable();
};
PropertiesReceiveMessage.prototype.addVariable = function () {
    var that = this;
    var a = new RowVariableCondition(this.variables);
    that.form.addItem(a);
    //force padding
    for (var i = 0; i < that.form.getItems().length; i++) {
        that.form.getItems()[i].style.addProperties({'padding': 'initial'});
    }
};

EventMessagesGrid = function () {
    this.onCreate = new Function();
    this.onEdit = new Function();
    this.onDel = new Function();
    Mafe.Grid.call(this);
    EventMessagesGrid.prototype.init.call(this);
};
EventMessagesGrid.prototype = new Mafe.Grid();
EventMessagesGrid.prototype.createHTML = function () {
    Mafe.Grid.prototype.createHTML.call(this);
    this.dom.toolbar.appendChild(this.buttonCreate.getHTML());
    return this.html;
};
EventMessagesGrid.prototype.init = function () {
    var that = this;
    that.buttonCreate = new PMUI.ui.Button({
        id: 'idButtonEventMessagesGrid',
        text: 'Create'.translate(),
        height: '36px',
        width: 100,
        style: {cssClasses: ['mafe-button-create']},
        handler: function (event) {
            that.onCreate(event);
        }
    });
    that.buttonCreate.defineEvents();
    that.setID('idEventMessagesGrid');
    that.setColumns([{
            id: '',
            title: 'Nombre',
            sortable: true,
            width: '460px',
            dataType: 'string',
            alignmentCell: 'left',
            columnData: 'mes_title'
        }, {
            id: 'dynaformGridPanelEdit',
            title: '',
            dataType: 'button',
            buttonStyle: {cssClasses: ['mafe-button-edit']},
            buttonLabel: function (row, data) {
                return 'Edit'.translate();
            },
            onButtonClick: function (row, grid) {
                that.onEdit(row, grid);
            }
        }, {
            id: 'dynaformGridPanelDelete',
            title: '',
            dataType: 'button',
            buttonStyle: {cssClasses: ['mafe-button-delete']},
            buttonLabel: function (row, data) {
                return 'Delete'.translate();
            },
            onButtonClick: function (row, grid) {
                that.onDel(row, grid);
            }
        }
    ]);
    that.load();
};
EventMessagesGrid.prototype.show = function () {

};
EventMessagesGrid.prototype.create = function () {

};
EventMessagesGrid.prototype.load = function () {
    var that = this;
    var dt = [
        {mes_title: 'message1-1'},
        {mes_title: 'message1-2'},
        {mes_title: 'message1-3'},
        {mes_title: 'message1-4'}
    ];
    that.setDataItems(dt);
};

EventMessagesForm = function () {
    Mafe.Form.call(this);
    EventMessagesForm.prototype.init.call(this);
};
EventMessagesForm.prototype = new Mafe.Form();
EventMessagesForm.prototype.init = function () {
    var that = this;
    that.setID('idEventMessagesForm');
    that.setItems({
        id: '',
        pmType: 'text',
        label: 'Name'.translate(),
        value: '',
        maxLength: 100,
        placeholder: ''.translate(),
        name: '',
        required: true,
        controlsWidth: 300
    });
    that.buttons = [
        new PMUI.ui.Button({
            id: 'windowDynaformPmtableSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                that.onSave();
            }
        }),
        {
            pmType: 'label',
            text: 'or'.translate(),
            style: {cssProperties: {'fontSize': '14px'}}
        },
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'link',
            height: 31,
            handler: function () {
                that.onCancel();
            }
        })
    ];
};
EventMessagesForm.prototype.getButtons = function () {
    return this.buttons;
};

EventMessages = function () {
    Mafe.Window.call(this);

    this.list = new EventMessagesGrid();
    this.form = new EventMessagesForm();

    EventMessages.prototype.init.call(this);
};
EventMessages.prototype = new Mafe.Window();
EventMessages.prototype.init = function () {
    var that = this;
    that.list.onCreate = function () {
        that.resetView();
        that.form.setVisible(true);
    };
    that.setTitle("Event Messages");
    that.addItem(that.list);
};
EventMessages.prototype.showForm = function () {
    this.list.show();
};

PMDesigner.eventMessages = function () {
    var a = new EventMessages();
    a.open();
};
PMDesigner.eventMessages.create = function () {
//    var a = new EventMessages();
//    a.open();
};

